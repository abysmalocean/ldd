- To create static library
  
  gcc -c -I. prog1.c
  gcc -c -I. prog2.c

Pack this libraries using:

  ar rcs libmylib.a prog1.c prog2.c 


You can see the contents of this library using

ar -t libmylib.a

To Compile our test application
gcc mytestapp.c libmylib.a -L. -I. -o mytestapp_static


- TO creta dynamic library


 gcc -c -fpic -I. prog1.c
 gcc -c -fpic -I. prog2.c


 gcc -shared   -o libmylib.so prog1.o prog2.o

To build the application:

gcc mytestapp.c libmylib.so -I. -o mytestapp

- To convert a static library to dynamic library

gcc -shared -o mytestapp_a_to_so.so libmylib.a

1. If you don't want to have to deal with the LD_LIBRARY_PATH variable, you can add the linker -rpath option to the gcc command line. In your case, this would be:

	gcc ... -Wl,-rpath=/home/npalko/Development/POCO/lib/Linux/x86_64
	This effectively hardcodes that path in the executable, so it may or may not be suitable for your purposes.	
