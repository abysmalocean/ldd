cscope 15 $HOME/projects/linux/Code-2.6.31 (2)               0000995382
	@Unix-Programming/Files/app.c

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<sys/ty≥s.h
>

10 
	$maö
(){

11 
fd
;

12 
off_t
 
off£t
;

13 
fd
 = 
	`›í
("./√wfûe",
O_RDWR
|
O_CREAT
|
O_APPEND
);

14 if–
fd
 < 0){

15 
	`≥º‹
("file :");

16 
	`exô
(1);

18 
	`¥ötf
(" ..\n");

19 
	`wrôe
(
fd
,"one",3);

20 
	`¥ötf
(" ..\n");

21 
off£t
 = 
	`l£ek
(
fd
,0,
SEEK_CUR
);

22 
	`¥ötf
(" cuºíàfûêpoöã∏i†© %d\n",
off£t
);

23 
	`wrôe
(
fd
,"two",3);

24 
	`wrôe
(
fd
,"thr",3);

25 
	`wrôe
(
fd
,"fou",3);

26 
off£t
 = 
	`l£ek
(
fd
,0,
SEEK_CUR
);

27 
	`¥ötf
(" cuºíàfûêpoöã∏i†© %d\n",
off£t
);

28 
off£t
 = 
	`l£ek
(
fd
,-6,
SEEK_CUR
);

29 
	`¥ötf
(" cuºíàfûêpoöã∏i†© %d\n",
off£t
);

30 
	`wrôe
(
fd
,"fiv",3);

31 
	}
}

	@Unix-Programming/Files/cdpwd.c

7 
	~<uni°d.h
>

8 
	~<°dio.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<limôs.h
>

13 
	$maö
(
¨gc
 , * 
¨gv
[])

15 *
±r
;

16 
max∑thsize
;

17 
max∑thsize
 = 
	`∑thc⁄f
("/",
_PC_PATH_MAX
);

18 
±r
 = (*Ë
	`mÆloc
 (
max∑thsize
);

19 i‡(
	`gëcwd
(
±r
, 
max∑thsize
Ë=
NULL
){

20 
	`≥º‹
("prog:");

21 
	`exô
(1);

23 
	`¥ötf
("cwd = %s\n", 
±r
);

24 i‡(
	`chdú
(
¨gv
[1]) < 0){

25 
	`≥º‹
("prog:");

26 
	`exô
(1);

28 i‡(
	`gëcwd
(
±r
, 
max∑thsize
Ë=
NULL
){

29 
	`≥º‹
("prog:");

30 
	`exô
(1);

32 
	`¥ötf
("cwd = %s\n", 
±r
);

33 
	}
}

	@Unix-Programming/Files/filetype.c

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 
	$maö
(
¨gc
, *
¨gv
[])

11 
i
;

12 
°©
 
buf
;

13 *
±r
;

14 if(
¨gc
 !=2){

15 
	`¥ötf
("Usage: ftype filename\n");

16 
	`exô
(2);

18 
	`¥ötf
("%s: ", 
¨gv
[1]);

19 i‡(
	`l°©
(
¨gv
[1], &
buf
) < 0) {

20 
	`≥º‹
("lstatfailed:");

21 
	`exô
(1);

24 if(
	`S_ISREG
(
buf
.
°_mode
))

25 
±r
 = "regular";

26 if(
	`S_ISDIR
(
buf
.
°_mode
))

27 
±r
 = "directory";

28 if(
	`S_ISCHR
(
buf
.
°_mode
)){

29 
±r
 = "character special";

30 
	`¥ötf
("Maj‹ = %d \n",
	`maj‹
(
buf
.
°_rdev
));

31 
	`¥ötf
("Mö‹ = %d \n",
	`mö‹
(
buf
.
°_rdev
));

33 if(
	`S_ISBLK
(
buf
.
°_mode
))

34 
±r
 = "block special";

35 if(
	`S_ISFIFO
(
buf
.
°_mode
))

36 
±r
 = "fifo";

37 if(
	`S_ISLNK
(
buf
.
°_mode
))

38 
±r
 = "symbolicÜink";

40 
±r
 = "** unknown mode **";

41 
	`¥ötf
("FûêTy≥ : %s\n", 
±r
);

42 
	`¥ötf
(" fûêow√∏%d \n", 
buf
.
°_uid
);

43 
	`¥ötf
(" fûêgrou∞%d \n", 
buf
.
°_gid
);

44 
	`¥ötf
(" fûêsizê%d \n", 
buf
.
°_size
);

45 
	`¥ötf
(" block sizê%d \n", 
buf
.
°_blksize
);

46 
	}
}

	@Unix-Programming/Files/mmap.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("ã°.fûe",
O_RDWR
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
|
PROT_WRITE
,\

18 
MAP_PRIVATE
,
fd
,0);

19 if(
fûed©a
 =
NULL
){

20 
	`≥º‹
("Maping Failed");

21 
	`exô
(1);

25 
ãmp
 = 
fûed©a
;

26 
i
=0;i<100;i++,
fûed©a
++)

27 
	`putch¨
(*
fûed©a
);

28 
i
 = 
	`munm≠
(
ãmp
,100);

29 if–
i
 != 0)

30 
	`¥ötf
(" failedÅo unmap\n");

31 
	}
}

	@Unix-Programming/Files/mmap1.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/mm™.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

12 
	$maö
(){

13 
fd
,
i
;

14 *
fûed©a

NULL
,*
ãmp
;

15 
fd
 = 
	`›í
("./ã°.fûe",
O_RDWR
);

16 
fûed©a
 = (*Ë
	`mm≠
((*)0,125,
PROT_READ
|
PROT_WRITE
,\

17 
MAP_SHARED
,
fd
,0);

18 if(
fûed©a
 =
NULL
){

19 
	`≥º‹
("Maping Failed");

20 
	`exô
(1);

22 
ãmp
 = 
fûed©a
;

25 
i
=0;i<125;i++,
fûed©a
++)

26 *
fûed©a
 = 'A';

27 
fûed©a
 = 
ãmp
;

28 
i
=0;i<125;i++,
fûed©a
++)

29 
	`putch¨
(*
fûed©a
);

30 
i
=
	`msync
(
ãmp
,125,
MS_SYNC
);

31 if–
i
 == 0)

32 
	`¥ötf
(" file is successfully updated \n");

34 
	`¥ötf
("Öagêsizê%d\n",
	`gë∑gesize
());

35 
	}
}

	@Unix-Programming/Files/mmap2.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("./ã°.fûe",
O_RDWR
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,125,
PROT_READ
|
PROT_WRITE
,\

18 
MAP_SHARED
,
fd
,0);

19 if(
fûed©a
 =
NULL
){

20 
	`≥º‹
("Maping Failed");

21 
	`exô
(1);

23 
ãmp
 = 
fûed©a
;

26 
i
=0;i<125;i++,
fûed©a
++)

27 
	`putch¨
(*
fûed©a
);

28 
	`¥ötf
(" fûêm≠≥dáà%x\n",
ãmp
);

29 
	`gëch¨
();

30 
	`gëch¨
();

31 
	`putch¨
(*
ãmp
);

32 
	`munm≠
(
ãmp
,125);

34 
	`¥ötf
("\náfter unmapping\n");

35 
	`gëch¨
();

36 
	`gëch¨
();

37 
	`putch¨
(*
ãmp
);

39 
	}
}

	@Unix-Programming/Files/read.c

7 
	~<f˙é.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

11 
	$maö
()

13 
buf
[30];

14 
fd
;

17 if–(
fd
 = 
	`›í
("ªad.txt", 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
)) < 0)

19 
	`¥ötf
("\n openÅo fail");

20 
	`exô
(0);

23 
	`¥ötf
("\n Open sucessfully");

26 if–
	`wrôe
(
fd
,"IDST",4) != 4)

28 
	`¥ötf
("\n writeÉrror");

29 
	`exô
(0);

33 if–
	`l£ek
(
fd
,0,0) == -1)

35 
	`¥ötf
("\nÜseekÉrror");

36 
	`exô
(0);

39 if–
	`ªad
(
fd
,
buf
,4) < 0)

41 
	`¥ötf
("\nÑeadÉrror");

42 
	`exô
(0);

44 
	`¥ötf
("\¿Thêªad msg : %s", 
buf
);

45 
	`˛o£
(
fd
);

47 
	}
}

	@Unix-Programming/Files/readfifo.c

10 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<f˙é.h
>

14 
	$maö
(){

15 
fd
,
i
;

16 
buf
[20];

17 
ssize_t
 
size
;

18 
fd
 = 
	`›í
("./myfifo",
O_RDONLY
);

19 if(
fd
 < 0){

20 
	`≥º‹
("Pipe Error :");

21 
	`exô
(1);

23 
size
 = 
	`ªad
(
fd
,
buf
,15);

24 
	`¥ötf
("Çÿo‡byã†ªad from FIFO = %d\n",
size
);

25 
i
=0;i<
size
;i++)

26 
	`¥ötf
("%c\n",
buf
[
i
]);

27 
	}
}

	@Unix-Programming/Files/writefifo.c

10 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<f˙é.h
>

14 
	$maö
(){

15 
fd
;

16 
fd
 = 
	`›í
("./myfifo",
O_WRONLY
);

17 if(
fd
 < 0){

18 
	`≥º‹
("Pipe Error :");

19 
	`exô
(1);

21 
	`wrôe
(
fd
,"abc",3);

22 
	`wrôe
(
fd
,"abc",3);

23 
	`wrôe
(
fd
,"abc",3);

24 
	}
}

	@Unix-Programming/file_locking2/common.c

6 
	~<uni°d.h
>

7 
	~<sys/fûe.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~"comm⁄.h
"

22 
	$£tLock
(
fd
, 
ty≥
)

24 
ªtu∫_code
 = 0;

25 
Êock
 
lock
;

27 
lock
.
l_whí˚
 = 
SEEK_SET
;

28 
lock
.
l_°¨t
 = 0;

29 
lock
.
l_Àn
 = 1;

31 
lock
.
l_ty≥
 = 
ty≥
;

33 if((
	`f˙é
(
fd
,
F_SETLK
,&
lock
)) != 0)

35 
ªtu∫_code
 = 1;

37 
	`f˙é
(
fd
,
F_GETLK
,&
lock
);

38 if(
lock
.
l_ty≥
 !
F_UNLCK
)

40 
lock
.
l_ty≥
)

42 (
F_RDLCK
):

43 
	`¥ötf
("AÑódÜock i†Æªady së o¿th© fûêbyÅhê¥ogøm wôh PID %d.\n\n",
lock
.
l_pid
);

46 (
F_WRLCK
):

47 
	`¥ötf
("A wrôêlock i†Æªady së o¿th© fûêbyÅhê¥ogøm wôh PID %d.s\n\n",
lock
.
l_pid
);

53  
ªtu∫_code
;

54 
	}
}

	@Unix-Programming/file_locking2/common.h

1 #i‚de‡
__comm⁄_h__


2 
	#__comm⁄_h__


	)

4 
	#fûe_«me
 "dummy_fûe.txt"

	)

6 
£tLock
(
fd
, 
ty≥
);

	@Unix-Programming/file_locking2/locker.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<sys/fûe.h
>

10 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~"comm⁄.h
"

72 
	$maö
(
¨gc
, **
¨gv
)

74 
fd
;

77 
	`chmod
(
fûe_«me
,
S_ISGID
 | 
S_IRGRP
 | 
S_IWGRP
);

79 if((
fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0)

81 
	`≥º‹
("open");

82 
	`exô
(
EXIT_FAILURE
);

85 if(
	`£tLock
(
fd
,
F_RDLCK
) == 0)

87 
	`¥ötf
("ReadÜock is set. OpenánotherÅerminal windowándÑun\n");

88 
	`¥ötf
("non_locker. Don't hit ENTER inÅhisÅerminal window until\n");

89 
	`¥ötf
("non_lockerÅells youÅo do so.\n");

90 
	`gëch¨
();

94 
	`¥ötf
("UnableÅo setÑeadÜock. Program isÅerminating.\n");

95 
	`˛o£
(
fd
);

96 
	`exô
(
EXIT_FAILURE
);

99 if(
	`£tLock
(
fd
,
F_UNLCK
) == 0)

100 
	`¥ötf
("ReadÜock has beenÑeleased\n\n");

103 
	`¥ötf
("UnableÅoÑeleaseÑeadÜock. Program isÅerminating.\n");

104 
	`˛o£
(
fd
);

105 
	`exô
(
EXIT_FAILURE
);

108 if(
	`£tLock
(
fd
,
F_WRLCK
) == 0)

110 
	`¥ötf
("WriteÜock is set. SwitchÅoÅheÇon_lockerÅerminalánd hit ENTER.\n");

111 
	`gëch¨
();

115 
	`¥ötf
("UnableÅo set writeÜock. Program isÅerminating.\n");

116 
	`˛o£
(
fd
);

117 
	`exô
(
EXIT_FAILURE
);

120 if(
	`£tLock
(
fd
,
F_UNLCK
) == 0)

121 
	`¥ötf
("WriteÜock has beenÑeleased\n\n");

124 
	`¥ötf
("UnableÅoÑelease writeÜock. Program isÅerminating.\n");

125 
	`˛o£
(
fd
);

126 
	`exô
(
EXIT_FAILURE
);

129 
	`˛o£
(
fd
);

134  
EXIT_SUCCESS
;

135 
	}
}

	@Unix-Programming/file_locking2/non_locker.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<sys/fûe.h
>

11 
	~<uni°d.h
>

12 
	~"comm⁄.h
"

71 
	#buf„r_size
 86

	)

73 
	$maö
(
¨gc
, **
¨gv
)

75 
fd
;

76 
buf„r
[
buf„r_size
];

81 if((
fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0)

83 
	`≥º‹
("open");

84 
	`exô
(
EXIT_FAILURE
);

89 if(
	`£tLock
(
fd
,
F_RDLCK
) == 0)

91 
	`¥ötf
("ReadÜock has beenácquired,ásÉxpected.\n\nHit ENTER... ");

92 
	`gëch¨
();

96 
	`¥ötf
("UnableÅo setÑeadÜock. Program isÅerminating.\n");

97 
	`˛o£
(
fd
);

98 
	`exô
(
EXIT_FAILURE
);

103 if(
	`£tLock
(
fd
,
F_UNLCK
) == 0)

104 
	`¥ötf
("ReadÜock has beenÑeleased\n\n");

107 
	`¥ötf
("UnableÅoÑeleaseÑeadÜock. Program isÅerminating.\n");

108 
	`˛o£
(
fd
);

109 
	`exô
(
EXIT_FAILURE
);

114 if(
	`£tLock
(
fd
,
F_WRLCK
) == 0)

116 
	`¥ötf
("Acquiredá writeÜock--this shouldn't happen! Program isÅerminating.\n");

117 
	`£tLock
(
fd
,
F_UNLCK
);

118 
	`˛o£
(
fd
);

119 
	`exô
(
EXIT_FAILURE
);

122 
	`¥ötf
("FailedÅoácquireÅhe writeÜock,ásÉxpected.\n\n");

123 
	`¥ötf
("Go hit ENTER inÅheÜockerÅerminalÅoÜet it switchÅo\n");

124 
	`¥ötf
("a writeÜock,Åhen come back hereánd hit ENTER.\n");

125 
	`gëch¨
();

129 if(
	`£tLock
(
fd
,
F_RDLCK
) == 0)

131 
	`¥ötf
("AcquiredáÑeadÜock--this shouldn't happen! Program isÅerminating.\n");

132 
	`£tLock
(
fd
,
F_UNLCK
);

133 
	`˛o£
(
fd
);

134 
	`exô
(
EXIT_FAILURE
);

137 
	`¥ötf
("FailedÅoácquireÅhe writeÜock,ásÉxpected.\n\n");

138 
	`¥ötf
("Hit ENTERánd we'llÅryÅoÑeadÅhe file. This call should\n");

139 
	`¥ötf
("blockánd hangÅhisÖrogram untilÜockerÑeleases itsÜock\n");

140 
	`¥ötf
("onÅhe file. OnceÅhisÖrogram hangs, go hit ENTER inÅhe\n");

141 
	`¥ötf
("lockerÅerminal.\n");

142 
	`gëch¨
();

144 
	`¥ötf
("AttemptingÅoÑead file... \n\n");

145 if(
	`ªad
(
fd
,
buf„r
,
buf„r_size
) == buffer_size)

147 
	`¥ötf
("SuccessfullyÑead fromÅhe file.\n");

148 
buf„r
[
buf„r_size
 - 1] = '\0';

149 
	`¥ötf
("D©®ªad: \"%s\"\n",
buf„r
);

152 
	`¥ötf
("CouldÇotÑead fromÅhe file.\n");

154 
	`˛o£
(
fd
);

159  
EXIT_SUCCESS
;

160 
	}
}

	@Unix-Programming/filelock-1/FLOCK1.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`Êock
(
fd
,
LOCK_SH
);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/filelock-1/FLOCK2.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`Êock
(
fd
,
LOCK_EX
);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/filelock-1/FLOCK3.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`Êock
(
fd
,
LOCK_EX
|
LOCK_NB
);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/filelock-1/PROC1.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/filelock-1/PROC2.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`lockf
(
fd
,
F_TLOCK
,6);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/filelock-1/PROC3.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
loc_ªs
=
	`lockf
(
fd
,
F_ULOCK
,6);

13 
	`¥ötf
("Ñesu… o‡u∆ockög = %d\n",
loc_ªs
);

14 
	`gëch¨
();

15 
	}
}

	@Unix-Programming/filelock-1/PROC41.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
buf
[10];

9 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

10 
	`ªad
(
fd
,
buf
,6);

11 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

12 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

13 
	`gëch¨
();

14 
loc_ªs
=
	`lockf
(
fd
,
F_ULOCK
,6);

15 
	`¥ötf
("Ñesu… o‡u∆ockög = %d\n",
loc_ªs
);

16 
	`gëch¨
();

17 
	}
}

	@Unix-Programming/filelock-1/PROC42.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
loc_ªs
=
	`lockf
(
fd
,
F_ULOCK
,6);

13 
	`¥ötf
("Ñesu… o‡u∆ockög = %d\n",
loc_ªs
);

14 
	`gëch¨
();

15 
	}
}

	@Unix-Programming/filelock-1/PROC51.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
buf
[10];

9 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

10 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

11 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

12 
	`gëch¨
();

13 
loc_ªs
=
	`lockf
(
fd
,
F_ULOCK
,6);

14 
	`¥ötf
("Ñesu… o‡u∆ockög = %d\n",
loc_ªs
);

15 
	`gëch¨
();

16 
	}
}

	@Unix-Programming/filelock-1/PROC52.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
n
;

8 
buf
[10]={'a','a','a','a','a','a'};

9 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

10 
n
=
	`wrôe
(
fd
,
buf
,6);

11 
	`¥ötf
("Çÿo‡byã†wrôã¿%d\n",
n
);

12 
	`gëch¨
();

13 
	}
}

	@Unix-Programming/filelock-1/singlecopy.c

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	#FILENAME
 "sögÀc›y.pid"

	)

8 
	$maö
(){

9 
fd
,
loc_ªs
;

10 
pid_t
 
pid
;

11 
pid
 = 
	`gëpid
();

12 
fd
 = 
	`›í
(
FILENAME
,
O_RDWR
|
O_CREAT
);

13 
loc_ªs
=
	`Êock
(
fd
,
LOCK_EX
|
LOCK_NB
);

14 if(
loc_ªs
 !=0){

15 
	`¥ötf
(" Another Copy isÑunning \n");

16 
	`exô
(0);

19 
	`¥ötf
("Öerforming operations \n");

21 
	`˛o£
(
fd
);

22 
	}
}

	@Unix-Programming/io/part1/create.c

12 
	~<°dio.h
>

13 
	~<f˙é.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

18 
	$maö
()

20 
fd
;

21 
ch
;

22 
fd
 = 
	`¸ót
("Demo.txt",
S_IRWXU
|
S_IRWXG
);

23 
	`¥ötf
("\¿New FûêDe• : %d",
fd
);

24 
	`gëch¨
();

25 
	`˛o£
(
fd
);

26 
	}
}

	@Unix-Programming/io/part1/directio.c

10 
	#_GNU_SOURCE


	)

11 
	#SECTOR_SIZE
 512

	)

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<°dlib.h
>

16 
	~<°dio.h
>

17 
	~<mÆloc.h
>

18 
	~<°rög.h
>

20 
	$maö
 ()

22 *
buf
;

23 
fdö
, 
fdout
, 
r¸
, 
rcw
;

25 
size
 = 
	`gë∑gesize
 ();

28 
fdö
 = 
	`›í
("Ród.txt", 
O_RDONLY
);

31 
fdout
 = 
	`›í
 ("Wrôe.txt", 
O_DIRECT
 | 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

35 
	`posix_memÆign
 (&
buf
, 512, 
size
);

37 (
r¸
 = 
	`ªad
 (
fdö
, 
buf
, 
size
)) > 0) {

38 
rcw
 = 
	`wrôe
 (
fdout
, 
buf
, 
r¸
);

39 
	`¥ötf
 ("ö = %d, ouà%d\n", 
r¸
, 
rcw
);

40 i‡(
r¸
 !
rcw
)

41 
	`¥ötf
 ("BAD values --Çot sectorálignedÖerhaps\n");

43 
	`˛o£
 (
fdö
);

44 
	`˛o£
 (
fdout
);

45 
	`exô
 (0);

46 
	}
}

	@Unix-Programming/io/part1/exe/access.c

6 
	~<sys/ty≥s.h
>

7 
	~<f˙é.h
>

8 
	~<°dio.h
>

9 
	~<uni°d.h
>

11 
	$maö
(
¨gc
, *
¨gv
[])

13 
	`¥ötf
(" uid i†%d\n",
	`gëuid
());

14 
	`¥ötf
("Éuid i†%d\n",
	`gëeuid
());

15 i‡(
	`ac˚ss
(
¨gv
[1], 
F_OK
) < 0){

16 
	`¥ötf
(" file isÇotÉxisting \n");

17 
	`exô
(1);

19 
	`¥ötf
(" FileÉxists \n");

20 if–
	`ac˚ss
(
¨gv
[1],
R_OK
) <0)

21 
	`¥ötf
(" file cannot beÑead \n");

23 
	`¥ötf
(" File can beÑead \n");

24 if(
	`›í
(
¨gv
[1],
O_RDONLY
) >=0){

25 
	`¥ötf
(" file is opened \n");

28 
	}
}

	@Unix-Programming/io/part1/exe/app.c

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<sys/ty≥s.h
>

10 
	$maö
(){

11 
fd
;

12 
off_t
 
off£t
;

13 
fd
 = 
	`›í
("./√wfûe",
O_RDWR
|
O_CREAT
|
O_APPEND
);

14 if–
fd
 < 0){

15 
	`≥º‹
("file :");

16 
	`exô
(1);

18 
	`¥ötf
(" ..\n");

19 
	`wrôe
(
fd
,"one",3);

20 
	`¥ötf
(" ..\n");

21 
off£t
 = 
	`l£ek
(
fd
,0,
SEEK_CUR
);

22 
	`¥ötf
(" cuºíàfûêpoöã∏i†© %d\n",
off£t
);

23 
	`wrôe
(
fd
,"two",3);

24 
	`wrôe
(
fd
,"thr",3);

25 
	`wrôe
(
fd
,"fou",3);

26 
off£t
 = 
	`l£ek
(
fd
,0,
SEEK_CUR
);

27 
	`¥ötf
(" cuºíàfûêpoöã∏i†© %d\n",
off£t
);

28 
off£t
 = 
	`l£ek
(
fd
,-6,
SEEK_CUR
);

29 
	`¥ötf
(" cuºíàfûêpoöã∏i†© %d\n",
off£t
);

30 
	`wrôe
(
fd
,"fiv",3);

31 
	}
}

	@Unix-Programming/io/part1/exe/buftest.c

7 
	~<sys/ty≥s.h
>

8 
	~<sys/times.h
>

9 
	~<uni°d.h
>

10 
	~<f˙é.h
>

12 
	#BUF_SIZE
 2048

	)

14 
	$di•œy_time
(){

15 
tms
 
t
;

16 
	`times
(&
t
);

17 
	`¥ötf
(" U£∏Timê%d \n",
t
.
tms_utime
);

18 
	`¥ötf
(" Sy°em Timê%d \n",
t
.
tms_°ime
);

19 
	}
}

20 
	$maö
(){

21 
buf
[
BUF_SIZE
];

22 
ssize_t
 
cou¡
;

23 
fd
;

24 
fd
 = 
	`›í
("/boŸ/boŸ.b",
O_RDONLY
);

25 if–
fd
 < 0 ){

26 
	`≥º‹
(" File Open:");

27 
	`exô
(1);

30 
cou¡
 = 
	`ªad
(
fd
,
buf
,
BUF_SIZE
);

31 }
cou¡
 != 0);

32 
	`di•œy_time
();

33 
	}
}

	@Unix-Programming/io/part1/exe/cdpwd.c

7 
	~<uni°d.h
>

8 
	~<°dio.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<limôs.h
>

13 
	$maö
(
¨gc
 , * 
¨gv
[])

15 *
±r
;

16 
max∑thsize
;

17 
max∑thsize
 = 
	`∑thc⁄f
("/",
_PC_PATH_MAX
);

18 
±r
 = (*Ë
	`mÆloc
 (
max∑thsize
);

19 i‡(
	`gëcwd
(
±r
, 
max∑thsize
Ë=
NULL
){

20 
	`≥º‹
("prog:");

21 
	`exô
(1);

23 
	`¥ötf
("cwd = %s\n", 
±r
);

24 i‡(
	`chdú
(
¨gv
[1]) < 0){

25 
	`≥º‹
("prog:");

26 
	`exô
(1);

28 i‡(
	`gëcwd
(
±r
, 
max∑thsize
Ë=
NULL
){

29 
	`≥º‹
("prog:");

30 
	`exô
(1);

32 
	`¥ötf
("cwd = %s\n", 
±r
);

33 
	}
}

	@Unix-Programming/io/part1/exe/filetype.c

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 
	$maö
(
¨gc
, *
¨gv
[])

11 
i
;

12 
°©
 
buf
;

13 *
±r
;

14 if(
¨gc
 !=2){

15 
	`¥ötf
("Usage: ftype filename\n");

16 
	`exô
(2);

18 
	`¥ötf
("%s: ", 
¨gv
[1]);

19 i‡(
	`l°©
(
¨gv
[1], &
buf
) < 0) {

20 
	`≥º‹
("lstatfailed:");

21 
	`exô
(1);

24 if(
	`S_ISREG
(
buf
.
°_mode
))

25 
±r
 = "regular";

26 if(
	`S_ISDIR
(
buf
.
°_mode
))

27 
±r
 = "directory";

28 if(
	`S_ISCHR
(
buf
.
°_mode
)){

29 
±r
 = "character special";

30 
	`¥ötf
("Maj‹ = %d \n",
	`maj‹
(
buf
.
°_rdev
));

31 
	`¥ötf
("Mö‹ = %d \n",
	`mö‹
(
buf
.
°_rdev
));

33 if(
	`S_ISBLK
(
buf
.
°_mode
))

34 
±r
 = "block special";

35 if(
	`S_ISFIFO
(
buf
.
°_mode
))

36 
±r
 = "fifo";

37 if(
	`S_ISLNK
(
buf
.
°_mode
))

38 
±r
 = "symbolicÜink";

40 
±r
 = "** unknown mode **";

41 
	`¥ötf
("FûêTy≥ : %s\n", 
±r
);

42 
	`¥ötf
(" fûêow√∏%d \n", 
buf
.
°_uid
);

43 
	`¥ötf
(" fûêgrou∞%d \n", 
buf
.
°_gid
);

44 
	`¥ötf
(" fûêsizê%d \n", 
buf
.
°_size
);

45 
	`¥ötf
(" block sizê%d \n", 
buf
.
°_blksize
);

46 
	}
}

	@Unix-Programming/io/part1/exe/hole.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 
	~<f˙é.h
>

11 
	$maö
()

13 
fd
;

14 i‡–(
fd
 = 
	`›í
("fûewôhhﬁe",
O_WRONLY
|
O_CREAT
)) < 0){

15 
	`≥º‹
("File Open:");

16 
	`exô
(0);

18 
	`wrôe
(
fd
,"AAAAAAAAAA", 10);

19 
	`l£ek
(
fd
, 90, 
SEEK_SET
);

20 
	`¥ötf
(" fûêpoöã∏i†© %d\n",
	`l£ek
(
fd
,0,
SEEK_CUR
));

21 
	`wrôe
(
fd
,"ZZZZZZZZZZ",10);

22 
	`¥ötf
(" fûêpoöã∏i†© %d\n",
	`l£ek
(
fd
,0,
SEEK_CUR
));

23 
	}
}

	@Unix-Programming/io/part1/exe/mmap.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("ã°.fûe",
O_RDWR
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
|
PROT_WRITE
,\

18 
MAP_PRIVATE
,
fd
,0);

19 if(
fûed©a
 =
NULL
){

20 
	`≥º‹
("Maping Failed");

21 
	`exô
(1);

25 
ãmp
 = 
fûed©a
;

26 
i
=0;i<100;i++,
fûed©a
++)

27 
	`putch¨
(*
fûed©a
);

28 
i
 = 
	`munm≠
(
ãmp
,100);

29 if–
i
 != 0)

30 
	`¥ötf
(" failedÅo unmap\n");

31 
	}
}

	@Unix-Programming/io/part1/exe/mmap1.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/mm™.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

12 
	$maö
(){

13 
fd
,
i
;

14 *
fûed©a

NULL
,*
ãmp
;

15 
fd
 = 
	`›í
("./ã°.fûe",
O_RDWR
);

16 
fûed©a
 = (*Ë
	`mm≠
((*)0,125,
PROT_READ
|
PROT_WRITE
,\

17 
MAP_SHARED
,
fd
,0);

18 if(
fûed©a
 =
NULL
){

19 
	`≥º‹
("Maping Failed");

20 
	`exô
(1);

22 
ãmp
 = 
fûed©a
;

25 
i
=0;i<125;i++,
fûed©a
++)

26 *
fûed©a
 = 'A';

27 
fûed©a
 = 
ãmp
;

28 
i
=0;i<125;i++,
fûed©a
++)

29 
	`putch¨
(*
fûed©a
);

30 
i
=
	`msync
(
ãmp
,125,
MS_SYNC
);

31 if–
i
 == 0)

32 
	`¥ötf
(" file is successfully updated \n");

34 
	`¥ötf
("Öagêsizê%d\n",
	`gë∑gesize
());

35 
	}
}

	@Unix-Programming/io/part1/exe/mmap2.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("./ã°.fûe",
O_RDWR
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,125,
PROT_READ
|
PROT_WRITE
,\

18 
MAP_SHARED
,
fd
,0);

19 if(
fûed©a
 =
NULL
){

20 
	`≥º‹
("Maping Failed");

21 
	`exô
(1);

23 
ãmp
 = 
fûed©a
;

26 
i
=0;i<125;i++,
fûed©a
++)

27 
	`putch¨
(*
fûed©a
);

28 
	`¥ötf
(" fûêm≠≥dáà%x\n",
ãmp
);

29 
	`gëch¨
();

30 
	`gëch¨
();

31 
	`putch¨
(*
ãmp
);

32 
	`munm≠
(
ãmp
,125);

34 
	`¥ötf
("\náfter unmapping\n");

35 
	`gëch¨
();

36 
	`gëch¨
();

37 
	`putch¨
(*
ãmp
);

39 
	}
}

	@Unix-Programming/io/part1/exe/mmap3.c

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/mm™.h
>

11 
	~<f˙é.h
>

12 
	~<°dio.h
>

14 
	$maö
(){

15 
fd
,
i
;

16 *
fûed©a

NULL
,*
ãmp
;

17 
fd
 = 
	`›í
("ã°.fûe",
O_RDWR
);

18 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
|
PROT_WRITE
,\

19 
MAP_PRIVATE
,
fd
,0);

20 if(
fûed©a
 =
NULL
){

21 
	`≥º‹
("Maping Failed");

22 
	`exô
(1);

24 
	`˛o£
(
fd
);

27 
ãmp
 = 
fûed©a
;

28 
i
=0;i<100;i++,
fûed©a
++)

29 
	`putch¨
(*
fûed©a
);

30 
i
 = 
	`munm≠
(
ãmp
,100);

31 if–
i
 != 0)

32 
	`¥ötf
(" failedÅo unmap\n");

33 
	}
}

	@Unix-Programming/io/part1/exe/read.c

7 
	~<f˙é.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

11 
	$maö
()

13 
buf
[30];

14 
fd
;

17 if–(
fd
 = 
	`›í
("ªad.txt", 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
)) < 0)

19 
	`¥ötf
("\n openÅo fail");

20 
	`exô
(0);

23 
	`¥ötf
("\n Open sucessfully");

26 if–
	`wrôe
(
fd
,"IDST",4) != 4)

28 
	`¥ötf
("\n writeÉrror");

29 
	`exô
(0);

33 if–
	`l£ek
(
fd
,0,0) == -1)

35 
	`¥ötf
("\nÜseekÉrror");

36 
	`exô
(0);

39 if–
	`ªad
(
fd
,
buf
,4) < 0)

41 
	`¥ötf
("\nÑeadÉrror");

42 
	`exô
(0);

44 
	`¥ötf
("\¿Thêªad msg : %s", 
buf
);

45 
	`˛o£
(
fd
);

47 
	}
}

	@Unix-Programming/io/part1/exe/readfifo.c

10 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<f˙é.h
>

14 
	$maö
(){

15 
fd
,
i
;

16 
buf
[20];

17 
ssize_t
 
size
;

18 
fd
 = 
	`›í
("./myfifo",
O_RDONLY
);

19 if(
fd
 < 0){

20 
	`≥º‹
("Pipe Error :");

21 
	`exô
(1);

23 
size
 = 
	`ªad
(
fd
,
buf
,15);

24 
	`¥ötf
("Çÿo‡byã†ªad from FIFO = %d\n",
size
);

25 
i
=0;i<
size
;i++)

26 
	`¥ötf
("%c\n",
buf
[
i
]);

27 
	}
}

	@Unix-Programming/io/part1/exe/writefifo.c

10 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<f˙é.h
>

14 
	$maö
(){

15 
fd
;

16 
fd
 = 
	`›í
("./myfifo",
O_WRONLY
);

17 if(
fd
 < 0){

18 
	`≥º‹
("Pipe Error :");

19 
	`exô
(1);

21 
	`wrôe
(
fd
,"abc",3);

22 
	`wrôe
(
fd
,"abc",3);

23 
	`wrôe
(
fd
,"abc",3);

24 
	}
}

	@Unix-Programming/io/part1/lseek.c

18 
	~<°dio.h
>

19 
	~<f˙é.h
>

20 
	~<uni°d.h
>

23 
	mrﬁl
,
	mage
;

24 
	m«me
[30],
	mgídî
;

25 }
	t°udít
;

27 
	$maö
()

29 
°udít
 
s
;

30 
fd
;

31 
fd
 = 
	`›í
("Studít.d©",
O_RDONLY
);

32 
	`¥ötf
("\n Student Details\n");

33 
	`l£ek
(
fd
,0,
SEEK_SET
);

34 
	`ªad
(
fd
,&
s
,(s))!=0)

36 
	`¥ötf
("\n%5d %-20† %4d %1c",
s
.
rﬁl
,s.
«me
,s.
age
,s.
gídî
);

38 
	`¥ötf
("\n");

39 
	`˛o£
(
fd
);

40 
	}
}

	@Unix-Programming/io/part1/open.c

19 
	~<°dio.h
>

20 
	~<f˙é.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

24 
	$maö
()

26 
fd
;

27 
ch
;

28 
fd
 = 
	`›í
("Demo.txt",
O_WRONLY
|
O_CREAT
|
O_EXCL
,
S_IRWXU
|
S_IRWXG
);

29 
	`¥ötf
("\¿New FûêDe• : %d",
fd
);

30 
	`gëch¨
();

31 
	`˛o£
(
fd
);

32 
	}
}

	@Unix-Programming/io/part1/perror.c

7 
	~<f˙é.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<î∫o.h
>

12 
	$maö
()

14 
buf
[30];

15 
fd
;

18 if–(
fd
 = 
	`›í
("ªad1txt", 
O_RDWR
 )) < 0)

20 
	`≥º‹
("open ");

21 
	`exô
(1);

24 
	`¥ötf
("\n Open sucessfully");

27 if–
	`wrôe
(
fd
,"IDST",4) != 4)

29 
	`≥º‹
("\nwriteÉrror");

30 
	`exô
(1);

34 if–
	`l£ek
(
fd
,0,0) == -1)

36 
	`≥º‹
("\nÜseekÉrror");

37 
	`exô
(1);

40 if–
	`ªad
(
fd
,
buf
,4) < 0)

42 
	`≥º‹
("\nÑeadÉrror");

43 
	`exô
(1);

45 
	`¥ötf
("\¿Thêªad msg : %s", 
buf
);

46 
	`¥ötf
("\n");

47 
	`˛o£
(
fd
);

49 
	}
}

	@Unix-Programming/io/part1/read.c

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	$maö
()

16 
fd
;

17 
ch
;

18 
fd
 = 
	`›í
("Demo.txt",
O_RDONLY
);

19 
	`ªad
(
fd
,&
ch
,1)!=0)

20 
	`putch¨
(
ch
);

21 
	`˛o£
(
fd
);

22 
	`¥ötf
("\n");

23 
	}
}

	@Unix-Programming/io/part1/read1.c

11 
	~<°dio.h
>

12 
	~<f˙é.h
>

13 
	~<uni°d.h
>

16 
	mrﬁl
,
	mage
;

17 
	m«me
[30],
	mgídî
;

18 }
	t°udít
;

20 
	$maö
()

22 
°udít
 
s
;

23 
fd
;

24 
fd
 = 
	`›í
("Studít.d©",
O_RDONLY
);

25 
	`¥ötf
("\n Student Details\n");

26 
	`ªad
(
fd
,&
s
,(s))!=0)

28 
	`¥ötf
("\n%5d %-20† %4d %1c",
s
.
rﬁl
,s.
«me
,s.
age
,s.
gídî
);

30 
	`¥ötf
("\n");

31 
	`˛o£
(
fd
);

32 
	}
}

	@Unix-Programming/io/part1/read_ahead.c

11 
	~<f˙é.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

15 
	$maö
()

17 
buf
[30];

18 
fd
,
ªv
;

21 if–(
fd
 = 
	`›í
("ªad.txt", 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
)) < 0)

23 
	`¥ötf
("\n openÅo fail");

24 
	`exô
(0);

27 
	`¥ötf
("\n Open sucessfully");

32 
ªv
 = 
	`posix_Ádvi£
(
fd
, 0 , 20, 
POSIX_FADV_SEQUENTIAL
);

33 if(
ªv
!=0)

34 
	`≥º‹
("posix_fadvise : ");

39 if–
	`ªad
(
fd
,
buf
,1000) < 0)

41 
	`¥ötf
("\nÑeadÉrror");

42 
	`exô
(0);

44 
	`¥ötf
("\¿Thêªad msg : %s", 
buf
);

45 
	`˛o£
(
fd
);

47 
	}
}

	@Unix-Programming/io/part1/readv.c

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~<sys/uio.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<f˙é.h
>

16 
	#BUFFER_SIZE
 50

	)

17 
	#MAX
 3

	)

20 
	$p›uœã_iovec
(
iovec
 *iovec,*
±r
, 
size
){

21 
iovec
->
iov_ba£
 = 
±r
;

22 
iovec
->
iov_Àn
 = 
size
;

23 
	}
}

25 
	$maö
(){

27 
fd
,
rbyãs
;

28 
ªad_buf1
[
BUFFER_SIZE
];

29 
ªad_buf2
[
BUFFER_SIZE
];

30 
ªad_buf3
[
BUFFER_SIZE
];

31 
ªad_buf4
[
BUFFER_SIZE
];;

32 
iovec
 iovec[4];

36 
fd
 = 
	`›í
("Wrôe.txt", 
O_RDONLY
);

38 
	`p›uœã_iovec
(
iovec
,
ªad_buf1
,(read_buf1));

39 
	`p›uœã_iovec
(
iovec
+1,
ªad_buf2
,(read_buf2));

40 
	`p›uœã_iovec
(
iovec
+2,
ªad_buf3
,(read_buf3));

41 
	`p›uœã_iovec
(
iovec
+3,
ªad_buf4
,(read_buf4));

48 
rbyãs
 = 
	`ªadv
(
fd
, 
iovec
, 4);

49 
	`¥ötf
("\¿TŸÆÇumbî o‡byã†ªad from fûê: %d \n",
rbyãs
);

50 
	`¥ötf
(" %s",
ªad_buf1
);

51 
	`¥ötf
(" %s",
ªad_buf2
);

52 
	`¥ötf
(" %s",
ªad_buf3
);

53 
	`¥ötf
(" %s\n",
ªad_buf4
);

54 
	`˛o£
(
fd
);

56 
	}
}

	@Unix-Programming/io/part1/sync.c

19 
	~<°dio.h
>

20 
	~<f˙é.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

24 
	$maö
()

26 
fd
;

27 
ch
;

28 
fd
 = 
	`›í
("Demo.txt",
O_WRONLY
|
O_CREAT
|
O_EXCL
|
O_SYNC
,
S_IRWXU
|
S_IRWXG
);

29 
	`¥ötf
("\¿New FûêDe• : %d",
fd
);

30 
	`gëch¨
();

31 
	`˛o£
(
fd
);

32 
	}
}

	@Unix-Programming/io/part1/write.c

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

15 
	$maö
()

17 
fd
;

18 
ch
;

19 
fd
 = 
	`›í
("Demo.txt",
O_RDWR
|
O_CREAT
);

20 (
ch
=
	`gëch¨
())!=
EOF
)

21 
	`wrôe
(
fd
,&
ch
,1);

22 
	`˛o£
(
fd
);

23 
	}
}

	@Unix-Programming/io/part1/write1.c

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

16 
	mrﬁl
,
	mage
;

17 
	m«me
[30],
	mgídî
;

18 }
	t°udít
;

20 
	$maö
()

22 
ch
;

23 
°udít
 
s
;

24 
fd
;

25 
fd
 = 
	`›í
("Studít.d©",
O_RDWR
|
O_CREAT
);

26 
	`¥ötf
("\n Enter Student Details\n");

29 
	`¥ötf
("\n Enter Student Roll Number : ");

30 
	`sˇnf
("%d",&
s
.
rﬁl
);

31 
	`¥ötf
("\n Enter Student Name : ");

32 
	`sˇnf
(" %[^\n]",
s
.
«me
);

33 
	`¥ötf
("\n Enter Student Age : ");

34 
	`sˇnf
("%d",&
s
.
age
);

35 
	`¥ötf
("\n Enter Student Gender : ");

36 
	`sˇnf
(" %c",&
s
.
gídî
);

37 
	`¥ötf
("\n Continue.......(Y/N) : ");

38 
	`sˇnf
(" %c",&
ch
);

39 
	`wrôe
(
fd
,&
s
,(s));

40 if(
ch
=='n' ||ch=='N')

43 
	`˛o£
(
fd
);

44 
	}
}

	@Unix-Programming/io/part1/writev.c

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~<sys/uio.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<f˙é.h
>

16 
	#BUFFER_SIZE
 100

	)

17 
	#MAX
 3

	)

20 
	$p›uœã_iovec
(
iovec
 *iovec,*
±r
, 
size
){

21 
iovec
->
iov_ba£
 = 
±r
;

22 
iovec
->
iov_Àn
 = 
size
;

23 
	}
}

25 
	$maö
(){

27 
fd
,
wbyãs
;

28 
wrôe_buf1
[
BUFFER_SIZE
] = " The writve() function shall beÉquivalentÅo write(). ";

29 
wrôe_buf2
[
BUFFER_SIZE
] = " The writev() function writes iovcnt buffers of data described ";

30 
wrôe_buf3
[
BUFFER_SIZE
] = " by iovÅoÅhe fileássociated withÅhe ";

31 
wrôe_buf4
[
BUFFER_SIZE
] = " file descriptorfd.\n ";

32 
iovec
 iovec[4];

36 
fd
 = 
	`›í
("Wrôe.txt", 
O_CREAT
 | 
O_WRONLY
 ,0644);

38 
	`p›uœã_iovec
(
iovec
,
wrôe_buf1
,
	`°æí
(write_buf1));

39 
	`p›uœã_iovec
(
iovec
+1,
wrôe_buf2
,
	`°æí
(write_buf2));

40 
	`p›uœã_iovec
(
iovec
+2,
wrôe_buf3
,
	`°æí
(write_buf3));

41 
	`p›uœã_iovec
(
iovec
+3,
wrôe_buf4
,
	`°æí
(write_buf4));

46 
wbyãs
 = 
	`wrôev
(
fd
, 
iovec
, (iovec) / (iovec));

47 
	`¥ötf
("\¿TŸÆÇumbî o‡byã†wrôã¿ötòfûê: %d \n",
wbyãs
);

48 
	`˛o£
(
fd
);

50 
	}
}

	@Unix-Programming/io/part2/file_locking2/common.c

6 
	~<uni°d.h
>

7 
	~<sys/fûe.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~"comm⁄.h
"

22 
	$£tLock
(
fd
, 
ty≥
)

24 
ªtu∫_code
 = 0;

25 
Êock
 
lock
;

27 
lock
.
l_whí˚
 = 
SEEK_SET
;

28 
lock
.
l_°¨t
 = 0;

29 
lock
.
l_Àn
 = 1;

31 
lock
.
l_ty≥
 = 
ty≥
;

33 if((
	`f˙é
(
fd
,
F_SETLK
,&
lock
)) != 0)

35 
ªtu∫_code
 = 1;

37 
	`f˙é
(
fd
,
F_GETLK
,&
lock
);

38 if(
lock
.
l_ty≥
 !
F_UNLCK
)

40 
lock
.
l_ty≥
)

42 (
F_RDLCK
):

43 
	`¥ötf
("AÑódÜock i†Æªady së o¿th© fûêbyÅhê¥ogøm wôh PID %d.\n\n",
lock
.
l_pid
);

46 (
F_WRLCK
):

47 
	`¥ötf
("A wrôêlock i†Æªady së o¿th© fûêbyÅhê¥ogøm wôh PID %d.s\n\n",
lock
.
l_pid
);

53  
ªtu∫_code
;

54 
	}
}

	@Unix-Programming/io/part2/file_locking2/common.h

1 #i‚de‡
__comm⁄_h__


2 
	#__comm⁄_h__


	)

4 
	#fûe_«me
 "dummy_fûe.txt"

	)

6 
£tLock
(
fd
, 
ty≥
);

	@Unix-Programming/io/part2/file_locking2/locker.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<sys/fûe.h
>

10 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~"comm⁄.h
"

72 
	$maö
(
¨gc
, **
¨gv
)

74 
fd
;

77 
	`chmod
(
fûe_«me
,
S_ISGID
 | 
S_IRGRP
 | 
S_IWGRP
);

79 if((
fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0)

81 
	`≥º‹
("open");

82 
	`exô
(
EXIT_FAILURE
);

85 if(
	`£tLock
(
fd
,
F_RDLCK
) == 0)

87 
	`¥ötf
("ReadÜock is set. OpenánotherÅerminal windowándÑun\n");

88 
	`¥ötf
("non_locker. Don't hit ENTER inÅhisÅerminal window until\n");

89 
	`¥ötf
("non_lockerÅells youÅo do so.\n");

90 
	`gëch¨
();

94 
	`¥ötf
("UnableÅo setÑeadÜock. Program isÅerminating.\n");

95 
	`˛o£
(
fd
);

96 
	`exô
(
EXIT_FAILURE
);

99 if(
	`£tLock
(
fd
,
F_UNLCK
) == 0)

100 
	`¥ötf
("ReadÜock has beenÑeleased\n\n");

103 
	`¥ötf
("UnableÅoÑeleaseÑeadÜock. Program isÅerminating.\n");

104 
	`˛o£
(
fd
);

105 
	`exô
(
EXIT_FAILURE
);

108 if(
	`£tLock
(
fd
,
F_WRLCK
) == 0)

110 
	`¥ötf
("WriteÜock is set. SwitchÅoÅheÇon_lockerÅerminalánd hit ENTER.\n");

111 
	`gëch¨
();

115 
	`¥ötf
("UnableÅo set writeÜock. Program isÅerminating.\n");

116 
	`˛o£
(
fd
);

117 
	`exô
(
EXIT_FAILURE
);

120 if(
	`£tLock
(
fd
,
F_UNLCK
) == 0)

121 
	`¥ötf
("WriteÜock has beenÑeleased\n\n");

124 
	`¥ötf
("UnableÅoÑelease writeÜock. Program isÅerminating.\n");

125 
	`˛o£
(
fd
);

126 
	`exô
(
EXIT_FAILURE
);

129 
	`˛o£
(
fd
);

134  
EXIT_SUCCESS
;

135 
	}
}

	@Unix-Programming/io/part2/file_locking2/non_locker.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<sys/fûe.h
>

11 
	~<uni°d.h
>

12 
	~"comm⁄.h
"

71 
	#buf„r_size
 86

	)

73 
	$maö
(
¨gc
, **
¨gv
)

75 
fd
;

76 
buf„r
[
buf„r_size
];

81 if((
fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
)) < 0)

83 
	`≥º‹
("open");

84 
	`exô
(
EXIT_FAILURE
);

89 if(
	`£tLock
(
fd
,
F_RDLCK
) == 0)

91 
	`¥ötf
("ReadÜock has beenácquired,ásÉxpected.\n\nHit ENTER... ");

92 
	`gëch¨
();

96 
	`¥ötf
("UnableÅo setÑeadÜock. Program isÅerminating.\n");

97 
	`˛o£
(
fd
);

98 
	`exô
(
EXIT_FAILURE
);

103 if(
	`£tLock
(
fd
,
F_UNLCK
) == 0)

104 
	`¥ötf
("ReadÜock has beenÑeleased\n\n");

107 
	`¥ötf
("UnableÅoÑeleaseÑeadÜock. Program isÅerminating.\n");

108 
	`˛o£
(
fd
);

109 
	`exô
(
EXIT_FAILURE
);

114 if(
	`£tLock
(
fd
,
F_WRLCK
) == 0)

116 
	`¥ötf
("Acquiredá writeÜock--this shouldn't happen! Program isÅerminating.\n");

117 
	`£tLock
(
fd
,
F_UNLCK
);

118 
	`˛o£
(
fd
);

119 
	`exô
(
EXIT_FAILURE
);

122 
	`¥ötf
("FailedÅoácquireÅhe writeÜock,ásÉxpected.\n\n");

123 
	`¥ötf
("Go hit ENTER inÅheÜockerÅerminalÅoÜet it switchÅo\n");

124 
	`¥ötf
("a writeÜock,Åhen come back hereánd hit ENTER.\n");

125 
	`gëch¨
();

129 if(
	`£tLock
(
fd
,
F_RDLCK
) == 0)

131 
	`¥ötf
("AcquiredáÑeadÜock--this shouldn't happen! Program isÅerminating.\n");

132 
	`£tLock
(
fd
,
F_UNLCK
);

133 
	`˛o£
(
fd
);

134 
	`exô
(
EXIT_FAILURE
);

137 
	`¥ötf
("FailedÅoácquireÅhe writeÜock,ásÉxpected.\n\n");

138 
	`¥ötf
("Hit ENTERánd we'llÅryÅoÑeadÅhe file. This call should\n");

139 
	`¥ötf
("blockánd hangÅhisÖrogram untilÜockerÑeleases itsÜock\n");

140 
	`¥ötf
("onÅhe file. OnceÅhisÖrogram hangs, go hit ENTER inÅhe\n");

141 
	`¥ötf
("lockerÅerminal.\n");

142 
	`gëch¨
();

144 
	`¥ötf
("AttemptingÅoÑead file... \n\n");

145 if(
	`ªad
(
fd
,
buf„r
,
buf„r_size
) == buffer_size)

147 
	`¥ötf
("SuccessfullyÑead fromÅhe file.\n");

148 
buf„r
[
buf„r_size
 - 1] = '\0';

149 
	`¥ötf
("D©®ªad: \"%s\"\n",
buf„r
);

152 
	`¥ötf
("CouldÇotÑead fromÅhe file.\n");

154 
	`˛o£
(
fd
);

159  
EXIT_SUCCESS
;

160 
	}
}

	@Unix-Programming/io/part2/filelock-1/FLOCK1.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`Êock
(
fd
,
LOCK_SH
);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/io/part2/filelock-1/FLOCK2.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`Êock
(
fd
,
LOCK_EX
);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/io/part2/filelock-1/FLOCK3.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`Êock
(
fd
,
LOCK_EX
|
LOCK_NB
);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/io/part2/filelock-1/PROC1.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/io/part2/filelock-1/PROC2.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`lockf
(
fd
,
F_TLOCK
,6);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
	}
}

	@Unix-Programming/io/part2/filelock-1/PROC3.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
loc_ªs
=
	`lockf
(
fd
,
F_ULOCK
,6);

13 
	`¥ötf
("Ñesu… o‡u∆ockög = %d\n",
loc_ªs
);

14 
	`gëch¨
();

15 
	}
}

	@Unix-Programming/io/part2/filelock-1/PROC41.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
buf
[10];

9 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

10 
	`ªad
(
fd
,
buf
,6);

11 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

12 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

13 
	`gëch¨
();

14 
loc_ªs
=
	`lockf
(
fd
,
F_ULOCK
,6);

15 
	`¥ötf
("Ñesu… o‡u∆ockög = %d\n",
loc_ªs
);

16 
	`gëch¨
();

17 
	}
}

	@Unix-Programming/io/part2/filelock-1/PROC42.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

9 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

10 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

11 
	`gëch¨
();

12 
loc_ªs
=
	`lockf
(
fd
,
F_ULOCK
,6);

13 
	`¥ötf
("Ñesu… o‡u∆ockög = %d\n",
loc_ªs
);

14 
	`gëch¨
();

15 
	}
}

	@Unix-Programming/io/part2/filelock-1/PROC51.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
buf
[10];

9 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

10 
loc_ªs
=
	`lockf
(
fd
,
F_LOCK
,6);

11 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

12 
	`gëch¨
();

13 
loc_ªs
=
	`lockf
(
fd
,
F_ULOCK
,6);

14 
	`¥ötf
("Ñesu… o‡u∆ockög = %d\n",
loc_ªs
);

15 
	`gëch¨
();

16 
	}
}

	@Unix-Programming/io/part2/filelock-1/PROC52.C

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
n
;

8 
buf
[10]={'a','a','a','a','a','a'};

9 
fd
 = 
	`›í
("./fûe1",
O_RDWR
);

10 
n
=
	`wrôe
(
fd
,
buf
,6);

11 
	`¥ötf
("Çÿo‡byã†wrôã¿%d\n",
n
);

12 
	`gëch¨
();

13 
	}
}

	@Unix-Programming/io/part2/filelock-1/singlecopy.c

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	#FILENAME
 "sögÀc›y.pid"

	)

8 
	$maö
(){

9 
fd
,
loc_ªs
;

10 
pid_t
 
pid
;

11 
pid
 = 
	`gëpid
();

12 
fd
 = 
	`›í
(
FILENAME
,
O_RDWR
|
O_CREAT
);

13 
loc_ªs
=
	`Êock
(
fd
,
LOCK_EX
|
LOCK_NB
);

14 if(
loc_ªs
 !=0){

15 
	`¥ötf
(" Another Copy isÑunning \n");

16 
	`exô
(0);

19 
	`¥ötf
("Öerforming operations \n");

21 
	`˛o£
(
fd
);

22 
	}
}

	@Unix-Programming/io/part2/flock.c

1 
	~<f˙é.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~<sys/fûe.h
>

6 
	$maö
(){

7 
fd
,
loc_ªs
;

8 
Êock
 
lock
;

9 
fd
 = 
	`›í
("/medü/ã°.c",
O_RDWR
);

12 
lock
.
l_whí˚
 = 
SEEK_SET
;

13 
lock
.
l_°¨t
 = 0;

14 
lock
.
l_Àn
 = 100;

16 
lock
.
l_ty≥
 = 
F_RDLCK
;

18 if((
	`f˙é
(
fd
,
F_SETLK
,&
lock
)) != 0)

19 
	`≥º‹
("fcntl : ");

20 
	`¥ötf
("Ñesu… o‡lockög = %d\n",
loc_ªs
);

21 
	`gëch¨
();

22 
	}
}

	@Unix-Programming/io/part2/mmap.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

21 
	$maö
(){

22 
fd
,
i
;

23 *
fûed©a

NULL
,*
ãmp
;

24 
fd
 = 
	`›í
("ö°Æl.log",
O_RDWR
);

25 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
|
PROT_WRITE
,\

26 
MAP_PRIVATE
,
fd
,0);

27 if(
fûed©a
 =
NULL
){

28 
	`≥º‹
("Maping Failed");

29 
	`exô
(1);

33 *
fûed©a
='A';

34 
ãmp
 = 
fûed©a
;

35 
i
=0;i<100;i++,
fûed©a
++)

37 *
fûed©a
 = ()(
i
+65);

39 if(
	`msync
(
ãmp
,100,
MS_SYNC
)!=0)

40 
	`≥º‹
("msync : ");

42 
i
 = 
	`munm≠
(
ãmp
,100);

43 if–
i
 != 0)

44 
	`¥ötf
(" failedÅo unmap\n");

45 
	}
}

	@Unix-Programming/io/part3/mmap.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("ã°.fûe",
O_RDWR
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
|
PROT_WRITE
,\

18 
MAP_SHARED
,
fd
,0);

19 if(
fûed©a
 =
NULL
){

20 
	`≥º‹
("Maping Failed");

21 
	`exô
(1);

25 
ãmp
 = 
fûed©a
;

26 
i
=0;i<100;i++,
fûed©a
++)

28 *
fûed©a
 = ()(
i
+65);

29 
	`¥ötf
("\¿%c\n",()(
i
+65));

31 if(
	`msync
(
ãmp
,100,
MS_SYNC
)!=0)

32 
	`≥º‹
("msync : ");

34 
i
 = 
	`munm≠
(
ãmp
,100);

35 if–
i
 != 0)

36 
	`¥ötf
(" failedÅo unmap\n");

37 
	}
}

	@Unix-Programming/io/part3/mmap1.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("ã°.fûe",
O_RDWR
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
|
PROT_WRITE
,\

18 
MAP_PRIVATE
,
fd
,0);

19 if(
fûed©a
 =
NULL
){

20 
	`≥º‹
("Maping Failed");

21 
	`exô
(1);

25 
ãmp
 = 
fûed©a
;

26 
i
=0;i<100;i++,
fûed©a
++)

28 *
fûed©a
 = ()(
i
+65);

29 
	`¥ötf
("\¿%c\n",()(
i
+65));

31 if(
	`msync
(
ãmp
,100,
MS_SYNC
)!=0)

32 
	`≥º‹
("msync : ");

34 
i
 = 
	`munm≠
(
ãmp
,100);

35 if–
i
 != 0)

36 
	`¥ötf
(" failedÅo unmap\n");

37 
	}
}

	@Unix-Programming/io/part3/mmap2.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

12 
	~<î∫o.h
>

13 
	#_GNU_SOURCE


	)

15 
	$maö
(){

16 
fd
,
i
;

17 *
fûed©a

NULL
,*
ãmp
;

18 
fd
 = 
	`›í
("ö°Æl.log",
O_RDWR
);

19 
fûed©a
 = (*Ë
	`mm≠
((*)0,60,
PROT_READ
|
PROT_WRITE
,\

20 
MAP_SHARED
,
fd
,0);

21 if(
fûed©a
 =
NULL
){

22 
	`≥º‹
("Maping Failed");

23 
	`exô
(1);

27 
ãmp
 = 
fûed©a
;

28 
i
=0;i<60;i++,
fûed©a
++)

29 *
fûed©a
 = ()(
i
+65);

31 if(
	`mªm≠
((*)
ãmp
,60,70, 1)==
MAP_FAILED
)

32 
	`≥º‹
("mreamp : ");

33 
i
=1;i<=10;i++,
fûed©a
++)

34 *
fûed©a
 = '*';

35 if(
	`msync
(
ãmp
,70,
MS_SYNC
)!=0)

36 
	`≥º‹
("msync : ");

38 
i
 = 
	`munm≠
(
ãmp
,60);

39 if–
i
 != 0)

40 
	`¥ötf
(" failedÅo unmap\n");

41 
	}
}

	@Unix-Programming/io/part3/mmap3.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("ã°.fûe",
O_RDWR
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
|
PROT_WRITE
,\

18 
MAP_PRIVATE
,
fd
,0);

19 if(
fûed©a
 =
NULL
){

20 
	`≥º‹
("Maping Failed");

21 
	`exô
(1);

24 
ãmp
 = 
fûed©a
;

25 if(
	`madvi£
(
ãmp
, 100, 
MADV_SEQUENTIAL
))

26 
	`≥º‹
("madvise : ");

31 
i
=0;i<100;i++,
fûed©a
++)

32 *
fûed©a
 = ()(
i
+65);

34 if(
	`msync
(
ãmp
,100,
MS_SYNC
)!=0)

35 
	`≥º‹
("msync : ");

37 
i
 = 
	`munm≠
(
ãmp
,100);

38 if–
i
 != 0)

39 
	`¥ötf
(" failedÅo unmap\n");

40 
	}
}

	@Unix-Programming/io/part3/mmap4.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("ã°.fûe",
O_RDWR
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
,\

18 
MAP_SHARED
,
fd
,0);

19 if(
fûed©a
 =
NULL
){

20 
	`≥º‹
("Maping Failed");

21 
	`exô
(1);

25 
ãmp
 = 
fûed©a
;

27 
i
=0;i<100;i++,
fûed©a
++)

28 
	`¥ötf
("%c",*
fûed©a
);

30 
	`m¥Ÿe˘
(
ãmp
, 100, 
PROT_WRITE
);

31 
fûed©a
-=100;

32 
i
=0;i<100;i++,
fûed©a
++)

33 *
fûed©a
 = ()(
i
+65);

34 if(
	`msync
(
ãmp
,100,
MS_SYNC
)!=0)

35 
	`≥º‹
("msync : ");

37 
i
 = 
	`munm≠
(
ãmp
,100);

38 if–
i
 != 0)

39 
	`¥ötf
(" failedÅo unmap\n");

40 
	}
}

	@Unix-Programming/io/part3/mmap5.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

17 
	`gëch¨
();

18 
fûed©a
 = (*Ë
	`mm≠
((*)0,100,
PROT_READ
|
PROT_WRITE
,\

19 
MAP_ANONYMOUS
|
MAP_SHARED
,-1,0);

20 
	`gëch¨
();

21 if(
fûed©a
 =
NULL
){

22 
	`≥º‹
("Maping Failed");

23 
	`exô
(1);

27 
ãmp
 = 
fûed©a
;

28 
i
=0;i<100;i++,
fûed©a
++)

29 *
fûed©a
 = ()(
i
+65);

30 
fûed©a
-=100;

31 
i
=0;i<100;i++,
fûed©a
++)

32 
	`¥ötf
("%c",*
fûed©a
 );

34 
i
 = 
	`munm≠
(
ãmp
,100);

35 
	`gëch¨
();

36 if–
i
 != 0)

37 
	`¥ötf
(" failedÅo unmap\n");

38 
	}
}

	@Unix-Programming/io/part3/write.c

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

15 
	$maö
()

17 
fd
,
i
=1;

18 
ch
='A';

19 
fd
 = 
	`›í
("Demo.txt",
O_RDWR
|
O_CREAT
);

20 
i
++<=4096)

21 
	`wrôe
(
fd
,&
ch
,1);

22 
	`˛o£
(
fd
);

23 
	}
}

	@Unix-Programming/io/part4/aio_read_write.c

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	~<aio.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<î∫o.h
>

16 
	#BUFFER_SIZE
 100

	)

17 
	#MAX
 3

	)

20 
	$p›uœã_aiocb
(
aiocb
 *
aio
, 
fd
, 
off_t
 
off£t
, 
byãs
, *
buf
){

21 
aio
->
aio_fûdes
 = 
fd
;

22 
aio
->
aio_off£t
 = 
off£t
;

23 
aio
->
aio_nbyãs
 = 
byãs
;

24 
aio
->
aio_buf
 = 
buf
;

25 
	}
}

27 
	$maö
(){

29 
aiocb
 
a_wrôe
, 
a_ªad
;

30 
aiocb
 *
cbli°
[
MAX
];

31 
îr_r
, 
îr_w
;

32 
ªad_n
 = 0;

33 
fd
;

34 
ªad_buf
[
BUFFER_SIZE
];

35 
wrôe_buf
[
BUFFER_SIZE
];

38 
fd
 = 
	`›í
("Temp.txt", 
O_CREAT
 | 
O_RDWR
, 0644);

43 
	`mem£t
(&
a_wrôe
, 0 , (
aiocb
));

44 
	`mem£t
(&
a_ªad
, 0 , (
aiocb
));

48 
	`p›uœã_aiocb
(&
a_ªad
, 
fd
, 0, 
BUFFER_SIZE
-1, 
ªad_buf
);

49 
	`p›uœã_aiocb
(&
a_wrôe
, 
fd
, 0, 
BUFFER_SIZE
-1, 
wrôe_buf
);

56 
	`¥ötf
("\n Enter Data for writing intoÅhe file\n");

59 
	`sˇnf
("%100s",
wrôe_buf
);

60 if(
	`°rcmp
(
wrôe_buf
,"EOF")==0)

62 
	`aio_wrôe
(&
a_wrôe
);

68 if(
îr_r
 = 
	`aio_îr‹
(&
a_wrôe
Ë=
EINPROGRESS
){

74 
cbli°
[0] = &
a_wrôe
;

79 
	`aio_su•íd
(
cbli°
, 1, 
NULL
);

82 
a_wrôe
.
aio_off£t
 +
	`aio_ªtu∫
(&a_write);

85 
	`l£ek
(
fd
,0,
SEEK_SET
);

87 
	`¥ötf
("\n Data in Temp.txt file\n");

90 
	`aio_ªad
(&
a_ªad
);

92 if(
îr_r
 = 
	`aio_îr‹
(&
a_ªad
Ë=
EINPROGRESS
){

93 
cbli°
[0] = &
a_ªad
;

94 
	`aio_su•íd
(
cbli°
, 1, 
NULL
);

96 
ªad_n
 = 
	`aio_ªtu∫
(&
a_ªad
);

97 
	`¥ötf
("\¿%†",
ªad_buf
);

98 if(
ªad_n
!=
BUFFER_SIZE
-1)

103 
a_ªad
.
aio_off£t
 +
ªad_n
;

106 
	`˛o£
(
fd
);

108 
	}
}

	@Unix-Programming/io/part4/aio_read_write_list.c

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<uni°d.h
>

8 
	~<aio.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<î∫o.h
>

12 
	#BUFFER_SIZE
 100

	)

13 
	#MAX
 3

	)

16 
	$p›uœã_aiocb
(
aiocb
 *
aio
, 
fd
, 
off_t
 
off£t
, 
byãs
, *
buf
,
›code
){

17 
aio
->
aio_fûdes
 = 
fd
;

18 
aio
->
aio_off£t
 = 
off£t
;

19 
aio
->
aio_nbyãs
 = 
byãs
;

20 
aio
->
aio_buf
 = 
buf
;

24 
aio
->
aio_lio_›code
 = 
›code
;

25 
	}
}

27 
	$maö
(){

29 
aiocb
 
a_wrôe
, 
a_ªad
;

30 
aiocb
 *
cbli°
[
MAX
];

31 
îr_r
, 
îr_w
;

32 
ªad_n
 = 0;

33 
ªad_fd
,
wrôe_fd
;

34 
ªad_buf
[
BUFFER_SIZE
];

35 
wrôe_buf
[
BUFFER_SIZE
];

38 
ªad_fd
 = 
	`›í
("Ród.txt", 
O_RDONLY
);

41 
wrôe_fd
 = 
	`›í
("Wrôe.txt", 
O_CREAT
 | 
O_WRONLY
, 0644);

46 
	`mem£t
(&
a_wrôe
, 0 , (
aiocb
));

47 
	`mem£t
(&
a_ªad
, 0 , (
aiocb
));

51 
	`p›uœã_aiocb
(&
a_ªad
, 
ªad_fd
, 0, 
BUFFER_SIZE
-1, 
ªad_buf
,
LIO_READ
);

52 
	`p›uœã_aiocb
(&
a_wrôe
, 
wrôe_fd
, 0, 
BUFFER_SIZE
-1, 
wrôe_buf
,
LIO_WRITE
);

59 
cbli°
[0] = &
a_ªad
;

60 
cbli°
[1] = &
a_wrôe
;

65 
	`lio_li°io
(
LIO_NOWAIT
, 
cbli°
, 2, 
NULL
);

72 if((
îr_r
 = 
	`aio_îr‹
(&
a_ªad
)Ë=
EINPROGRESS
 || (
îr_w
 =áio_îr‹(&
a_wrôe
)) == EINPROGRESS){

73 
cbli°
[0] = &
a_ªad
;

74 
cbli°
[1] = &
a_wrôe
;

75 
	`aio_su•íd
(
cbli°
, 2, 
NULL
);

81 
ªad_n
 = 
	`aio_ªtu∫
(&
a_ªad
);

83 
	`°r˝y
(
wrôe_buf
,
ªad_buf
);

88 
a_wrôe
.
aio_nbyãs
 = 
ªad_n
;

89 
	`aio_wrôe
(&
a_wrôe
);

91 if(
ªad_n
!=
BUFFER_SIZE
-1)

96 
a_ªad
.
aio_off£t
 +
ªad_n
;

97 
a_wrôe
.
aio_off£t
 +
	`aio_ªtu∫
(&a_write);

100 
	`˛o£
(
ªad_fd
);

101 
	`˛o£
(
wrôe_fd
);

103 
	}
}

	@Unix-Programming/io/part4/multi1.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<f˙é.h
>

12 
	$maö
(){

13 
fd1
,
fd2
;

14 
buf
[10];

15 
n
;

16 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

17 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

18 
	`¥ötf
(" TryingÅoÑead fromÖone\n");

19 
n
 = 
	`ªad
 (
fd1
,
buf
,10);

20 
	`¥ötf
("Ñód %dÇÿo‡byã†‰omÖ⁄ê\n",
n
);

21 
	`¥ötf
(" TryingÅoÑead fromÖtwo\n");

22 
n
 = 
	`ªad
 (
fd2
,
buf
,10);

23 
	`¥ötf
("Ñód %dÇÿo‡byã†‰omÖtwÿ\n",
n
);

24 
	}
}

	@Unix-Programming/io/part4/multi2.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/time.h
>

11 
	~<f˙é.h
>

13 
	$maö
(){

14 
fd1
,
fd2
;

15 
fd_£t
 
ªad_£t
,
wrôe_£t
,
ex˚±_£t
;

16 
buf
[10];

17 
timevÆ
 
timeout
;

18 
n
;

19 
timeout
.
tv_£c
 = 90;

20 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

21 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

22 
	`FD_ZERO
(&
ªad_£t
);

25 
	`FD_SET
(
fd1
,&
ªad_£t
);

26 
	`FD_SET
(
fd2
,&
ªad_£t
);

27 
n
 = 
	`£À˘
(
FD_SETSIZE
,&
ªad_£t
,
NULL
,NULL,&
timeout
);

28 i‡(
n
 <0 ){

29 
	`≥º‹
("select ");

30 
	`exô
(1);

32 
	`¥ötf
("Çÿo‡des¸ùt‹Ñódy = %d\n",
n
);

33 
	}
}

	@Unix-Programming/io/part4/multi3.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/time.h
>

10 
	~<f˙é.h
>

12 
	$maö
(){

13 
fd1
,
fd2
;

14 
fd_£t
 
ªad_£t
,
wrôe_£t
,
ex˚±_£t
;

15 
buf
[10];

16 
timevÆ
 
timeout
;

17 
n
;

18 
timeout
.
tv_£c
 = 90;

19 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

20 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

21 
	`FD_ZERO
(&
ªad_£t
);

22 
	`FD_SET
(
fd1
,&
ªad_£t
);

23 
	`FD_SET
(
fd2
,&
ªad_£t
);

24 
n
 = 
	`£À˘
(
FD_SETSIZE
,&
ªad_£t
,
NULL
,NULL,&
timeout
);

25 i‡(
n
 <0 ){

26 
	`≥º‹
("select ");

27 
	`exô
(1);

30 if–
	`FD_ISSET
(
fd1
,&
ªad_£t
)){

31 
	`¥ötf
("Ñeading from fd1 (pone)\n");

32 
n
 = 
	`ªad
(
fd1
,
buf
,10);

33 
	`¥ötf
("Ñód %d fromÖ⁄ê\n",
n
);

36 if–
	`FD_ISSET
(
fd2
,&
ªad_£t
)){

37 
	`¥ötf
("Ñeading from fd2 (ptwo)\n");

38 
n
 = 
	`ªad
(
fd2
,
buf
,10);

39 
	`¥ötf
("Ñód %d fromÖtwÿ\n",
n
);

41 
	}
}

	@Unix-Programming/io/part4/multi4.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/time.h
>

11 
	~<f˙é.h
>

13 
	$maö
(){

14 
fd1
,
fd2
;

15 
fd_£t
 
ªad_£t
,
wrôe_£t
,
ex˚±_£t
;

16 
buf
[10];

17 
timevÆ
 
timeout
;

18 
n
;

19 
timeout
.
tv_£c
 = 90;

20 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

21 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

23 
	`FD_ZERO
(&
ªad_£t
);

24 
	`FD_SET
(
fd1
,&
ªad_£t
);

25 
	`FD_SET
(
fd2
,&
ªad_£t
);

26 
n
 = 
	`£À˘
(
FD_SETSIZE
,&
ªad_£t
,
NULL
,NULL,&
timeout
);

27 i‡(
n
 <0 ){

28 
	`≥º‹
("select ");

29 
	`exô
(1);

32 if–
	`FD_ISSET
(
fd1
,&
ªad_£t
)){

33 
	`¥ötf
("Ñeading from fd1 (pone)\n");

34 
n
 = 
	`ªad
(
fd1
,
buf
,10);

35 
	`¥ötf
("Ñód %d fromÖ⁄ê\n",
n
);

38 if–
	`FD_ISSET
(
fd2
,&
ªad_£t
)){

39 
	`¥ötf
("Ñeading from fd2 (ptwo)\n");

40 
n
 = 
	`ªad
(
fd2
,
buf
,10);

41 
	`¥ötf
("Ñód %d fromÖtwÿ\n",
n
);

44 
	}
}

	@Unix-Programming/io/part4/poll1.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<pﬁl.h
>

11 
	~<°r›ts.h
>

12 
	~<f˙é.h
>

14 
	$maö
(){

15 
fd1
,
fd2
;

16 
pﬁlfd
 
pﬁœºay
[10];

17 
buf
[10];

18 
n
;

19 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

20 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

21 
pﬁœºay
[0].
fd
 = 
fd1
;

22 
pﬁœºay
[1].
fd
 = 
fd2
;

23 
pﬁœºay
[0].
evíts
 = 
POLLIN
 ;

24 
pﬁœºay
[1].
evíts
 = 
POLLIN
 ;

25 
n
 = 
	`pﬁl
(
pﬁœºay
,2,90000);

26 i‡(
n
 <0 ){

27 
	`≥º‹
("poll:");

28 
	`exô
(1);

30 
	`¥ötf
("fd1Ñevíà%d\n",
pﬁœºay
[0].
ªvíts
);

31 
	`¥ötf
("fd2Ñevíà%d\n",
pﬁœºay
[1].
ªvíts
);

32 
	`¥ötf
("POLLIN %d\n",
POLLIN
);

33 
	`¥ötf
("POLLOUT %d\n",
POLLOUT
);

34 
	`¥ötf
(".. %d\n",(
pﬁœºay
[0].
ªvíts
 & 
POLLIN
));

35 
	`¥ötf
(".. %d\n",(
pﬁœºay
[1].
ªvíts
 & 
POLLIN
));

36 
	}
}

	@Unix-Programming/io/part4/poll2.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<pﬁl.h
>

11 
	~<°r›ts.h
>

12 
	~<f˙é.h
>

14 
	$maö
(){

15 
fd1
,
fd2
;

16 
pﬁlfd
 
pﬁœºay
[10];

17 
buf
[10];

18 
n
;

19 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

20 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

21 
pﬁœºay
[0].
fd
 = 
fd1
;

22 
pﬁœºay
[1].
fd
 = 
fd2
;

23 
pﬁœºay
[0].
evíts
 = 
POLLIN
 ;

24 
pﬁœºay
[1].
evíts
 = 
POLLIN
 ;

25 
n
 = 
	`pﬁl
(
pﬁœºay
,2,90000);

26 i‡(
n
 <0 ){

27 
	`≥º‹
("poll:");

28 
	`exô
(1);

31 if((
pﬁœºay
[0].
ªvíts
 & 
POLLIN
) == 1 ){

32 
	`¥ötf
("Ñeading from fd1 (pone)\n");

33 
n
 = 
	`ªad
(
fd1
,
buf
,10);

34 
	`¥ötf
("Ñód %d fromÖ⁄ê\n",
n
);

37 if((
pﬁœºay
[1].
ªvíts
 & 
POLLIN
) == 1 ){

38 
	`¥ötf
("Ñeading from fd2 (ptwo)\n");

39 
n
 = 
	`ªad
(
fd2
,
buf
,10);

40 
	`¥ötf
("Ñód %d fromÖtwÿ\n",
n
);

42 
	}
}

	@Unix-Programming/io/part4/splice.c

11 
	#_GNU_SOURCE


	)

12 
	~<f˙é.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<as£π.h
>

17 
	~<î∫o.h
>

18 
	~<limôs.h
>

20 
	#LEN
 100

	)

22 
	$maö
()

24 
fd_r
,
fd_w
,
mypùe
[2];

25 
pid_t
 
Cpid
;

26 
Àn
, 
¶í
;

29 
	`pùe
(
mypùe
);

32 
Cpid
 = 
	`f‹k
();

34 if(
Cpid
 == 0)

37 
	`˛o£
(
mypùe
[0]);

38 
fd_r
 = 
	`›í
("ªad.txt", 
O_RDONLY
);

42 
Àn
 = 
	`•li˚
(
fd_r
,
NULL
,
mypùe
[1],NULL,
LEN
,
SPLICE_F_MOVE
);

43 if(
Àn
==0)

50 
	`˛o£
(
mypùe
[1]);

51 
fd_w
 = 
	`›í
("wrôe.txt",
O_WRONLY
 | 
O_CREAT
 , 0644);

56 
Àn
 = 
	`•li˚
(
mypùe
[0],
NULL
,
fd_w
,NULL,
LEN
,
SPLICE_F_MOVE
);

57 
	`¥ötf
(" %d \n",
Àn
);

58 if(
Àn
==0)

63 
	}
}

	@Unix-Programming/ioperm/rtc.c

7 
	~<uni°d.h
>

8 
	~<sys/io.h
>

10 
	$maö
(){

12 
ªs
,
a
,
b
;

13 
ªs
=
	`i›îm
(0x70,0x04,1);

14 
	`¥ötf
("ª†=%d \n",
ªs
);

17 
	`outb
(9,0x70);

18 
	`¥ötf
(" yór%x \n",
	`öb
(0x71));

20 
	`outb
(8,0x70);

21 
	`¥ötf
(" m⁄th = %x \n",
	`öb
(0x71));

23 
	`outb
(7,0x70);

24 
	`¥ötf
(" day = %x \n",
	`öb
(0x71));

25 
	}
}

	@Unix-Programming/ioperm/rtc1.c

7 
	~<uni°d.h
>

8 
	~<sys/io.h
>

11 
	$£tvÆ
(
wh©
,
vÆ
){

12 
	`outb
(
wh©
,0x70);

13 
	`outb
(
vÆ
,0x71);

14 
	}
}

15 
	$maö
(){

17 
ªs
,
a
,
b
;

18 
ªs
=
	`i›îm
(0x70,0x04,1);

19 
	`¥ötf
("ª†=%d \n",
ªs
);

20 
	`£tvÆ
(9,0x05);

21 
	`¥ötf
(" yó∏%x \n",
	`öb
(0x71));

22 
	`£tvÆ
(8,0x09);

23 
	`outb
(8,0x70);

24 
	`¥ötf
(" m⁄th = %x \n",
	`öb
(0x71));

25 
	}
}

	@Unix-Programming/ioperm/rtc2.c

7 
	~<uni°d.h
>

8 
	~<sys/io.h
>

11 
	$gëvÆ
(
wh©
){

12 
	`outb
(
wh©
,0x70);

13  (
	`öb
(0x71));

14 
	}
}

15 
	$maö
(){

17 
ªs
,
a
,
b
;

18 
ªs
=
	`i›îm
(0x70,0x04,1);

19 
	`¥ötf
("ª†=%d \n",
ªs
);

20 
	`¥ötf
(" yór%x \n",
	`gëvÆ
(9));

21 
	`¥ötf
(" m⁄th = %x \n",
	`gëvÆ
(8));

22 
	`¥ötf
(" day = %x \n",
	`gëvÆ
(7));

23 
	`¥ötf
(" hour†%x \n",
	`gëvÆ
(4));

24 
	`¥ötf
(" möuã†%x \n",
	`gëvÆ
(2));

25 
	`¥ötf
(" sec⁄d†%x \n",
	`gëvÆ
(0));

26 
	}
}

	@Unix-Programming/ioperm/spek.c

6 
	~<uni°d.h
>

7 
	~<sys/io.h
>

9 
	#TIMER_FREQ
 1193180

	)

10 
	$∑u£
(){

11 
i
;

12 
i
=0;i<9999;i++);

13 
	}
}

14 
	$l⁄g_∑u£
(){

15 
i
;

16 
a
=22.2,
b
=334.4,
c
=98.0;

17 
i
=0;i<99999999;i++)

18 
a
=
b
*
c
/a;

19 
	}
}

20 
	$maö
(){

22 
ªs
,
c⁄s
,
i
;

23 
ªs
=
	`i›îm
(0x40,0x40,1);

24 
	`¥ötf
("Ñe†o‡i›îm = %d\n",
ªs
);

25 
i
=1;i<10;i++){

26 
c⁄s
 = (
TIMER_FREQ
)/(
i
*22);

27 
	`outb
(
	`öb
(0x61)|3,0x61);

28 
	`outb
(0xb6,0x43);

29 
	`outb
(
c⁄s
 &0xff,0x42);

30 
	`outb
((
c⁄s
>>8) &0xff,0x42);

31 
	`l⁄g_∑u£
();

32 
	`outb
(
	`öb
(0x63)&0xfc,0x61);

35 
	}
}

	@Unix-Programming/ipc/MSGQ/ftok.c

7 
	~<sys/ty≥s.h
>

8 
	~<sys/ùc.h
>

10 
	$maö
(){

11 
key_t
 
key
;

12 
key
 = 
	`·ok
("/var/run/inetsolv",1);

13 
	`¥ötf
(" key = %d\n",
key
);

14 
key
 = 
	`·ok
("/var/run/inetsolv",1);

15 
	`¥ötf
(" key = %d\n",
key
);

16 
key
 = 
	`·ok
("/var/run/inetsolv",2);

17 
	`¥ötf
(" key = %d\n",
key
);

18 
	}
}

	@Unix-Programming/ipc/MSGQ/msgq1.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/ùc.h
>

10 
	~<sys/msg.h
>

12 
	#KEY
 8979

	)

14 
	$maö
(){

15 
qid
;

16 
qid
 = 
	`msggë
(
KEY
,
IPC_CREAT
);

17 
	`¥ötf
(" qid = %d\n", 
qid
);

18 
	`gëch¨
();

19 
	`msg˘l
(
qid
,
IPC_RMID
,
NULL
);

20 
	}
}

	@Unix-Programming/ipc/MSGQ/msgq21.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/ùc.h
>

10 
	~<sys/msg.h
>

12 
	#KEY
 8979

	)

15 
	mmsgty≥
;

16 
	mbuf„r
[100];

17 }
	tmsg
;

18 
	$maö
(){

19 
qid
;

20 
i
;

21 
msg
 
m1
,
m2
;

22 
qid
 = 
	`msggë
(
KEY
,
IPC_CREAT
);

23 
m1
.
msgty≥
=10;

24 
i
=0;i<100;i++)

25 
m1
.
buf„r
[
i
]='a';

26 
m2
.
msgty≥
=20;

27 
i
=0;i<100;i++)

28 
m2
.
buf„r
[
i
]='b';

29 
i
 = 
	`msg¢d
(
qid
,&
m1
,(
msg
),
IPC_NOWAIT
);

30 
	`¥ötf
("Ñëu∫ vÆuêo‡msg¢d o‡As%d\n",
i
);

31 
i
 = 
	`msg¢d
(
qid
,&
m2
,(
msg
),
IPC_NOWAIT
);

32 
	`¥ötf
("Ñëu∫ vÆuêo‡msg¢d o‡Bs%d\n",
i
);

33 
	}
}

	@Unix-Programming/ipc/MSGQ/msgq22.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/ùc.h
>

10 
	~<sys/msg.h
>

12 
	#KEY
 8979

	)

15 
	mmsgty≥
;

16 
	mbuf„r
[100];

17 }
	tmsg
;

18 
	$maö
(){

19 
qid
;

20 
i
;

21 
msg
 
m1
,
m2
;

22 
qid
 = 
	`msggë
(
KEY
,
IPC_CREAT
);

23 
i
 = 
	`msgrcv
(
qid
,&
m1
,(
msg
),10,0);

24 
i
=0;i<100;i++)

25 
	`¥ötf
("%c",
m1
.
buf„r
[
i
]);

26 
	`¥ötf
("\n");

27 
i
 = 
	`msgrcv
(
qid
,&
m2
,(
msg
),20,0);

28 
i
=0;i<100;i++)

29 
	`¥ötf
("%c",
m2
.
buf„r
[
i
]);

30 
	`¥ötf
("\n");

31 
	}
}

	@Unix-Programming/ipc/MSGQ/msgq23.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/ùc.h
>

10 
	~<sys/msg.h
>

12 
	#KEY
 8979

	)

15 
	mmsgty≥
;

16 
	mbuf„r
[100];

17 }
	tmsg
;

18 
	$maö
(){

19 
qid
;

20 
i
;

21 
msg
 
m1
,
m2
;

22 
qid
 = 
	`msggë
(
KEY
,
IPC_CREAT
);

23 
i
 = 
	`msgrcv
(
qid
,&
m2
,(
msg
),20,
IPC_NOWAIT
);

24 i‡(
i
 == 0)

25 
i
=0;i<100;i++)

26 
	`¥ötf
("%c",
m2
.
buf„r
[
i
]);

27 
	`¥ötf
("\n");

28 
i
 = 
	`msgrcv
(
qid
,&
m1
,(
msg
),10,0);

30 
i
=0;i<100;i++)

31 
	`¥ötf
("%c",
m1
.
buf„r
[
i
]);

32 
	`¥ötf
("\n");

33 
	}
}

	@Unix-Programming/ipc/MSGQ/msgq3.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/ùc.h
>

10 
	~<sys/msg.h
>

12 
	#KEY
 8979

	)

14 
	$maö
(){

15 
qid
;

16 
msqid_ds
 
buf
;

17 
qid
 = 
	`msggë
(
KEY
,
IPC_CREAT
);

18 
	`¥ötf
(" qid = %d\n", 
qid
);

19 
	`msg˘l
(
qid
,
IPC_STAT
,&
buf
);

20 
	`¥ötf
(" HereáreÅhe details ofÅhe queue\n");

21 
	`¥ötf
("nÿo‡msg'†ö q %d\n",
buf
.
msg_qnum
);

22 
	`¥ötf
("nÿo‡byã†ö q %d\n",
buf
.
msg_cbyãs
);

23 
	`¥ötf
("maxÇÿo‡byã†ö q %d\n",
buf
.
msg_qbyãs
);

24 
	}
}

	@Unix-Programming/ipc/PIPES/pipe1.c

6 
	~<uni°d.h
>

8 
	$maö
(){

9 
fds
[2];

10 
ªs
,
i
;

11 *
buf1
="aaaaaaaaaaaaaaaaaaaa";

12 *
buf
="bbbbbbbbbbbbbbbbbbbb";

13 
buf2
[10];

14 
ªs
 = 
	`pùe
(
fds
);

16 if–
ªs
 == -1 ){

17 
	`≥º‹
("pipe");

18 
	`exô
(1);

20 
	`wrôe
(
fds
[1],
buf1
,20);

21 
	`wrôe
(
fds
[1],
buf
,20);

22 
	`ªad
(
fds
[0],
buf2
,10);

23 
i
=0;i<10;i++)

24 
	`¥ötf
("%c",
buf2
[
i
]);

25 
	`¥ötf
("\n");

26 
	}
}

	@Unix-Programming/ipc/PIPES/pipe2.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

10 
	gfds
[2];

15 
	$∑ª¡_code
(){

16 *
buf1
="aaaaaaaaaaaaaaaaaaaa";

17 *
buf
="bbbbbbbbbbbbbbbbbbbb";

18 
	`˛o£
(
fds
[0]);

19 
	`wrôe
(
fds
[1],
buf
,20);

20 
	`wrôe
(
fds
[1],
buf1
,20);

21 
	`¥ötf
("Énd ofÖarent\n");

22 
	}
}

24 
	$chûd_code
(){

25 
buf
[100];

26 
n
,
i
;

27 
	`˛o£
(
fds
[1]);

28 
n
 = 
	`ªad
(
fds
[0],
buf
,100);

29 
	`¥ötf
("Çÿo‡ch¨†ªad = %d\n",
n
);

30 
i
=0;i<
n
;i++)

31 
	`¥ötf
("%c",
buf
[
i
]);

32 
	`¥ötf
("Énd of child \n");

33 
	}
}

34 
	$maö
(){

35 
ªs
,
i
;

36 
pid_t
 
p
;

37 
ªs
 = 
	`pùe
(
fds
);

39 if–
ªs
 == -1 ){

40 
	`≥º‹
("pipe");

41 
	`exô
(1);

43 
p
 = 
	`f‹k
();

44 if(
p
 == 0){

45 
	`chûd_code
();

48 
	`∑ª¡_code
();

50 
	}
}

	@Unix-Programming/ipc/PIPES/pipe3.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

10 
	gfds
[2];

15 
	$∑ª¡_code
(){

16 *
buf1
="aaaaaaaaaaaaaaaaaaaa";

17 *
buf
="bbbbbbbbbbbbbbbbbbbb";

18 
	`˛o£
(
fds
[0]);

19 
	`wrôe
(
fds
[1],
buf
,20);

20 
	`wrôe
(
fds
[1],
buf1
,20);

21 
	`¥ötf
("Énd ofÖarent\n");

22 
	}
}

24 
	$chûd_code
(){

25 
buf
[100];

26 
n
,
i
;

27 
	`˛o£
(
fds
[1]);

28 
n
 = 
	`ªad
(
fds
[0],
buf
,100);

29 
	`¥ötf
("Çÿo‡ch¨†ªad = %d\n",
n
);

30 
i
=0;i<
n
;i++)

31 
	`¥ötf
("%c",
buf
[
i
]);

32 
	`¥ötf
("Énd of child \n");

33 
	}
}

34 
	$maö
(){

35 
ªs
,
i
;

36 
pid_t
 
p
;

37 
ªs
 = 
	`pùe
(
fds
);

39 if–
ªs
 == -1 ){

40 
	`≥º‹
("pipe");

41 
	`exô
(1);

43 
p
 = 
	`f‹k
();

44 if(
p
 == 0){

45 
	`chûd_code
();

48 
	`∑ª¡_code
();

50 
	}
}

	@Unix-Programming/ipc/SEMOP/sp1.c

2 
	~<sys/ty≥s.h
>

3 
	~<sys/ùc.h
>

4 
	~<sys/£m.h
>

6 
	#KEY
 1234

	)

8 
	$maö
(){

9 
£mid
;

10 
£mid
 = 
	`£mgë
(
KEY
,10,
IPC_CREAT
);

11 
	`¥ötf
(" %d i†£mid\n",
£mid
);

12 
	}
}

	@Unix-Programming/ipc/SEMOP/sp2.c

2 
	~<sys/ty≥s.h
>

3 
	~<sys/ùc.h
>

4 
	~<sys/£m.h
>

6 
	#KEY
 1234

	)

8 
	u£mun
{

9 
	mvÆ
;

10 
£mid_ds
 *
	mbuf
;

11 *
	m¨øy
;

12 
£möfo
 *
	m__buf
;

15 
	$maö
(){

16 
£mid
,
ªtvÆ
;

17 
£mun
 
su
,
su1
;

18 
£mid
 = 
	`£mgë
(
KEY
,10,
IPC_CREAT
);

20 
su
.
vÆ
=2;

21 
ªtvÆ
 = 
	`£m˘l
(
£mid
,0,
SETVAL
,
su
);

22 
	`¥ötf
(" VÆuêö sem 0 = %d\n",
ªtvÆ
);

24 
ªtvÆ
 = 
	`£m˘l
(
£mid
,0,
GETVAL
,
su1
);

25 
	`¥ötf
(" VÆuêö sem 0 = %d\n",
ªtvÆ
);

26 
	`gëch¨
();

27 
	}
}

	@Unix-Programming/ipc/SEMOP/sp32.c

2 
	~<sys/ty≥s.h
>

3 
	~<sys/ùc.h
>

4 
	~<sys/£m.h
>

6 
	#KEY
 1234

	)

8 
	u£mun
{

9 
	mvÆ
;

10 
£mid_ds
 *
	mbuf
;

11 *
	m¨øy
;

12 
£möfo
 *
	m__buf
;

15 
	$maö
(){

16 
£mid
,
ªtvÆ
;

17 
£mbuf
 *
sbuf
;

18 
sbuf
 = (
£mbuf
*Ë
	`mÆloc
((sembuf));

19 
£mid
 = 
	`£mgë
(
KEY
,1,
IPC_CREAT
);

20 
sbuf
->
£m_num
 = 0;

21 
sbuf
->
£m_›
 = 1;

22 
sbuf
->
£m_Êg
 = 
SEM_UNDO
;

23 
	`£m›
(
£mid
,
sbuf
,1);

24 
	`≥º‹
("aa");

25 
	}
}

	@Unix-Programming/ipc/SEMOP/sp41.c

2 
	~<sys/ty≥s.h
>

3 
	~<sys/ùc.h
>

4 
	~<sys/£m.h
>

6 
	#KEY
 1234

	)

8 
	u£mun
{

9 
	mvÆ
;

10 
£mid_ds
 *
	mbuf
;

11 *
	m¨øy
;

12 
£möfo
 *
	m__buf
;

15 
	$maö
(){

16 
£mid
,
ªtvÆ
;

17 
£mbuf
 *
sbuf
;

18 
sbuf
 = (
£mbuf
*Ë
	`mÆloc
((sembuf));

19 
£mid
 = 
	`£mgë
(
KEY
,1,
IPC_CREAT
);

20 
	`¥ötf
(" semid = %d\n",
£mid
);

21 
sbuf
->
£m_num
 = 0;

22 
sbuf
->
£m_›
 = 1;

23 
sbuf
->
£m_Êg
 = 
SEM_UNDO
;

24 
	`£m›
(
£mid
,
sbuf
,1);

25 
	`¥ötf
(" semval setÅo 1\n");

26 
	`gëch¨
();

27 
	`gëch¨
();

28 
sbuf
->
£m_num
 = 0;

29 
sbuf
->
£m_›
 = 0;

30 
sbuf
->
£m_Êg
 = 
IPC_NOWAIT
;

31 
	`¥ötf
("before setting semvalÅo 0\n");

32 
ªtvÆ
 = 
	`£m›
(
£mid
,
sbuf
,1);

33 
	`¥ötf
("A·î sëtög semvÆÅÿ0ÑëvÆ = %d\n",
ªtvÆ
);

34 
	`≥º‹
("semval:");

35 
	`gëch¨
();

36 
	`gëch¨
();

37 
	}
}

	@Unix-Programming/ipc/SEMOP/sp42.c

2 
	~<sys/ty≥s.h
>

3 
	~<sys/ùc.h
>

4 
	~<sys/£m.h
>

6 
	#KEY
 1234

	)

8 
	u£mun
{

9 
	mvÆ
;

10 
£mid_ds
 *
	mbuf
;

11 *
	m¨øy
;

12 
£möfo
 *
	m__buf
;

15 
	$maö
(){

16 
£mid
,
ªtvÆ
;

17 
£mbuf
 *
sbuf
;

18 
£mun
 
su
,
su1
;

19 
sbuf
 = (
£mbuf
*Ë
	`mÆloc
((sembuf));

20 
£mid
 = 
	`£mgë
(
KEY
,1,
IPC_CREAT
);

21 
	`¥ötf
(" semid = %d\n",
£mid
);

22 
sbuf
->
£m_num
 = 0;

23 
sbuf
->
£m_›
 = 1;

24 
sbuf
->
£m_Êg
 = 
SEM_UNDO
;

25 
	`£m›
(
£mid
,
sbuf
,1);

26 
	`¥ötf
(" semval setÅo 1\n");

27 
	`gëch¨
();

28 
	`gëch¨
();

29 
su
.
vÆ
=0;

30 
ªtvÆ
 = 
	`£m˘l
(
£mid
,0,
SETVAL
,
su
);

31 
sbuf
->
£m_num
 = 0;

32 
sbuf
->
£m_›
 = 0;

33 
sbuf
->
£m_Êg
 = 
IPC_NOWAIT
;

34 
	`¥ötf
("before setting semvalÅo 0\n");

35 
ªtvÆ
 = 
	`£m›
(
£mid
,
sbuf
,1);

36 
	`¥ötf
("A·î sëtög semvÆÅÿ0ÑëvÆ = %d\n",
ªtvÆ
);

37 
	`≥º‹
("semval:");

38 
	`gëch¨
();

39 
	`gëch¨
();

40 
	}
}

	@Unix-Programming/ipc/sharedmemory/SHMEM/mem1.c

6 
	~<sys/ùc.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/ty≥s.h
>

10 
	$maö
(){

11 
shm_id
;

12 
key_t
 
key
 = 99999;

13 
shm_id
 = 
	`shmgë
(
key
,8000,
IPC_CREAT
);

14 if(
shm_id
 <0){

15 
	`≥º‹
("shmget:");

16 
	`exô
(1);

18 
	`¥ötf
("shm_id = %d\n",
shm_id
);

25 
	`gëch¨
();

26 
	`gëch¨
();

27 
	}
}

	@Unix-Programming/ipc/sharedmemory/SHMEM/mem21.c

6 
	~<sys/ùc.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/ty≥s.h
>

9 
	~"memkey.h
"

11 
	$maö
(){

12 
shm_id
;

13 
key_t
 
key
 = 
IPC_KEY
;

14 
shm_id
 = 
	`shmgë
(
key
,8000,
IPC_CREAT
);

15 if(
shm_id
 <0){

16 
	`≥º‹
("shmget:");

17 
	`exô
(1);

19 
	`¥ötf
("shm_id = %d\n",
shm_id
);

20 
	`gëch¨
();

21 
	`gëch¨
();

22 
	}
}

	@Unix-Programming/ipc/sharedmemory/SHMEM/mem22.c

6 
	~<sys/ùc.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/ty≥s.h
>

9 
	~"memkey.h
"

11 
	$maö
(){

12 
shm_id
;

13 
key_t
 
key
 = 
IPC_KEY
;

14 
shm_id
 = 
	`shmgë
(
key
,8000,
IPC_CREAT
);

15 if(
shm_id
 <0){

16 
	`≥º‹
("shmget:");

17 
	`exô
(1);

19 
	`¥ötf
("shm_id = %d\n",
shm_id
);

20 
	`gëch¨
();

21 
	`gëch¨
();

22 
	}
}

	@Unix-Programming/ipc/sharedmemory/SHMEM/mem31.c

6 
	~<sys/ùc.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/ty≥s.h
>

9 
	~"memkey.h
"

11 
	$maö
(){

12 
shm_id
,
i
;

13 
key_t
 
key
 = 
IPC_KEY
;

14 *
sh¨ed¨ó
;

15 *
öçå
;

16 
shm_id
 = 
	`shmgë
(
key
,8000,
IPC_CREAT
);

17 if(
shm_id
 <0){

18 
	`≥º‹
("shmget:");

19 
	`exô
(1);

21 
	`¥ötf
("shm_id = %d\n",
shm_id
);

23 
sh¨ed¨ó
 = 
	`shm©
(
shm_id
,0,0);

24 if–
sh¨ed¨ó
 < 0){

25 
	`≥º‹
("shmat:");

26 
	`exô
(1);

28 
	`¥ötf
("sh¨edáª i¿thi†¥o˚s†°¨t†‰om %x\n",
sh¨ed¨ó
);

29 
	`gëch¨
();

30 
öçå
(*Ë
sh¨ed¨ó
;

31 
i
=0;i<10;i++){

32 *
öçå
 = 100 + 
i
;

33 
öçå
++;

35 
	`gëch¨
();

36 
	}
}

	@Unix-Programming/ipc/sharedmemory/SHMEM/mem32.c

6 
	~<sys/ùc.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/ty≥s.h
>

9 
	~"memkey.h
"

11 
	$maö
(){

12 
shm_id
,
i
;

13 
key_t
 
key
 = 
IPC_KEY
;

14 *
sh¨ed¨ó
;

15 *
öçå
;

16 
shm_id
 = 
	`shmgë
(
key
,8000,
IPC_CREAT
);

17 if(
shm_id
 <0){

18 
	`≥º‹
("shmget:");

19 
	`exô
(1);

21 
	`¥ötf
("shm_id = %d\n",
shm_id
);

22 
sh¨ed¨ó
 = 
	`shm©
(
shm_id
,0,
SHM_RDONLY
);

23 if–
sh¨ed¨ó
 < 0){

24 
	`≥º‹
("shmat:");

25 
	`exô
(1);

27 
	`¥ötf
("sh¨edáª i¿thi†¥o˚s†°¨t†‰om %x\n",
sh¨ed¨ó
);

28 
öçå
(*Ë
sh¨ed¨ó
;

29 
i
=0;i<10;i++){

30 
	`¥ötf
("%d\n",*
öçå
);

31 
öçå
++;

34 
	}
}

	@Unix-Programming/ipc/sharedmemory/SHMEM/mem4.c

6 
	~<sys/ùc.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/ty≥s.h
>

9 
	~"memc⁄°.h
"

11 
	$maö
(){

12 
shm_id
,
i
;

13 
key_t
 
key
 = 
IPC_KEY
;

14 *
sh¨ed¨ó
;

15 *
öçå
;

16 
shm_id
 = 
	`shmgë
(
key
,8000,
IPC_CREAT
|
SHM_UR
|
SHM_UW
|
SHM_GR
|
SHM_OR
);

17 if(
shm_id
 <0){

18 
	`≥º‹
("shmget:");

19 
	`exô
(1);

21 
	`¥ötf
("shm_id = %d\n",
shm_id
);

22 
	`gëch¨
();

23 
	`gëch¨
();

24 
	}
}

	@Unix-Programming/ipc/sharedmemory/SHMEM/mem51.c

6 
	~<sys/ùc.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/ty≥s.h
>

9 
	~"memc⁄°.h
"

11 
	$maö
(){

12 
shm_id
,
i
;

13 
key_t
 
key
 = 
IPC_KEY
;

14 *
sh¨ed¨ó
;

15 *
öçå
;

16 
shm_id
 = 
	`shmgë
(
key
,8000,
IPC_CREAT
|
SHM_UR
|
SHM_UW
|
SHM_GR
|
SHM_OR
);

17 if(
shm_id
 <0){

18 
	`≥º‹
("shmget:");

19 
	`exô
(1);

21 
	`¥ötf
("shm_id = %d\n",
shm_id
);

22 
sh¨ed¨ó
 = 
	`shm©
(
shm_id
,0,0);

23 
	`¥ötf
(" sh¨ed¨ê%x\n",
sh¨ed¨ó
);

24 
	`gëch¨
();

25 
	`gëch¨
();

26 
	}
}

	@Unix-Programming/ipc/sharedmemory/SHMEM/memconst.h

2 
	#IPC_KEY
 9999

	)

3 
	#SHM_UR
 
SHM_R


	)

4 
	#SHM_UW
 
SHM_W


	)

5 
	#SHM_GR
 
SHM_R
 >>3

	)

6 
	#SHM_GW
 
SHM_W
 >>3

	)

7 
	#SHM_OR
 
SHM_R
 >>6

	)

8 
	#SHM_OW
 
SHM_W
 >>6

	)

	@Unix-Programming/ipc/sharedmemory/SHMEM/memkey.h

5 
	#IPC_KEY
 9999

	)

	@Unix-Programming/posix/PERR.C

1 
	~<°dio.h
>

2 
	~<f˙é.h
>

3 
	~<î∫o.h
>

5 
	$maö
(){

6 
	`›í
("/n⁄exi°ögfûe",
O_RDONLY
);

7 
	`¥ötf
("%d \n",
î∫o
);

8 
	`≥º‹
("OURPRG:");

9 
	}
}

	@Unix-Programming/posix/POSIXVER.C

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	$maö
(){

10 #ifde‡
__USE_POSIX


11 
	`¥ötf
(" weáreÇoÖosix 1.0 \n");

14 #ifde‡
__USE_POSIX2


15 
	`¥ötf
(" weáreÇoÖosix 2.0 \n");

17 
	}
}

	@Unix-Programming/posix/PRL.C

6 
	~<°dio.h
>

7 
	~<limôs.h
>

8 
	~<uni°d.h
>

15 
	$maö
(){

16 
	`¥ötf
(" FollowingáreÅhe minimumÜimits specified byÖosix\n");

17 
	`¥ötf
(" MaxÜength ofárgumentsÅoÖrograms = %d\n",\

18 
	`sysc⁄f
(
_SC_ARG_MAX
));

19 
	`¥ötf
(" MaxÇo ofÜinksÅo files %d\n",\

20 
	`∑thc⁄f
("/",
_PC_LINK_MAX
));

21 
	`¥ötf
(" No of filesÅhat can be open byáÖrocess = %d\n",\

22 
	`sysc⁄f
(
_SC_OPEN_MAX
));

23 
	`¥ötf
(" No of bytes in fileÇame = %d\n",\

24 
	`∑thc⁄f
("/", 
_PC_NAME_MAX
));

25 
	`¥ötf
(" No of bytes inÖathÇame = %d\n",\

26 
	`∑thc⁄f
("/",
_PC_PATH_MAX
));

28 
	}
}

	@Unix-Programming/posix/STDARGS.C

7 
	~<°dio.h
>

8 
	~<°d¨g.h
>

14 
	$v¨¨g‚
(
i
,...){

15 
va_li°
 
¨g_±r
;

16 
k
,
vÆ
;

17 
	`va_°¨t
(
¨g_±r
,
i
);

18 
k
=0;k<
i
;k++){

19 
vÆ
 = 
	`va_¨g
(
¨g_±r
,);

20 
	`¥ötf
(" P¨amëî = %d \n",
vÆ
);

22 
	}
}

24 
	$maö
(){

25 
	`¥ötf
("===============\n");

26 
	`v¨¨g‚
(2,34,34);

27 
	`¥ötf
("===============\n");

28 
	`v¨¨g‚
(4,4,4,4,4);

29 
	}
}

	@Unix-Programming/posix/ansilimits.c

6 
	~<°dio.h
>

7 
	~<limôs.h
>

9 
	$maö
(){

10 
	`¥ötf
(" Möimum vÆuêo‡sig√d ch¨ = %d\n",
SCHAR_MIN
);

11 
	`¥ötf
(" Maximum vÆuêo‡sig√d ch¨ = %d\n",
SCHAR_MAX
);

12 
	`¥ötf
(" Maximum vÆuêo‡unsig√d ch¨ = %d\n",
UCHAR_MAX
);

13 
	`¥ötf
(" Möimum vÆuêo‡ ch¨ = %d\n",
CHAR_MIN
);

14 
	`¥ötf
(" Maximum vÆuêo‡ ch¨ = %d\n",
CHAR_MAX
);

16 
	}
}

	@Unix-Programming/posix/posixlimits.c

6 
	~<°dio.h
>

7 
	~<limôs.h
>

13 
	$maö
(){

14 
	`¥ötf
(" FollowingáreÅhe minimumÜimits specified byÖosix\n");

15 
	`¥ötf
(" MinimumÜength ofárgumentsÅoÖrograms = %d\n",\

16 
_POSIX_ARG_MAX
);

17 
	`¥ötf
(" MöimumÇÿo‡lök†tÿfûe†%d\n",
_POSIX_LINK_MAX
);

18 
	`¥ötf
(" No of filesÅhat can be open byáÖrocess = %d\n",\

19 
_POSIX_OPEN_MAX
);

20 
	`¥ötf
(" Nÿo‡byã†ö fûê«mê%d\n", 
_POSIX_NAME_MAX
);

21 
	`¥ötf
(" Nÿo‡byã†öÖ©hÇamê%d\n", 
_POSIX_PATH_MAX
);

23 
	}
}

	@Unix-Programming/posix/posixopts.c

6 
	~<°dio.h
>

7 
	~<limôs.h
>

8 
	~<bôs/posix_›t.h
>

10 
	$maö
(){

11 #ifde‡
_POSIX_JOB_CONTROL


12 
	`¥ötf
("Posix job control is supported\n");

14 #ifde‡
_POSIX_FSYNC


15 
	`¥ötf
(" fsync isÖresent \n");

17 #ifde‡
_POSIX_CHOWN_RESTRICTED


18 
	`¥ötf
(" chown command hasÑestrictions \n");

20 
	}
}

	@Unix-Programming/process-mgmt/IPCs/mqs/process1.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<î∫o.h
>

6 
	~<f˙é.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<mqueue.h
>

10 
	#BUFSIZE
 50

	)

11 
	#NAME
 "/my_mq"

	)

13 
size_t
 
	gsize
 = 
BUFSIZE
;

15 
mq_©å
 
	g©å
 = {

16 .
mq_maxmsg
 = 10,

17 .
	gmq_msgsize
 = 
BUFSIZE
,

23 
mqd_t
 
	gmsg_fd
;

25 
	$¸óã_mqs
 ()

30 i‡((
msg_fd
 = 
	`mq_›í
 (
NAME
, 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
, 0666, &
©å
)) == -1)

32 
	`¥ötf
 ("FailedÅo create Message Queue\n");

33 
	`exô
(1);

35 
	`¥ötf
 ("Message Queue successfully created\n");

36 
	}
}

40 
	$maö
()

42 
i
=65;

43 
mesßge
[
BUFSIZE
];

44 
	`¸óã_mqs
();

46 
i
<75)

48 
	`mem£t
(
mesßge
,()
i
,
BUFSIZE
-1);

50 
	`¥ötf
("\¿%†- %d\n",
mesßge
,
i
);

51 i‡(
	`mq_£nd
 (
msg_fd
, 
mesßge
, 
BUFSIZE
, 
i
) == -1)

52 
	`¥ötf
 ("FailedÅo send message\n");

53 
i
++;

56 
	`mq_˛o£
(
msg_fd
);

57 
	}
}

	@Unix-Programming/process-mgmt/IPCs/mqs/process2.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<î∫o.h
>

6 
	~<f˙é.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<mqueue.h
>

10 
	#BUFSIZE
 50

	)

11 
	#NAME
 "/my_mq"

	)

13 
mqd_t
 
	gmsg_fd
;

15 
	$›í_mqs
 ()

20 i‡((
msg_fd
 = 
	`mq_›í
 (
NAME
, 
O_RDWR
, 0, 
NULL
)) == -1)

22 
	`¥ötf
 ("FailedÅo open Message Queue\n");

23 
	`exô
(1);

25 
	`¥ötf
 ("Message Queue successfully opened\n");

26 
	}
}

30 
	$maö
()

32 
i
=74;

33 
mesßge
[
BUFSIZE
];

34 
mq_©å
 
©å
;

36 
	`›í_mqs
();

38 
	`mq_gë©å
 (
msg_fd
, &
©å
);

39 
	`¥ötf
("\¿TŸÆ Nubî o‡mesßge†: %d\n",
©å
.
mq_curmsgs
);

41 
i
>64)

43 i‡(
	`mq_ª˚ive
 (
msg_fd
, 
mesßge
, 
BUFSIZE
,&
i
) == -1)

44 
	`¥ötf
 ("FailedÅoÑecive message\n");

45 
	`¥ötf
("\¿%†- %d\n",
mesßge
,
i
);

46 
i
--;

49 
	`mq_˛o£
(
msg_fd
);

51 
	}
}

	@Unix-Programming/process-mgmt/IPCs/sem/SystemV_sem/sem.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/ùc.h
>

4 
	~<sys/£m.h
>

5 
	~<î∫o.h
>

6 
	~<uni°d.h
>

7 
	~<°rög.h
>

8 
	~<°dlib.h
>

10 
	#KEY
 (
key_t
)261

	)

11 
	#DEATH
(
mess
Ë{ 
	`≥º‹
(mess); 
	`exô
(
î∫o
); }

	)

13 
	u£mun


15 
	mvÆ
;

16 
£mid_ds
 *
	mbuf
;

17 *
	m¨øy
;

18 
£möfo
 *
	m__buf
;

21 
	$£t_£m
 (
£mid
, 
vÆ
)

23 
£mbuf
 
buf„r
;

25 
buf„r
.
£m_num
 = 0;

26 
buf„r
.
£m_›
 = 
vÆ
;

27 
buf„r
.
£m_Êg
 = 
SEM_UNDO
;

29 i‡((
	`£m›
 (
£mid
, &
buf„r
, 1)) == -1)

30 
	`DEATH
 ("setop");

31 
	}
}

33 
	$¸óã_ô
 ()

35 
£mid
;

36 
£mun
 
£m_uni⁄
;

38 
	`¥ötf
 ("CreatingáÇew semaphore\n");

39 i‡((
£mid
 = 
	`£mgë
 (
KEY
, 1, 0666 | 
IPC_CREAT
)) == -1)

40 
	`DEATH
 ("semget");

42 
	`¥ötf
 ("InitializingÅhe semaphore.\n");

43 
£m_uni⁄
.
vÆ
 = 1;

44 i‡((
	`£m˘l
 (
£mid
, 0, 
SETVAL
, 
£m_uni⁄
)) == -1)

45 
	`DEATH
 ("semctl");

47 
	`¥ötf
 ("Semaphore successfully createdánd initialized\n");

48 
	`exô
 (
EXIT_SUCCESS
);

49 
	}
}

51 
	$ªmove_ô
 ()

53 
£mid
;

54 
£mun
 
£m_uni⁄
;

56 i‡((
£mid
 = 
	`£mgë
 (
KEY
, 1, 0)) == -1)

57 
	`DEATH
 ("semget");

59 i‡((
	`£m˘l
 (
£mid
, 0, 
IPC_RMID
, 
£m_uni⁄
)) == -1)

60 
	`DEATH
 ("semctl");

62 
	`¥ötf
 ("Semaphore successfully deleted\n");

63 
	`exô
 (
EXIT_SUCCESS
);

64 
	}
}

66 
	$¥Ÿe˘_ô
 ()

68 
£mid
, 
i
;

70 i‡((
£mid
 = 
	`£mgë
 (
KEY
, 1, 0)) == -1)

71 
	`DEATH
 ("semget");

73 
i
 = 0; i < 4; i++) {

74 
	`£t_£m
 (
£mid
, -1);

75 
	`¥ötf
 ("E¡îög crôiˇ»£˘i⁄, %d,Öid=%d\n", 
i
, 
	`gëpid
 ());

76 
	`¶ìp
 (3);

77 
	`¥ötf
 (" Lóvög crôiˇ»£˘i⁄, %d,Öid=%d\n", 
i
, 
	`gëpid
 ());

78 
	`£t_£m
 (
£mid
, 1);

79 
	`¶ìp
 (3);

81 
	`¥ötf
 ("PROTECTÑegi⁄Éxôed f‹Öid=%d\n", 
	`gëpid
 ());

83 
	`exô
 (
EXIT_SUCCESS
);

84 
	}
}

86 
	$maö
 (
¨gc
, *
¨gv
[])

88 i‡(
¨gc
 > 1) {

89 i‡(!
	`°rˇ£cmp
 ("¸óã", 
¨gv
[1]))

90 
	`¸óã_ô
 ();

91 i‡(!
	`°rˇ£cmp
 ("ªmove", 
¨gv
[1]))

92 
	`ªmove_ô
 ();

93 i‡(!
	`°rˇ£cmp
 ("¥Ÿe˘", 
¨gv
[1]))

94 
	`¥Ÿe˘_ô
 ();

96 
	`¥ötf
 ("Ußge: %† cª©ê|Ñemovê|ÖrŸe˘\n", 
¨gv
[0]);

97 
	`exô
 (-1);

98 
	}
}

	@Unix-Programming/process-mgmt/IPCs/sem/posix_sem/Unrelated/process1.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

9 
	~<£m≠h‹e.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

16 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

17 
	#NAME
 "/my_£m"

	)

20 
£m_t
 *
	gmy£m
;

23 
	$¸óã_£m
 ()

27 i‡((
my£m
 = 
	`£m_›í
 (
NAME
, 
O_CREAT
 | 
O_EXCL
, 0666, 1)Ë=
SEM_FAILED
)

29 
	`¥ötf
("\n FailedÅo create semaphores object\n");

30 
	`exô
(1);

32 
	`¥ötf
 ("Semaphore successfully createdánd initialized\n");

33 
	}
}

37 
	$maö
()

39 *
shm_¨ó
;

40 
ªgi⁄
 *
Ωå
;

41 
fd
;

44 
fd
 = 
	`shm_›í
("./myshm", 
O_CREAT
 | 
O_RDWR
, 
S_IRUSR
 | 
S_IWUSR
);

45 i‡(
fd
 == -1)

46 
	`¥ötf
("\n FailedÅo open shared memory object\n");

49 i‡(
	`·runˇã
(
fd
, 
MAX_LEN
) == -1)

50 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

53 
shm_¨ó
 = 
	`mm≠
(
NULL
, 
MAX_LEN
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

54 i‡(
Ωå
 =
MAP_FAILED
)

55 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

56 
	`gëch¨
();

57 
	`¸óã_£m
();

58 
	`gëch¨
();

59 i‡(
	`£m_waô
 (
my£m
))

61 
	`¥ötf
("\n FailedÅo Lock Semaphore\n");

62 
	`exô
(1);

64 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

65 
	`°r˝y
(
Ωå
->
buf
,"Message One");

66 
Ωå
->
Àn
=
	`°æí
("Message One");

67 
Ωå
++;

68 
	`°r˝y
(
Ωå
->
buf
,"Message Two");

69 
Ωå
->
Àn
=
	`°æí
("Message Two");

70 
	`gëch¨
();

71 
Ωå
++;

72 
	`°r˝y
(
Ωå
->
buf
,"Message Three");

73 
Ωå
->
Àn
=
	`°æí
("Message Three");

74 
	`£m_po°
 (
my£m
);

76 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

77 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

78 
	`¥ötf
("\¿%d \n",
	`£m_˛o£
 (
my£m
));

79 
	`˛o£
(
fd
);

81 
	}
}

	@Unix-Programming/process-mgmt/IPCs/sem/posix_sem/Unrelated/process2.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

9 
	~<£m≠h‹e.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

15 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

16 
	#NAME
 "/my_£m"

	)

19 
£m_t
 *
	gmy£m
;

22 
	$›í_£m
 ()

26 i‡((
my£m
 = 
	`£m_›í
 (
NAME
, 0)Ë=
SEM_FAILED
)

28 
	`¥ötf
("\n FailedÅo open semaphores object\n");

29 
	`exô
(1);

31 
	`¥ötf
 ("Semaphore successfully opened\n");

32 
	`gëch¨
();

33 
	}
}

37 
	$maö
()

39 *
shm_¨ó
;

40 
ªgi⁄
 *
Ωå
;

41 
fd
;

46 
fd
 = 
	`shm_›í
("myshm", 
O_RDWR
 , 0);

47 i‡(
fd
 == -1)

49 
	`¥ötf
("\n FailedÅo open shared memory object\n");

50 
	`exô
(1);

54 i‡(
	`·runˇã
(
fd
, 
MAX_LEN
) == -1)

55 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

58 
shm_¨ó
 = 
	`mm≠
(
NULL
, 
MAX_LEN
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

59 i‡(
Ωå
 =
MAP_FAILED
)

60 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

62 
	`›í_£m
();

63 i‡(
	`£m_waô
 (
my£m
))

65 
	`¥ötf
("\n FailedÅo Lock Semaphore\n");

66 
	`exô
(1);

68 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

69 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

70 
Ωå
++;

71 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

72 
Ωå
++;

73 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

74 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

75 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

76 
	`£m_po°
 (
my£m
);

77 
	`£m_u∆ök
 (
NAME
);

78 
	`shm_u∆ök
("myshm");

79 
	}
}

	@Unix-Programming/process-mgmt/IPCs/sem/posix_sem/related/threads.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

9 
	~<£m≠h‹e.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

15 
ªgi⁄
 *
	gΩå
;

16 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

17 
£m_t
 
	gmy£m
;

19 
	$öô_£m
()

21 i‡(
	`£m_öô
(&
my£m
, 0, 1) == -1)

23 
	`¥ötf
("\n UnableÅo init sem \n");

24 
	`exô
(1);

27 
	}
}

29 * 
	$wrôe_thªad
(*
¨g
)

31 i‡(
	`£m_waô
 (&
my£m
))

33 
	`¥ötf
("\n FailedÅo Lock Semaphore\n");

34 
	`exô
(1);

36 
	`¥ötf
("\n In Write Thread\n Writing data into shared memory\n");

37 
	`°r˝y
(
Ωå
->
buf
,"Message One");

38 
Ωå
->
Àn
=
	`°æí
("Message One");

39 
Ωå
++;

40 
	`°r˝y
(
Ωå
->
buf
,"Message Two");

41 
Ωå
->
Àn
=
	`°æí
("Message Two");

42 
Ωå
++;

43 
	`¶ìp
(1);

44 
	`°r˝y
(
Ωå
->
buf
,"Message Three");

45 
Ωå
->
Àn
=
	`°æí
("Message Three");

46 
Ωå
-=2;

47 
	`£m_po°
 (&
my£m
);

48 
	`¥ötf
("\n End of writeÅhread \n");

49 
	}
}

51 * 
	$ªad_thªad
(*
¨g
)

53 
	`¥ötf
("\nIn Child \n Reading data from shared memory\n");

54 i‡(
	`£m_waô
 (&
my£m
))

56 
	`¥ötf
("\n FailedÅo Lock Semaphore\n");

57 
	`exô
(1);

59 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

60 
Ωå
++;

61 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

62 
Ωå
++;

63 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

64 
Ωå
-=2;

65 
	`£m_po°
 (&
my£m
);

66 
	`¥ötf
("\n End ofÑeadÅhread \n");

67 
	}
}

69 
	$maö
()

71 
±hªad_t
 
tid1
,
tid2
;

73 *
shm_¨ó
;

74 
fd
;

79 
fd
 = 
	`shm_›í
("./myshm", 
O_CREAT
 | 
O_RDWR
, 
S_IRUSR
 | 
S_IWUSR
);

80 i‡(
fd
 == -1)

81 
	`¥ötf
("\n FailedÅo open shared memory object\n");

84 i‡(
	`·runˇã
(
fd
, (
ªgi⁄
)) == -1)

85 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

88 
shm_¨ó
 = 
	`mm≠
(
NULL
, (
ªgi⁄
),
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

89 i‡(
Ωå
 =
MAP_FAILED
)

90 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

92 
	`öô_£m
();

94 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

95 
	`±hªad_¸óã
(&
tid1
,
NULL
,
wrôe_thªad
,NULL);

96 
	`±hªad_¸óã
(&
tid2
,
NULL
,
ªad_thªad
,NULL);

97 
	`±hªad_joö
(
tid1
,
NULL
);

98 
	`±hªad_joö
(
tid2
,
NULL
);

100 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

101 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

102 
	`˛o£
(
fd
);

103 
	`shm_u∆ök
("myshm");

104 
	`£m_de°roy
(&
my£m
);

105 
	}
}

	@Unix-Programming/process-mgmt/IPCs/shm/posix/Unrelated/process1.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

16 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

18 
	$maö
()

20 *
shm_¨ó
;

21 
ªgi⁄
 *
Ωå
;

22 
fd
;

27 
fd
 = 
	`shm_›í
("./myshm", 
O_CREAT
 | 
O_RDWR
, 
S_IRUSR
 | 
S_IWUSR
);

28 i‡(
fd
 == -1)

29 
	`¥ötf
("\n FailedÅo open shared memory object\n");

32 i‡(
	`·runˇã
(
fd
, 
MAX_LEN
) == -1)

33 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

34 
	`gëch¨
();

36 
shm_¨ó
 = 
	`mm≠
(
NULL
, 
MAX_LEN
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

37 i‡(
Ωå
 =
MAP_FAILED
)

38 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

40 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

41 
	`°r˝y
(
Ωå
->
buf
,"Message One");

42 
Ωå
->
Àn
=
	`°æí
("Message One");

43 
Ωå
++;

44 
	`°r˝y
(
Ωå
->
buf
,"Message Two");

45 
Ωå
->
Àn
=
	`°æí
("Message Two");

46 
Ωå
++;

47 
	`°r˝y
(
Ωå
->
buf
,"Message Three");

48 
Ωå
->
Àn
=
	`°æí
("Message Three");

49 
	`gëch¨
();

50 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

51 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

52 
	`gëch¨
();

53 
	`˛o£
(
fd
);

55 
	}
}

	@Unix-Programming/process-mgmt/IPCs/shm/posix/Unrelated/process2.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

15 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

18 
	$maö
()

20 *
shm_¨ó
;

21 
ªgi⁄
 *
Ωå
;

22 
fd
;

27 
fd
 = 
	`shm_›í
("myshm", 
O_RDWR
 , 0);

28 i‡(
fd
 == -1)

30 
	`¥ötf
("\n FailedÅo open shared memory object\n");

31 
	`exô
(1);

35 i‡(
	`·runˇã
(
fd
, 
MAX_LEN
) == -1)

36 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

39 
shm_¨ó
 = 
	`mm≠
(
NULL
, 
MAX_LEN
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

40 i‡(
Ωå
 =
MAP_FAILED
)

41 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

42 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

44 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

45 
Ωå
++;

46 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

47 
Ωå
++;

48 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

49 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

50 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

52 
	`shm_u∆ök
("myshm");

53 
	}
}

	@Unix-Programming/process-mgmt/IPCs/shm/posix/related/process1.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

16 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

18 
	$maö
()

20 *
shm_¨ó
;

21 
ªgi⁄
 *
Ωå
;

22 
fd
;

27 
fd
 = 
	`shm_›í
("./myshm", 
O_CREAT
 | 
O_RDWR
, 
S_IRUSR
 | 
S_IWUSR
);

28 i‡(
fd
 == -1)

29 
	`¥ötf
("\n FailedÅo open shared memory object\n");

32 i‡(
	`·runˇã
(
fd
, (
ªgi⁄
)) == -1)

33 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

36 
shm_¨ó
 = 
	`mm≠
(
NULL
, 
MAX_LEN
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

37 i‡(
Ωå
 =
MAP_FAILED
)

38 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

40 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

41 if(
	`f‹k
()==0)

43 
	`¶ìp
(1);

44 
	`¥ötf
("\nIn Child \n Reading data from shared memory\n");

45 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

46 
Ωå
++;

47 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

48 
Ωå
++;

49 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

50 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

51 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

52 
	`˛o£
(
fd
);

53 
	`shm_u∆ök
("myshm");

57 
	`¥ötf
("\n In Parent\n Writing data into shared memory\n");

58 
	`°r˝y
(
Ωå
->
buf
,"Message One");

59 
Ωå
->
Àn
=
	`°æí
("Message One");

60 
Ωå
++;

61 
	`°r˝y
(
Ωå
->
buf
,"Message Two");

62 
Ωå
->
Àn
=
	`°æí
("Message Two");

63 
Ωå
++;

64 
	`°r˝y
(
Ωå
->
buf
,"Message Three");

65 
Ωå
->
Àn
=
	`°æí
("Message Three");

66 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

67 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

68 
	`˛o£
(
fd
);

71 
	}
}

	@Unix-Programming/process-mgmt/IPCs/shm/posix_shm/Unrelated/process1.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

16 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

18 
	$maö
()

20 *
shm_¨ó
;

21 
ªgi⁄
 *
Ωå
;

22 
fd
;

27 
fd
 = 
	`shm_›í
("./myshm", 
O_CREAT
 | 
O_RDWR
, 
S_IRUSR
 | 
S_IWUSR
);

28 i‡(
fd
 == -1)

29 
	`¥ötf
("\n FailedÅo open shared memory object\n");

32 i‡(
	`·runˇã
(
fd
, 
MAX_LEN
) == -1)

33 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

34 
	`gëch¨
();

36 
shm_¨ó
 = 
	`mm≠
(
NULL
, 
MAX_LEN
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

37 i‡(
shm_¨ó
 =
MAP_FAILED
)

38 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

40 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

41 
	`°r˝y
(
Ωå
->
buf
,"Message One");

42 
Ωå
->
Àn
=
	`°æí
("Message One");

43 
Ωå
++;

44 
	`°r˝y
(
Ωå
->
buf
,"Message Two");

45 
Ωå
->
Àn
=
	`°æí
("Message Two");

46 
Ωå
++;

47 
	`°r˝y
(
Ωå
->
buf
,"Message Three");

48 
Ωå
->
Àn
=
	`°æí
("Message Three");

49 
	`gëch¨
();

50 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

51 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

52 
	`gëch¨
();

53 
	`˛o£
(
fd
);

55 
	}
}

	@Unix-Programming/process-mgmt/IPCs/shm/posix_shm/Unrelated/process2.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

15 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

18 
	$maö
()

20 *
shm_¨ó
;

21 
ªgi⁄
 *
Ωå
;

22 
fd
;

27 
fd
 = 
	`shm_›í
("myshm", 
O_RDWR
 , 0);

28 i‡(
fd
 == -1)

30 
	`¥ötf
("\n FailedÅo open shared memory object\n");

31 
	`exô
(1);

35 i‡(
	`·runˇã
(
fd
, 
MAX_LEN
) == -1)

36 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

39 
shm_¨ó
 = 
	`mm≠
(
NULL
, 
MAX_LEN
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

40 i‡(
Ωå
 =
MAP_FAILED
)

41 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

42 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

44 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

45 
Ωå
++;

46 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

47 
Ωå
++;

48 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

49 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

50 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

53 
	}
}

	@Unix-Programming/process-mgmt/IPCs/shm/posix_shm/related/process1.c

1 
	~<°dio.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/waô.h
>

11 
	sªgi⁄
 {

12 
	mÀn
;

13 
	mbuf
[100];

16 
	#MAX_LEN
 (
ªgi⁄
)*3

	)

18 
	$maö
()

20 *
shm_¨ó
;

21 
ªgi⁄
 *
Ωå
;

22 
fd
;

27 
fd
 = 
	`shm_›í
("./myshm", 
O_CREAT
 | 
O_RDWR
, 
S_IRUSR
 | 
S_IWUSR
);

28 i‡(
fd
 == -1)

29 
	`¥ötf
("\n FailedÅo open shared memory object\n");

32 i‡(
	`·runˇã
(
fd
, (
ªgi⁄
)) == -1)

33 
	`¥ötf
("\n FailedÅo setÅhe size ofÅhe shared memory object\n");

36 
shm_¨ó
 = 
	`mm≠
(
NULL
, 
MAX_LEN
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

37 i‡(
Ωå
 =
MAP_FAILED
)

38 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

40 
Ωå
 = (
ªgi⁄
 *)
shm_¨ó
;

41 if(
	`f‹k
()==0)

43 
	`¶ìp
(1);

44 
	`¥ötf
("\nIn Child \n Reading data from shared memory\n");

45 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

46 
Ωå
++;

47 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

48 
Ωå
++;

49 
	`¥ötf
("\¿%d %†\n",
Ωå
->
Àn
,Ωå->
buf
);

50 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

51 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

52 
	`˛o£
(
fd
);

53 
	`shm_u∆ök
("myshm");

57 
	`¥ötf
("\n In Parent\n Writing data into shared memory\n");

58 
	`°r˝y
(
Ωå
->
buf
,"Message One");

59 
Ωå
->
Àn
=
	`°æí
("Message One");

60 
Ωå
++;

61 
	`°r˝y
(
Ωå
->
buf
,"Message Two");

62 
Ωå
->
Àn
=
	`°æí
("Message Two");

63 
Ωå
++;

64 
	`°r˝y
(
Ωå
->
buf
,"Message Three");

65 
Ωå
->
Àn
=
	`°æí
("Message Three");

66 i‡(
	`munm≠
 (
shm_¨ó
, 
MAX_LEN
))

67 
	`¥ötf
("\n FailedÅo mapÅhe shared memory\n");

68 
	`˛o£
(
fd
);

71 
	}
}

	@Unix-Programming/process-mgmt/IPCs/shm/systemV/shm.c

5 
	~<uni°d.h
>

6 
	~<°dlib.h
>

7 
	~<°dio.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/ùc.h
>

10 
	~<sys/shm.h
>

11 
	~<î∫o.h
>

12 
	~<°rög.h
>

14 
	#DEATH
(
mess
Ë{ 
	`≥º‹
(mess); 
	`exô
(
î∫o
); }

	)

16 
	#KEY
 (
key_t
)26

	)

18 
	#SIZE
 8196

	)

20 
	$¸óã_ô
 ()

22 
shmid
;

23 *
shm_¨ó
;

25 i‡((
shmid
 = 
	`shmgë
 (
KEY
, 
SIZE
, 
IPC_CREAT
 | 0666)) == -1)

26 
	`DEATH
 ("shmget");

28 i‡((
shm_¨ó
 = 
	`shm©
 (
shmid
, (*)0, 0)) == (*)-1)

29 
	`DEATH
 ("shmat");

31 
	`¥ötf
 ("CREATE: Mem‹yáâachedáà%lX\n", ()
shm_¨ó
);

33 i‡(
	`shmdt
 (
shm_¨ó
) == -1)

34 
	`DEATH
 ("shmdt");

36 
	`¥ötf
 ("Shared Memory Region successfully created\n");

38 
	`exô
 (
EXIT_SUCCESS
);

39 
	}
}

41 
	$ªmove_ô
 ()

43 
shmid
;

45 i‡((
shmid
 = 
	`shmgë
 (
KEY
, 
SIZE
, 0)) == -1)

46 
	`DEATH
 ("shmget");

48 i‡(
	`shm˘l
 (
shmid
, 
IPC_RMID
, 0))

49 
	`DEATH
 ("shmctl");

51 
	`¥ötf
 ("Marked shared memory segment for deletion\n");

53 
	`exô
 (
EXIT_SUCCESS
);

54 
	}
}

56 
	$£nd_ô
 ()

58 
shmid
, 
iÊag
 = 1;

59 *
shm_¨ó
;

61 i‡((
shmid
 = 
	`shmgë
 (
KEY
, 
SIZE
, 0)) == -1)

62 
	`DEATH
 ("shmget");

64 i‡((
shm_¨ó
 = 
	`shm©
 (
shmid
, (*)0, 0)) == (*)-1)

65 
	`DEATH
 ("shmat");

67 
	`¥ötf
 ("SEND: Mem‹yáâachedáà%lX\n", ()
shm_¨ó
);

68 
	`mem˝y
 (
shm_¨ó
, &
iÊag
, 4);

70 i‡(
	`shmdt
 (
shm_¨ó
) == -1)

71 
	`DEATH
 ("shmdt");

73 
	`¥ötf
 ("SENDND has successfully completed\n");

75 
	`exô
 (
EXIT_SUCCESS
);

76 
	}
}

78 
	$ª˚ive_ô
 ()

80 
shmid
, 
iÊag
 = 8;

81 *
shm_¨ó
;

83 i‡((
shmid
 = 
	`shmgë
 (
KEY
, 
SIZE
, 0)) == -1)

84 
	`DEATH
 ("shmget");

86 i‡((
shm_¨ó
 = 
	`shm©
 (
shmid
, (*)0, 0)) == (*)-1)

87 
	`DEATH
 ("shmat");

89 
	`¥ötf
 ("RCV: Mem‹yáâachedáà%lX\n", ()
shm_¨ó
);

91 
	`¥ötf
 ("iÊag i†now = %d\n", 
iÊag
);

92 
	`mem˝y
 (&
iÊag
, 
shm_¨ó
, 4);

94 
	`¥ötf
 ("RCV has successfully completed\n");

95 
	`¥ötf
 ("iÊag i†now = %d\n", 
iÊag
);

97 i‡(
	`shmdt
 (
shm_¨ó
) == -1)

98 
	`DEATH
 ("shmdt");

100 
	`exô
 (
EXIT_SUCCESS
);

101 
	}
}

103 
	$maö
 (
¨gc
, *
¨gv
[])

105 i‡(
¨gc
 > 1) {

106 i‡(!
	`°rˇ£cmp
 ("¸óã", 
¨gv
[1]))

107 
	`¸óã_ô
 ();

108 i‡(!
	`°rˇ£cmp
 ("ªmove", 
¨gv
[1]))

109 
	`ªmove_ô
 ();

110 i‡(!
	`°rˇ£cmp
 ("ª˚ive", 
¨gv
[1]))

111 
	`ª˚ive_ô
 ();

112 i‡(!
	`°rˇ£cmp
 ("£nd", 
¨gv
[1]))

113 
	`£nd_ô
 ();

115 
	`¥ötf
 ("Ußge: %† cª©ê|Ñemovê|Ñe˚ivê| síd \n", 
¨gv
[0]);

116 
	`exô
 (-1);

117 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/RWLocks/pthread_rwlock.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

8 
±hªad_rwlock_t
 
	grwlock
 = 
PTHREAD_RWLOCK_INITIALIZER
;

13 * 
	$wrôe_thªad
 (*
p
)

20 if(
	`±hªad_rwlock_wæock
(&
rwlock
)!=0)

21 
	`¥ötf
("\n Error :: FailedÅo Aquire Write Lock\n");

24 
	`¥ötf
("Successfully Aquired Write Lock\nWriting .........\n");

25 
	`¶ìp
(1);

26 
	`±hªad_rwlock_u∆ock
(&
rwlock
);

28 
	`±hªad_exô
(
NULL
);

29 
	}
}

31 * 
	$ªad_thªad1
(*
p
)

38 if(
	`±hªad_rwlock_rdlock
(&
rwlock
)!=0)

39 
	`¥ötf
("\n Error :: FailedÅo Aquire Read Lock\n");

42 
	`¥ötf
("Thread 1 Successfully Aquired Read Lock\nReading .........\n");

43 
	`¶ìp
(2);

44 
	`±hªad_rwlock_u∆ock
(&
rwlock
);

46 
	`¥ötf
(" Read1 job is over\n");

47 
	`±hªad_exô
(
NULL
);

48 
	}
}

51 * 
	$ªad_thªad2
(*
p
)

53 if(
	`±hªad_rwlock_rdlock
(&
rwlock
)!=0)

54 
	`¥ötf
("\n Error :: FailedÅo Aquire Read Lock\n");

57 
	`¥ötf
("thread 2 Successfully Aquired Read Lock\nReading .........\n");

58 
	`¶ìp
(2);

59 
	`±hªad_rwlock_u∆ock
(&
rwlock
);

61 
	`¥ötf
(" Read2 job is over\n");

62 
	`±hªad_exô
(
NULL
);

64 
	}
}

66 
	$maö
 ()

69 
±hªad_t
 
tid1
,
tid2
,
tid3
;

72 
rv
;

77 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

78 if(
rv
)

79 
	`puts
("FailedÅo createÅhread");

81 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad1
, NULL);

82 if(
rv
)

83 
	`puts
("FailedÅo createÅhread");

85 
rv
 = 
	`±hªad_¸óã
(&
tid3
, 
NULL
, 
ªad_thªad2
, NULL);

86 if(
rv
)

87 
	`puts
("FailedÅo createÅhread");

90 
	`±hªad_joö
(
tid1
,
NULL
);

91 
	`±hªad_joö
(
tid2
,
NULL
);

92 
	`puts
(" Exit Main");

94 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/conditional_variable/pthread_cond.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

5 
	#MAX_LEN
 100

	)

7 
	s¸ôiˇl_d©a
 {

8 
	mÀn
;

9 
	mbuf
[
MAX_LEN
];

10 }
	gd©a
[2];

17 
±hªad_muãx_t
 
	mmuãx
;

19 
±hªad_c⁄d_t
 
	mc⁄d
;

20 
	mc⁄dôi⁄Më
;

21 } 
	tmy_lock_t
;

23 
my_lock_t
 
	glock
 = {
PTHREAD_MUTEX_INITIALIZER
,
PTHREAD_COND_INITIALIZER
,0};

27 * 
	$wrôe_thªad
 (*
p
)

29 
	`¶ìp
(1);

30 
	`¥ötf
("\n In WriteÅhread\n");

31 if(
lock
.
c⁄dôi⁄Më
==0)

33 if(
	`±hªad_muãx_lock
(&
lock
.
muãx
)==0)

35 
	`¥ötf
("\n\t Entering critical section in WriteÅhread \n");

36 
	`°r˝y
(
d©a
[0].
buf
,"Veda Solutions");

37 
d©a
[0].
Àn
=
	`°æí
("Veda Solutions");

38 
	`°r˝y
(
d©a
[1].
buf
,"Solutions");

40 
d©a
[1].
Àn
=
	`°æí
("Solutions");

41 
lock
.
c⁄dôi⁄Më
 = 1;

42 
	`±hªad_c⁄d_sig«l
(&
lock
.
c⁄d
);

43 
	`±hªad_muãx_u∆ock
(&
lock
.
muãx
);

44 
	`¥ötf
 ("\t Leaving critical section in WriteÅhread\n");

47 
	`±hªad_exô
(
NULL
);

48 
	}
}

50 * 
	$ªad_thªad
(*
p
)

52 
	`¶ìp
(1);

53 
	`¥ötf
("\n In ReadÅhread \n");

54 if(
	`±hªad_muãx_lock
(&
lock
.
muãx
)==0)

56 if(
lock
.
c⁄dôi⁄Më
!=1)

58 
	`±hªad_c⁄d_waô
(&
lock
.
c⁄d
,&lock.
muãx
);

60 
	`¥ötf
("\n\t Entering critical section in ReadÅhread \n");

61 
	`¥ötf
("\n\à%d %†\n",
d©a
[0].
Àn
,d©a[0].
buf
);

62 
	`¥ötf
("\n\à%d %†\n",
d©a
[1].
Àn
,d©a[1].
buf
);

63 
	`±hªad_muãx_u∆ock
(&
lock
.
muãx
);

66 
	`¥ötf
(" Read job is over\n");

67 
	`±hªad_exô
(
NULL
);

69 
	}
}

71 
	$maö
 ()

74 
±hªad_t
 
tid1
,
tid2
;

75 
rv
;

77 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

78 if(
rv
)

79 
	`puts
("FailedÅo createÅhread");

81 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad
, NULL);

82 if(
rv
)

83 
	`puts
("FailedÅo createÅhread");

86 
	`±hªad_joö
(
tid1
,
NULL
);

87 
	`±hªad_joö
(
tid2
,
NULL
);

88 
	`puts
(" Exit Main");

90 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/conditional_variable/pthread_cond1.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

5 
	#MAX_LEN
 100

	)

7 
	s¸ôiˇl_d©a
 {

8 
	mÀn
;

9 
	mbuf
[
MAX_LEN
];

10 }
	gd©a
[2];

17 
±hªad_muãx_t
 
	mmuãx
;

19 
±hªad_c⁄d_t
 
	mc⁄d
;

20 
	mc⁄dôi⁄Më
;

21 
	mbrﬂdˇ°
;

22 } 
	tmy_lock_t
;

24 
my_lock_t
 
	glock
 = {
PTHREAD_MUTEX_INITIALIZER
,
PTHREAD_COND_INITIALIZER
,0,0};

28 * 
	$wrôe_thªad
 (*
p
)

30 
	`¶ìp
(1);

31 
	`¥ötf
("\n In WriteÅhread\n");

32 if(
lock
.
c⁄dôi⁄Më
==0)

34 if(
	`±hªad_muãx_lock
(&
lock
.
muãx
)==0)

36 
	`¥ötf
("\n\t Entering critical section in WriteÅhread \n");

38 
	`°r˝y
(
d©a
[0].
buf
,"Veda Solutions");

39 
d©a
[0].
Àn
=
	`°æí
("Veda Solutions");

40 
	`°r˝y
(
d©a
[1].
buf
,"Solutions");

41 
d©a
[1].
Àn
=
	`°æí
("Solutions");

42 
lock
.
brﬂdˇ°
 = 1;

43 
	`±hªad_c⁄d_brﬂdˇ°
(&
lock
.
c⁄d
);

44 
	`±hªad_muãx_u∆ock
(&
lock
.
muãx
);

45 
	`¥ötf
 ("\t Leaving critical section in WriteÅhread\n");

48 
	`±hªad_exô
(
NULL
);

49 
	}
}

51 * 
	$ªad_thªad1
(*
p
)

53 
	`¥ötf
("\n In ReadÅhread1 \n");

54 if(
	`±hªad_muãx_lock
(&
lock
.
muãx
)==0)

56 
lock
.
c⁄dôi⁄Më
!=1)

58 if(
lock
.
brﬂdˇ°
 == 1)

60 
	`±hªad_c⁄d_waô
(&
lock
.
c⁄d
,&lock.
muãx
);

62 
	`¥ötf
("\n\t Entering critical section in ReadÅhread1 \n");

63 
	`¥ötf
("\n\à%d %†\n",
d©a
[0].
Àn
,d©a[0].
buf
);

64 
	`±hªad_muãx_u∆ock
(&
lock
.
muãx
);

67 
	`¥ötf
(" Read1 job is over\n");

68 
	`±hªad_exô
(
NULL
);

70 
	}
}

72 * 
	$ªad_thªad2
(*
p
)

74 
	`¥ötf
("\n In ReadÅhread2 \n");

75 if(
	`±hªad_muãx_lock
(&
lock
.
muãx
)==0)

77 
lock
.
c⁄dôi⁄Më
!=1 )

79 if(
lock
.
brﬂdˇ°
 == 1)

81 
	`±hªad_c⁄d_waô
(&
lock
.
c⁄d
,&lock.
muãx
);

83 
	`¥ötf
("\n\t Entering critical section in Read2Åhread \n");

84 
	`¥ötf
("\n\à%d %†\n",
d©a
[1].
Àn
,d©a[1].
buf
);

85 
	`±hªad_muãx_u∆ock
(&
lock
.
muãx
);

88 
	`¥ötf
(" Read2 job is over\n");

89 
	`±hªad_exô
(
NULL
);

91 
	}
}

93 
	$maö
 ()

96 
±hªad_t
 
tid1
,
tid2
,
tid3
;

97 
rv
;

99 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

100 if(
rv
)

101 
	`puts
("FailedÅo createÅhread");

103 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad1
, NULL);

104 if(
rv
)

105 
	`puts
("FailedÅo createÅhread");

107 
rv
 = 
	`±hªad_¸óã
(&
tid3
, 
NULL
, 
ªad_thªad2
, NULL);

108 if(
rv
)

109 
	`puts
("FailedÅo createÅhread");

112 
	`±hªad_joö
(
tid1
,
NULL
);

113 
	`±hªad_joö
(
tid2
,
NULL
);

114 
	`±hªad_joö
(
tid3
,
NULL
);

115 
	`puts
(" Exit Main");

117 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/mutex/MutexTypes/attr_PRIO_INHERIT.c

5 
	~<±hªad.h
>

6 
	~<°dio.h
>

8 
±hªad_muãx_t
 
	gmuãx
;

10 *
	$thªad1
(*
nuŒ
)

12 
	`¥ötf
("\n InÅhread1 \n");

13 
	`gëch¨
();

14 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

16 
	`gëch¨
();

18 
	`±hªad_muãx_u∆ock
(&
muãx
);

19 
	`gëch¨
();

20 
	`¥ötf
("\n ExitÅhread1 \n");

21 
	`±hªad_exô
(
NULL
);

22 
	}
}

26 *
	$thªad2
(*
nuŒ
)

28 
	`¥ötf
("\n InÅhread2 \n");

29 
	`¶ìp
(1);

30 
	`gëch¨
();

31 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

33 
	`¶ìp
(5);

34 
	`±hªad_muãx_u∆ock
(&
muãx
);

37 
	`¥ötf
("\n ExitÅhread2 \n");

38 
	`±hªad_exô
(
NULL
);

39 
	}
}

43 
	$maö
 (
¨gc
, *
¨gv
[])

45 
±hªad_muãx©å_t
 
©åmuãx
;

47 
öhîô
,
pﬁicy
,
¥i‹ôy
,
rc
;

48 
sched_∑øm
 
∑øm
;

50 
±hªad_t
 
tid1
,
tid2
,
tid3
;

51 
±hªad_©å_t
 
©å
;

53 
	`±hªad_©å_öô
(&
©å
);

55 
	`±hªad_muãx©å_öô
(&
©åmuãx
);

56 
	`±hªad_muãx©å_£çrŸocﬁ
(&
©åmuãx
,
PTHREAD_PRIO_INHERIT
);

57 
	`±hªad_muãx_öô
(&
muãx
,&
©åmuãx
);

63 
	`±hªad_©å_£töhîôsched
(&
©å
,
PTHREAD_EXPLICIT_SCHED
);

64 
∑øm
.
sched_¥i‹ôy
=75;

65 
	`±hªad_£tsched∑øm
(
	`±hªad_£lf
(),
SCHED_FIFO
,&
∑øm
);

68 
∑øm
.
sched_¥i‹ôy
=70;

69 
	`±hªad_©å_£tschedpﬁicy
(&
©å
,
SCHED_RR
);

70 
	`±hªad_©å_£tsched∑øm
(&
©å
,&
∑øm
);

72 
	`±hªad_¸óã
(&
tid1
, &
©å
, 
thªad1
, 
NULL
);

74 
∑øm
.
sched_¥i‹ôy
=90;

75 
	`±hªad_©å_£tschedpﬁicy
(&
©å
,
SCHED_RR
);

76 
	`±hªad_©å_£tsched∑øm
(&
©å
,&
∑øm
);

78 
	`±hªad_¸óã
(&
tid2
, &
©å
, 
thªad2
, 
NULL
);

80 
rc
 = 
	`±hªad_joö
(
tid1
,
NULL
);

81 
rc
 = 
	`±hªad_joö
(
tid2
,
NULL
);

84 
	`±hªad_©å_de°roy
(&
©å
);

86 
	`¥ötf
("\n Exiting from main Thread\n");

87 
	`±hªad_exô
(
NULL
);

89 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/mutex/MutexTypes/consistent.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

4 
	~<î∫o.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<°dio.h
>

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<°dlib.h
>

10 
	~<sched.h
>

11 
	~<löux/uni°d.h
>

12 
	~<sys/sysˇŒ.h
>

13 
	~<î∫o.h
>

16 
±hªad_muãx_t
 
	gmuãx
;

19 
	$ªcovî
()

21 
	`¥ötf
("\¿Pîf‹mög Recovîy by Thªad : %u \n",
	`sysˇŒ
(
SYS_gëtid
));

24 
	`¥ötf
("\¿Recovîy com∂ëed by Thªad : %u \n",
	`sysˇŒ
(
SYS_gëtid
));

25 
	`±hªad_muãx_lock
(&
muãx
);

26 
	}
}

31 * 
	$wrôe_thªad
 (*
p
)

33 
	`¥ötf
("\n In WriteÅhread\n");

34 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

36 
	`¥ötf
("\nWriteÅhread: Writing....\n");

37 
	`±hªad_exô
(
NULL
);

39 
	}
}

40 * 
	$ªad_thªad1
(*
p
)

42 
rv
;

43 
	`¶ìp
(1);

44 
rv
 = 
	`±hªad_muãx_lock
(&
muãx
);

45 if(
rv
==
EOWNERDEAD
)

47 
	`¥ötf
("\¿Ow√∏Dód idítifõd by : %u\n",
	`sysˇŒ
(
SYS_gëtid
));

48 
	`ªcovî
();

50 
	`¥ötf
(" Lockáquaúed by : %u\n",
	`sysˇŒ
(
SYS_gëtid
));

51 
	`±hªad_muãx_u∆ock
(&
muãx
);

52 
	`±hªad_exô
(
NULL
);

53 
	}
}

55 * 
	$ªad_thªad2
(*
p
)

57 
rv
;

58 
	`¶ìp
(2);

59 
rv
 = 
	`±hªad_muãx_lock
(&
muãx
);

60 if(
rv
==
EOWNERDEAD
)

62 
	`¥ötf
("\¿Ow√∏Dód idítifõd by : %u\n",
	`sysˇŒ
(
SYS_gëtid
));

63 
	`ªcovî
();

65 
	`¥ötf
(" Lockáquaúed by : %u\n",
	`sysˇŒ
(
SYS_gëtid
));

66 
	`¶ìp
(4);

67 
	`±hªad_muãx_u∆ock
(&
muãx
);

68 
	`±hªad_exô
(
NULL
);

69 
	}
}

72 * 
	$ªad_thªad3
(*
p
)

74 
rv
;

76 
rv
 = 
	`±hªad_muãx_lock
(&
muãx
);

77 if(
rv
==
EOWNERDEAD
)

79 
	`¥ötf
("\¿Ow√∏Dód idítifõd by : %u\n",
	`sysˇŒ
(
SYS_gëtid
));

80 
	`ªcovî
();

82 
	`¥ötf
(" Lockáquaúed by : %u\n",
	`sysˇŒ
(
SYS_gëtid
));

83 
	`¶ìp
(2);

84 
	`±hªad_muãx_u∆ock
(&
muãx
);

85 
	`±hªad_exô
(
NULL
);

86 
	}
}

90 
	$maö
 ()

93 
±hªad_t
 
tid1
,
tid2
,
tid3
,
tid4
;

96 
±hªad_muãx©å_t
 
©å
;

97 
rv
;

100 
	`±hªad_muãx©å_öô
(&
©å
);

102 
	`±hªad_muãx©å_£ây≥
(&
©å
,
PTHREAD_MUTEX_ROBUST_NP
);

104 
	`±hªad_muãx©å_£åobu°_≈
(&
©å
, 
PTHREAD_MUTEX_ROBUST_NP
);

105 
	`±hªad_muãx_öô
(&
muãx
,&
©å
);

109 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

110 if(
rv
)

111 
	`puts
("FailedÅo createÅhread");

113 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad1
, NULL);

114 if(
rv
)

115 
	`puts
("FailedÅo createÅhread");

117 
rv
 = 
	`±hªad_¸óã
(&
tid3
, 
NULL
, 
ªad_thªad2
, NULL);

118 if(
rv
)

119 
	`puts
("FailedÅo createÅhread");

120 
rv
 = 
	`±hªad_¸óã
(&
tid4
, 
NULL
, 
ªad_thªad3
, NULL);

121 if(
rv
)

122 
	`puts
("FailedÅo createÅhread");

125 
	`±hªad_joö
(
tid1
,
NULL
);

126 
	`±hªad_joö
(
tid2
,
NULL
);

127 
	`±hªad_joö
(
tid3
,
NULL
);

128 
	`±hªad_joö
(
tid4
,
NULL
);

129 
	`puts
(" Exit Main");

131 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/mutex/MutexTypes/errorcheck.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

4 
	~<î∫o.h
>

6 
	g°r
[50];

9 
±hªad_muãx_t
 
	gmuãx
;

13 * 
	$wrôe_thªad
 (*
p
)

15 
	`¥ötf
("\n In WriteÅhread\n");

16 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

18 
	`¥ötf
(" Enter A string : ");

19 
	`fgës
(
°r
,25,
°dö
);

20 
	`¥ötf
("\n Write job is over\n");

21 
	`±hªad_muãx_u∆ock
(&
muãx
);

23 
	`±hªad_exô
(
NULL
);

24 
	}
}

26 * 
	$ªad_thªad
(*
p
)

28 
	`¥ötf
("\n In ReadÅhread \n");

29 if(
	`±hªad_muãx_u∆ock
(&
muãx
)==
EPERM
)

30 
	`¥ötf
("\n Error :: Cannot unlock mutex owned by otherÅhread\n");

32 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

34 
	`¥ötf
(" %†\n",
°r
);

35 
	`±hªad_muãx_u∆ock
(&
muãx
);

37 
	`¥ötf
(" Read job is over\n");

38 
	`±hªad_exô
(
NULL
);

39 
	}
}

41 
	$maö
 ()

44 
±hªad_t
 
tid1
,
tid2
;

47 
±hªad_muãx©å_t
 
©å
;

48 
rv
;

51 
	`±hªad_muãx©å_öô
(&
©å
);

53 
	`±hªad_muãx©å_£ây≥
(&
©å
,
PTHREAD_MUTEX_ERRORCHECK
);

55 
	`±hªad_muãx_öô
(&
muãx
,&
©å
);

59 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

60 if(
rv
)

61 
	`puts
("FailedÅo createÅhread");

63 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad
, NULL);

64 if(
rv
)

65 
	`puts
("FailedÅo createÅhread");

68 
	`±hªad_joö
(
tid1
,
NULL
);

69 
	`±hªad_joö
(
tid2
,
NULL
);

70 
	`puts
(" Exit Main");

72 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/mutex/MutexTypes/recursive.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

4 
	~<î∫o.h
>

6 
	g°r
[50];

9 
±hªad_muãx_t
 
	gmuãx
;

13 * 
	$wrôe_thªad
 (*
p
)

15 
	`¥ötf
("\n In WriteÅhread\n");

16 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

18 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

19 
	`¥ötf
("\n RecursiveÜockáquired \n");

20 
	`¥ötf
("\n Write job is over\n");

21 
	`±hªad_muãx_u∆ock
(&
muãx
);

22 
	`±hªad_muãx_u∆ock
(&
muãx
);

24 
	`±hªad_exô
(
NULL
);

25 
	}
}

27 * 
	$ªad_thªad
(*
p
)

29 
	`¥ötf
("\n In ReadÅhread \n");

31 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

33 
	`¥ötf
(" Critical SectionÉntered \n");

35 
	`¥ötf
(" Read job is over\n");

36 
	`±hªad_exô
(
NULL
);

37 
	}
}

39 
	$maö
 ()

42 
±hªad_t
 
tid1
,
tid2
;

45 
±hªad_muãx©å_t
 
©å
;

46 
rv
;

49 
	`±hªad_muãx©å_öô
(&
©å
);

52 
	`±hªad_muãx©å_£ây≥
(&
©å
,
PTHREAD_MUTEX_RECURSIVE
);

54 
	`±hªad_muãx_öô
(&
muãx
,&
©å
);

57 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

58 if(
rv
)

59 
	`puts
("FailedÅo createÅhread");

61 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad
, NULL);

62 if(
rv
)

63 
	`puts
("FailedÅo createÅhread");

66 
	`±hªad_joö
(
tid1
,
NULL
);

67 
	`±hªad_joö
(
tid2
,
NULL
);

68 
	`puts
(" Exit Main");

70 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/mutex/pthread_mutex.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

6 
	#MAX_LEN
 100

	)

8 
	s¸ôiˇl_d©a
 {

9 
	mÀn
;

10 
	mbuf
[
MAX_LEN
];

11 }
	gd©a
[2];

15 
±hªad_muãx_t
 
	gmuãx
;

19 * 
	$wrôe_thªad
 (*
p
)

21 
	`¥ötf
("\n In WriteÅhread\n");

22 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

24 
	`¥ötf
("\n\t Entering critical section in WriteÅhread \n");

25 
	`°r˝y
(
d©a
[0].
buf
,"Veda Solutions");

26 
d©a
[0].
Àn
=
	`°æí
("Veda Solutions");

27 
	`°r˝y
(
d©a
[1].
buf
,"Solutions");

28 
	`gëch¨
();

29 
d©a
[1].
Àn
=
	`°æí
("Solutions");

30 
	`±hªad_muãx_u∆ock
(&
muãx
);

31 
	`¥ötf
 ("\t Leaving critical section in WriteÅhread\n");

33 
	`¥ötf
(" Write job is over\n");

34 
	`±hªad_exô
(
NULL
);

35 
	}
}

37 * 
	$ªad_thªad
(*
p
)

39 
	`¥ötf
("\n In ReadÅhread \n");

40 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

42 
	`¥ötf
("\n\t Entering critical section in ReadÅhread \n");

43 
	`¥ötf
("\n\à%d %†\n",
d©a
[0].
Àn
,d©a[0].
buf
);

44 
	`¥ötf
("\n\à%d %†\n",
d©a
[1].
Àn
,d©a[1].
buf
);

45 
	`±hªad_muãx_u∆ock
(&
muãx
);

46 
	`¥ötf
 ("\t Leaving critical section in ReadÅhread\n");

48 
	`¥ötf
(" Read job is over\n");

49 
	`±hªad_exô
(
NULL
);

50 
	}
}

52 
	$maö
 ()

55 
±hªad_t
 
tid1
,
tid2
;

56 
rv
;

59 
	`±hªad_muãx_öô
(&
muãx
,
NULL
);

62 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

63 if(
rv
)

64 
	`puts
("FailedÅo createÅhread");

66 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad
, NULL);

67 if(
rv
)

68 
	`puts
("FailedÅo createÅhread");

71 
	`±hªad_joö
(
tid1
,
NULL
);

72 
	`±hªad_joö
(
tid2
,
NULL
);

73 
	`puts
(" Exit Main");

75 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/mutex/pthread_timed_mutex.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

6 
	#MAX_LEN
 100

	)

8 
	s¸ôiˇl_d©a
 {

9 
	mÀn
;

10 
	mbuf
[
MAX_LEN
];

11 }
	gd©a
[2];

15 
±hªad_muãx_t
 
	gmuãx
;

19 * 
	$wrôe_thªad
 (*
p
)

21 
	`¥ötf
("\n In WriteÅhread\n");

22 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

24 
	`¥ötf
("\n\t Entering critical section in WriteÅhread \n");

25 
	`°r˝y
(
d©a
[0].
buf
,"Veda Solutions");

26 
d©a
[0].
Àn
=
	`°æí
("Veda Solutions");

27 
	`°r˝y
(
d©a
[1].
buf
,"Solutions");

28 
	`¶ìp
(4);

29 
d©a
[1].
Àn
=
	`°æí
("Solutions");

30 
	`±hªad_muãx_u∆ock
(&
muãx
);

31 
	`¥ötf
 ("\t Leaving critical section in WriteÅhread\n");

33 
	`¥ötf
(" Write job is over\n");

34 
	`±hªad_exô
(
NULL
);

35 
	}
}

37 * 
	$ªad_thªad
(*
p
)

39 
time•ec
 
mytime
;

40 
time_t
 
cuºTime
 = 
	`time
(
NULL
);

41 
mytime
.
tv_£c
 = 
	`time
(
NULL
)+3;

42 
mytime
.
tv_n£c
 = 0;

44 
	`¥ötf
("\n In ReadÅhread \n");

45 if(
	`±hªad_muãx_timedlock
(&
muãx
,&
mytime
)==0)

47 
	`¥ötf
("\n\t Entering critical section in ReadÅhread \n");

48 
	`¥ötf
("\n\à%d %†\n",
d©a
[0].
Àn
,d©a[0].
buf
);

49 
	`¥ötf
("\n\à%d %†\n",
d©a
[1].
Àn
,d©a[1].
buf
);

50 
	`±hªad_muãx_u∆ock
(&
muãx
);

51 
	`¥ötf
 ("\t Leaving critical section in ReadÅhread\n");

54 
	`¥ötf
 ("\àMuãxÇŸávÆibÀ f‹ RódÅhªad i¿%d sec⁄d†...",
	`time
(
NULL
Ë- 
cuºTime
);

56 
	`¥ötf
("\n Read job is over\n");

57 
	`±hªad_exô
(
NULL
);

58 
	}
}

60 
	$maö
 ()

63 
±hªad_t
 
tid1
,
tid2
;

64 
rv
;

67 
	`±hªad_muãx_öô
(&
muãx
,
NULL
);

70 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

71 if(
rv
)

72 
	`puts
("FailedÅo createÅhread");

74 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad
, NULL);

75 if(
rv
)

76 
	`puts
("FailedÅo createÅhread");

79 
	`±hªad_joö
(
tid1
,
NULL
);

80 
	`±hªad_joö
(
tid2
,
NULL
);

81 
	`puts
(" Exit Main");

83 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/mutex/pthread_try_mutex.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

6 
	#MAX_LEN
 100

	)

8 
	s¸ôiˇl_d©a
 {

9 
	mÀn
;

10 
	mbuf
[
MAX_LEN
];

11 }
	gd©a
[2];

15 
±hªad_muãx_t
 
	gmuãx
;

19 * 
	$wrôe_thªad
 (*
p
)

21 
	`¥ötf
("\n In WriteÅhread\n");

22 if(
	`±hªad_muãx_lock
(&
muãx
)==0)

24 
	`¥ötf
("\n\t Entering critical section in WriteÅhread \n");

25 
	`°r˝y
(
d©a
[0].
buf
,"Veda Solutions");

26 
d©a
[0].
Àn
=
	`°æí
("Veda Solutions");

27 
	`°r˝y
(
d©a
[1].
buf
,"Solutions");

28 
	`¶ìp
(2);

29 
d©a
[1].
Àn
=
	`°æí
("Solutions");

30 
	`±hªad_muãx_u∆ock
(&
muãx
);

31 
	`¥ötf
 ("\t Leaving critical section in WriteÅhread\n");

33 
	`¥ötf
(" Write job is over\n");

34 
	`±hªad_exô
(
NULL
);

35 
	}
}

37 * 
	$ªad_thªad
(*
p
)

39 
	`¥ötf
("\n In ReadÅhread \n");

40 if(
	`±hªad_muãx_åylock
(&
muãx
)==0)

42 
	`¥ötf
("\n\t Entering critical section in ReadÅhread \n");

43 
	`¥ötf
("\n\à%d %†\n",
d©a
[0].
Àn
,d©a[0].
buf
);

44 
	`¥ötf
("\n\à%d %†\n",
d©a
[1].
Àn
,d©a[1].
buf
);

45 
	`±hªad_muãx_u∆ock
(&
muãx
);

46 
	`¥ötf
 ("\t Leaving critical section in ReadÅhread\n");

49 
	`¥ötf
 ("\t MutexÇotávalible for ReadÅhread\n");

51 
	`¥ötf
(" Read job is over\n");

52 
	`±hªad_exô
(
NULL
);

53 
	}
}

55 
	$maö
 ()

58 
±hªad_t
 
tid1
,
tid2
;

59 
rv
;

62 
	`±hªad_muãx_öô
(&
muãx
,
NULL
);

65 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
wrôe_thªad
, NULL);

66 if(
rv
)

67 
	`puts
("FailedÅo createÅhread");

69 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
ªad_thªad
, NULL);

70 if(
rv
)

71 
	`puts
("FailedÅo createÅhread");

74 
	`±hªad_joö
(
tid1
,
NULL
);

75 
	`±hªad_joö
(
tid2
,
NULL
);

76 
	`puts
(" Exit Main");

78 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/pthread_once/pthread_once.c

1 
	~<±hªad.h
>

2 
	~<°dio.h
>

4 
±hªad_⁄˚_t
 
	g⁄˚
 = 
PTHREAD_ONCE_INIT
;

6 *
	$myöô
()

8 
	`¥ötf
("\n Iám in init fun\n");

9 
	}
}

10 *
	$mythªad
(*
i
)

12 
	`¥ötf
("\¿Iám i¿mythªad : %d\n",*(*)
i
);

13 
	`±hªad_⁄˚
(&
⁄˚
,(*)
myöô
);

14 
	`¥ötf
("\¿Exô from mythªad : %d\n",*(*)
i
);

15 
	}
}

16 
	$maö
()

18 
id
 = 1;

19 
±hªad_t
 
thªad
,
thªad1
,
thªad2
;

20 
	`±hªad_¸óã
(&
thªad
,
NULL
,
mythªad
,(*)&
id
);

21 
	`±hªad_joö
(
thªad
,
NULL
);

22 
id
++;

23 
	`±hªad_¸óã
(&
thªad1
,
NULL
,
mythªad
,(*)&
id
);

24 
	`±hªad_joö
(
thªad1
,
NULL
);

25 
id
++;

26 
	`±hªad_¸óã
(&
thªad2
,
NULL
,
mythªad
,(*)&
id
);

27 
	`¥ötf
("\n Exit For Main Thread\n");

28 
	`±hªad_exô
(
NULL
);

29 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/pthread_self/pthread_self.c

4 
	~<±hªad.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	smy_thªad


11 
	mthªad_id
;

12 
	mmesg
[100];

14 *
	$PrötHñlo
(*
thªadobj
)

16 
±hªad_t
 
thªad_ID
;

17 
my_thªad
 *
t1
;

18 
t1
 = (
my_thªad
 *Ë
thªadobj
;

19 
thªad_ID
 = 
	`±hªad_£lf
();

20 
	`¥ötf
("\¿Thªad ID : %u",
thªad_ID
);

21 
	`¥ötf
("\¿%d Thªad Mesßgê: %s\n",
t1
->
thªad_id
,t1->
mesg
);

22 
	}
}

24 
	$maö
 ()

26 
±hªad_t
 
thªad2
,
thªad3
,
thªad4
,
thªad_ID
;

27 
rc
;

28 
my_thªad
 
t2
,
t3
,
t4
;

29 
t4
.
thªad_id
=4;

30 
	`°r˝y
(
t4
.
mesg
,"Iám Forth Thread\n");

31 
t2
.
thªad_id
=2;

32 
	`°r˝y
(
t2
.
mesg
,"Iám Second Thread\n");

33 
t3
.
thªad_id
=3;

34 
	`°r˝y
(
t3
.
mesg
,"Iám Third Thread\n");

36 
thªad_ID
 = 
	`±hªad_£lf
();

37 
	`¥ötf
("\¿MAIN Thªad ID : %u",
thªad_ID
);

39 
rc
 = 
	`±hªad_¸óã
(&
thªad4
, 
NULL
, 
PrötHñlo
,(*)&
t4
);

40 
rc
 = 
	`±hªad_¸óã
(&
thªad2
, 
NULL
, 
PrötHñlo
,(*)&
t2
);

43 
rc
 = 
	`±hªad_¸óã
(&
thªad3
, 
NULL
, 
PrötHñlo
,(*)&
t3
);

47 i‡(
rc
)

49 
	`¥ötf
("ERROR;Ñëu∫ codê‰omÖthªad_¸óã(Ëi†%d\n", 
rc
);

50 
	`exô
(-1);

52 
	`¥ötf
("\n Exit From main Thread\n");

53 
	`±hªad_exô
(
NULL
);

54 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/signals/pthread_sigmaks.c

4 
	~<±hªad.h
>

5 
	~<sig«l.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

10 
sig£t_t
 
	g£t
;

14 
	$h™dÀr1
(
i
)

16 
	`¥ötf
("\¿Iámá sig«»h™dÀ†f‹ sig«»%d\n",
i
);

17 
	}
}

21 
	$h™dÀr2
(
i
)

23 
	`¥ötf
("\¿Iámá sig«»h™dÀ†f‹ sig«»%d\n",
i
);

24 
	}
}

26 
	smy_thªad


28 
	mthªad_id
;

29 
	mmesg
[50];

35 
	$my_öô
(
my_thªad
 *
obj
,
id
,*
mesg
)

37 
obj
->
thªad_id
=
id
;

38 
	`°r˝y
(
obj
->
mesg
,mesg);

39 
	}
}

42 *
	$PrötHñlo
(*
thªadobj
)

44 
my_thªad
 *
t1
;

46 
t1
 = (
my_thªad
 *Ë
thªadobj
;

48 
	`¥ötf
("\¿Thªad ID : %u \àThªad Mesßgê%d %s",
	`±hªad_£lf
(),
t1
->
thªad_id
,t1->
mesg
);

50 
	`gëch¨
();

51 
	}
}

53 
	$maö
 ()

55 
±hªad_t
 
tid1
,
tid2
,
tid3
;

57 
my_thªad
 
t1
,
t2
,
t3
;

58 
	`sigem±y£t
(&
£t
);

59 
	`my_öô
(&
t1
,1,"First Thread");

60 
	`my_öô
(&
t2
,2,"Second Thread");

61 
	`my_öô
(&
t3
,3,"Third Thread");

63 
	`¥ötf
("\n In Default Thread ");

66 
	`sigem±y£t
(&
£t
);

69 if(
	`sig«l
(1,
h™dÀr1
)==
SIG_ERR
)

70 
	`≥º‹
("sig1");

72 if(
	`sigadd£t
(&
£t
,1)==-1)

73 
	`≥º‹
("add1");

76 if(
	`sig«l
(2,
h™dÀr2
)==
SIG_ERR
)

77 
	`≥º‹
("sig2");

79 if(
	`sigadd£t
(&
£t
,2)==-1)

80 
	`≥º‹
("add2");

83 
	`±hªad_sigmask
(
SIG_BLOCK
|
SIG_SETMASK
,&
£t
,
NULL
);

86 
	`¥ötf
("\n FirstÅhread created \n");

87 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
PrötHñlo
,(*)&
t1
);

88 
	`±hªad_joö
(
tid1
,
NULL
);

90 
	`¥ötf
("\n SecondÅhread created\n");

91 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
PrötHñlo
,(*)&
t2
);

92 
	`±hªad_joö
(
tid2
,
NULL
);

94 
	`gëch¨
();

96 
	`±hªad_sigmask
(
SIG_UNBLOCK
,&
£t
,
NULL
);

98 
	`¥ötf
("\n ThirdÅhread created\n");

99 
	`±hªad_¸óã
(&
tid3
, 
NULL
, 
PrötHñlo
,(*)&
t3
);

102 
	`±hªad_kûl
(
tid3
,2);

103 
	`±hªad_joö
(
tid3
,
NULL
);

105 
	`¥ötf
("\n Exit From main Thread\n");

106 
	`±hªad_exô
(
NULL
);

107 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/spinlock/pthread_spinlock.c

1 
	~<±hªad.h
>

2 
	~<°dio.h
>

7 
±hªad_•ölock_t
 
	g•ö
 ;

12 * 
	$thªad1
(*
p
)

14 if(
	`±hªad_•ö_lock
(&
•ö
)!=0)

15 
	`¥ötf
("\n Error :: Spinlock Failed \n");

18 
	`¥ötf
("\n Thread 1 Aquired spinlock, doing work ....... \n");

19 
	`¶ìp
(2);

20 
	`±hªad_•ö_u∆ock
(&
•ö
);

21 
	`¥ötf
("\n Thread 1Ñelesed spinlock\n");

24 
	`±hªad_exô
(
NULL
);

25 
	}
}

28 * 
	$thªad2
(*
p
)

31 
	`¥ötf
("\n Thread 2ÅryingÅo for spinlock ....... \n");

32 if(
	`±hªad_•ö_lock
(&
•ö
)!=0)

33 
	`¥ötf
("\n Error :: Spinlock Failed \n");

36 
	`¥ötf
("\n Thread 2 Aquired spinlock, doing work ....... \n");

37 
	`±hªad_•ö_u∆ock
(&
•ö
);

40 
	`±hªad_exô
(
NULL
);

42 
	}
}

44 
	$maö
 ()

47 
±hªad_t
 
tid1
,
tid2
;

50 
rv
;

52 
	`±hªad_•ö_öô
(&
•ö
, 
PTHREAD_PROCESS_SHARED
);

56 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
thªad1
, NULL);

57 if(
rv
)

58 
	`puts
("FailedÅo createÅhread");

60 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
thªad2
, NULL);

61 if(
rv
)

62 
	`puts
("FailedÅo createÅhread");

66 
	`±hªad_joö
(
tid1
,
NULL
);

67 
	`±hªad_joö
(
tid2
,
NULL
);

68 
	`puts
(" Exit Main");

70 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_attr/attr_detach/attr_detach.c

5 
	~<±hªad.h
>

6 
	~<°dio.h
>

7 
	~<löux/î∫o.h
>

10 *
	$thªad
(*
nuŒ
)

12 
	`¥ötf
("\n InÅhread \n");

13 
	`±hªad_exô
(
NULL
);

14 
	}
}

16 
	$maö
 (
¨gc
, *
¨gv
[])

18 
dëach_°©e
,
rc
;

19 
±hªad_t
 
tid
;

20 
±hªad_©å_t
 
©å
;

22 
	`±hªad_©å_öô
(&
©å
);

25 
	`±hªad_©å_gëdëach°©e
(&
©å
,&
dëach_°©e
);

28 
	`¥ötf
("\¿DeÁu… Dëach Sèã : %d\n",
dëach_°©e
);

31 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

33 
	`±hªad_¸óã
(&
tid
, &
©å
, 
thªad
, 
NULL
);

36 
rc
 = 
	`±hªad_joö
(
tid
,
NULL
);

37 if(
rc
 =
EINVAL
)

38 
	`¥ötf
("\n Error : Cannot join detachedÅhread\n ");

41 
	`±hªad_©å_de°roy
(&
©å
);

43 
	`¥ötf
("\n Exiting from main Thread\n");

44 
	`±hªad_exô
(
NULL
);

46 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_attr/attr_detach/pthread_detach.c

5 
	~<±hªad.h
>

6 
	~<°dio.h
>

7 
	~<löux/î∫o.h
>

10 *
	$thªad
(*
nuŒ
)

12 
	`¥ötf
("\n InÅhread \n");

13 
	`±hªad_exô
(
NULL
);

14 
	}
}

16 
	$maö
 (
¨gc
, *
¨gv
[])

18 
dëach_°©e
,
rc
;

19 
±hªad_t
 
tid
;

20 
±hªad_©å_t
 
©å
;

22 
	`±hªad_©å_öô
(&
©å
);

25 
	`±hªad_¸óã
(&
tid
, &
©å
, 
thªad
, 
NULL
);

27 
	`¶ìp
(1);

29 
rc
 = 
	`±hªad_dëach
(
tid
);

32 
	`±hªad_©å_de°roy
(&
©å
);

34 
	`¥ötf
("\n Exiting from main Thread\n");

35 
	`±hªad_exô
(
NULL
);

37 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_attr/attr_init/attr_init.c

3 
	~<±hªad.h
>

4 
	~<°dio.h
>

8 * 
	$thªad_routöe
 (*
p
)

10 *
°r
 = (*)
p
;

11 
	`¥ötf
("\nMesßgêtÿthªad : %†\n",
°r
);

12 
	}
}

14 
	$maö
 ()

16 
±hªad_t
 
thªad
;

19 
±hªad_©å_t
 
∑âr
;

20 
rv
;

23 
rv
 = 
	`±hªad_©å_öô
(&
∑âr
);

24 if(
rv
)

25 
	`puts
("FailedÅo initializeÅhreadáttribute object");

27 
rv
 = 
	`±hªad_¸óã
(&
thªad
, &
∑âr
, 
thªad_routöe
, "ArgumentÅoÅhread");

30 
rv
 = 
	`±hªad_©å_de°roy
(&
∑âr
);

31 if(
rv
)

32 
	`puts
("FailedÅo destroyÅhreadáttribute object");

34 
	`puts
("Exit Main");

35 
	`±hªad_exô
(
NULL
);

36 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_attr/attr_join/pthread_join.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

4 
	~<uni°d.h
>

8 * 
	$thªad_routöe1
 (*
p
)

10 
exô
 = 1;

11 
	`¥ötf
("\n Iám inÅhread 1\n");

12 
	`±hªad_exô
((*Ë&
exô
);

13 
	}
}

15 * 
	$thªad_routöe2
 (*
p
)

17 
exô
 = 2;

18 
	`¥ötf
("\n Iám inÅhread 2\n");

19 
	`±hªad_exô
((*Ë&
exô
);

20 
	}
}

22 
	$maö
 ()

25 
±hªad_t
 
tid1
,
tid2
;

26 
rv
, *
exô1
,*
exô2
;

28 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
thªad_routöe1
, NULL);

29 if(
rv
)

30 
	`puts
("FailedÅo createÅhread");

32 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
thªad_routöe2
, NULL);

33 if(
rv
)

34 
	`puts
("FailedÅo createÅhread");

37 
	`±hªad_joö
(
tid1
,(**)&
exô1
);

38 
	`±hªad_joö
(
tid2
,(**)&
exô2
);

39 
	`¥ötf
("\¿Exô sètu†o‡Thªad1 : %d\n",*
exô1
);

40 
	`¥ötf
("\¿Exô sètu†o‡Thªad2 : %d\n",*
exô2
);

41 
	`puts
(" Exit Main");

43 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_attr/pthread_getattr.c

1 
	~<±hªad.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<sys/mm™.h
>

10 
	$ªad_°ack_©åibuãs
(
±hªad_©å_t
 *
©å
)

12 *
gëStkAddr
;

13 
size_t
 
gëStkSize
;

14 
	`±hªad_©å_gë°ack
(
©å
, &
gëStkAddr
,&
gëStkSize
);

15 
	`¥ötf
("\n Stack Attributes");

16 
	`¥ötf
("\n\tSèck Addr=%p\tSize=%d\n", 
gëStkAddr
, 
gëStkSize
);

17 
	}
}

20 
	$ªad_dëach°©e_©åibuã
(
±hªad_©å_t
 *
©å
)

22 
size_t
 
dëach°©e
;

23 
	`±hªad_©å_gëdëach°©e
(
©å
,&
dëach°©e
);

24 
	`¥ötf
("\n Detach Stateáttribute");

25 if(
dëach°©e
 =
PTHREAD_CREATE_JOINABLE
)

26 
	`¥ötf
("\n\tJoinable state\n");

28 
	`¥ötf
("\n\tDetached state\n");

30 
	}
}

33 
	$ªad_gu¨d_©åibuã
(
±hªad_©å_t
 *
©å
)

35 
size_t
 
gu¨dsize
;

36 
	`±hªad_©å_gëgu¨dsize
(
©å
,&
gu¨dsize
);

37 
	`¥ötf
("\n Guard Attribute");

38 
	`¥ötf
("\n\tGu¨d Size=%u\n", 
gu¨dsize
);

39 
	}
}

42 
	$ªad_schedpﬁicy_©åibuã
(
±hªad_©å_t
 *
©å
)

44 
size_t
 
pﬁicy
;

45 
	`±hªad_©å_gëschedpﬁicy
(
©å
,&
pﬁicy
);

46 
	`¥ötf
("\n Scheduling Policy Attribute");

47 if(
pﬁicy
 =
SCHED_OTHER
 )

48 
	`¥ötf
("\n\tOther Scheduling Policy\n");

49 if(
pﬁicy
 =
SCHED_RR
 )

50 
	`¥ötf
("\n\tRound Robin Scheduling Policy\n");

51 if(
pﬁicy
 =
SCHED_FIFO
 )

52 
	`¥ötf
("\n\tFIFO Scheduling Policy\n");

53 
	}
}

56 * 
	$thªad
(* 
∑øm
)

58 
±hªad_©å_t
 
©å
;

59 
	`¥ötf
("\n InÅhread\n" );

60 
	`±hªad_gë©å_≈
(
	`±hªad_£lf
(), &
©å
);

61 
	`ªad_°ack_©åibuãs
(&
©å
);

62 
	`ªad_dëach°©e_©åibuã
(&
©å
);

63 
	`ªad_gu¨d_©åibuã
(&
©å
);

64 
	`ªad_schedpﬁicy_©åibuã
(&
©å
);

66 
	}
}

71 
	$maö
(
¨gc
, *
¨gv
[])

73 
±hªad_t
 
tid1
,
tid2
;

75 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
thªad
, NULL);

77 
	`±hªad_joö
(
tid1
,
NULL
);

79 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_attr/stack_management/attr_stack.c

1 
	~<±hªad.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<sys/mm™.h
>

7 * 
	$thªad_routöe
 (*
p
)

9 
	`¥ötf
("\n Iám inÅhread \n");

10 
	`±hªad_exô
(
NULL
);

11 
	}
}

14 
	$maö
(
¨gc
, *
¨gv
[])

16 
±hªad_t
 
tid
;

17 
±hªad_©å_t
 
©å
;

18 *
gë°ackaddr
;

19 
size_t
 
gë°acksize
;

21 
size_t
 
£t°acksize
 = 16900;

22 *
£t°ackaddr
;

23 
£t°ackaddr
 =(*Ë
	`mÆloc
(
£t°acksize
);

25 
	`±hªad_©å_öô
(&
©å
);

27 
	`±hªad_©å_gë°ack
(&
©å
, &
gë°ackaddr
, &
gë°acksize
);

28 
	`¥ötf
("DeÁu…: Sèck Addr=%08x Sècj Size=%d\n", 
gë°ackaddr
, 
gë°acksize
);

32 
	`±hªad_©å_£t°ack
(&
©å
, 
£t°ackaddr
, 
£t°acksize
);

34 
gë°acksize
=0;

35 
gë°ackaddr
=
NULL
;

37 
	`±hªad_©å_gë°ack
(&
©å
, &
gë°ackaddr
, &
gë°acksize
);

38 
	`¥ötf
("New Sèck Addr=%08x Size=%d\n",
£t°ackaddr
,
£t°acksize
);

41 
	`±hªad_¸óã
(&
tid
, &
©å
,
thªad_routöe
, 
NULL
);

43 
	`±hªad_exô
(
NULL
);

45 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_attr/thread_scheduling/attr_inheritsched.c

5 
	~<±hªad.h
>

6 
	~<°dio.h
>

7 
	~<löux/î∫o.h
>

10 *
	$thªad
(*
nuŒ
)

12 
	`¥ötf
("\n InÅhread \n");

13 
	`±hªad_exô
(
NULL
);

14 
	}
}

16 
	$maö
 (
¨gc
, *
¨gv
[])

18 
öhîô
,
pﬁicy
,
¥i‹ôy
,
rc
;

19 
±hªad_t
 
tid
;

20 
±hªad_©å_t
 
©å
;

22 
	`±hªad_©å_öô
(&
©å
);

25 
	`±hªad_©å_gëöhîôsched
(&
©å
,&
öhîô
);

27 
	`¥ötf
("\¿DeÁu… inhîô Sèã : %d\n",
öhîô
);

31 
	`±hªad_©å_£töhîôsched
(&
©å
,
PTHREAD_EXPLICIT_SCHED
);

34 
	`±hªad_©å_gëöhîôsched
(&
©å
,&
öhîô
);

36 
	`¥ötf
("\¿öhîô Sèã : %d\n",
öhîô
);

38 
	`±hªad_¸óã
(&
tid
, &
©å
, 
thªad
, 
NULL
);

40 
rc
 = 
	`±hªad_joö
(
tid
,
NULL
);

41 if(
rc
 =
EINVAL
)

42 
	`¥ötf
("\n Error : Cannot join detachedÅhread\n ");

45 
	`±hªad_©å_de°roy
(&
©å
);

47 
	`¥ötf
("\n Exiting from main Thread\n");

48 
	`±hªad_exô
(
NULL
);

50 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_attr/thread_scheduling/attr_sched.c

5 
	~<±hªad.h
>

6 
	~<°dio.h
>

8 *
	$thªad
(*
nuŒ
)

10 
pﬁicy
;

11 
sched_∑øm
 
∑øm
;

12 
	`¥ötf
("\n InÅhread \n");

13 
	`±hªad_gësched∑øm
(
	`±hªad_£lf
(),&
pﬁicy
,&
∑øm
);

14 
	`¥ötf
("\¿Thªad Pﬁicy : %d Pri‹ôy : %d",
pﬁicy
,
∑øm
.
sched_¥i‹ôy
);

15 
	`¥ötf
("\¿MaximumÖri‹ôy f‹ SCHED_FIFO : %d",
	`sched_gë_¥i‹ôy_max
(
SCHED_FIFO
));

16 
	`¥ötf
("\¿MöimumÖri‹ôy f‹ SCHED_FIFO : %d\n",
	`sched_gë_¥i‹ôy_mö
(
SCHED_FIFO
));

17 
	`¥ötf
("\¿MaximumÖri‹ôy f‹ SCHED_RR : %d",
	`sched_gë_¥i‹ôy_max
(
SCHED_RR
));

18 
	`¥ötf
("\¿MöimumÖri‹ôy f‹ SCHED_RR : %d",
	`sched_gë_¥i‹ôy_mö
(
SCHED_RR
));

19 
	`±hªad_exô
(
NULL
);

20 
	}
}

24 
	$ªad_schedpﬁicy
(
±hªad_©å_t
 *
©å
)

26 
pﬁicy
;

28 
	`±hªad_©å_gëschedpﬁicy
(
©å
,&
pﬁicy
);

30 
	`¥ötf
("\¿Schedulög Pﬁicy : %d",
pﬁicy
) ;

31 
	}
}

34 
	$wrôe_schedpﬁicy
(
±hªad_©å_t
 *
©å
,
pﬁicy
)

37 
	`±hªad_©å_£tschedpﬁicy
(
©å
,
pﬁicy
);

38 
	}
}

41 
	$ªad_sched∑øm
(
±hªad_©å_t
 *
©å
)

43 
sched_∑øm
 
∑øm
;

44 
	`±hªad_©å_gësched∑øm
(
©å
,&
∑øm
);

45 
	`¥ötf
("\¿thªadÖri‹ôy : %d \n", 
∑øm
.
sched_¥i‹ôy
);

46 
	}
}

49 
	$wrôe_sched∑øm
(
±hªad_©å_t
 *
©å
,
¥i‹ôy
)

51 
sched_∑øm
 
∑øm
;

52 
∑øm
.
sched_¥i‹ôy
 = 
¥i‹ôy
;

53 
	`±hªad_©å_£tsched∑øm
(
©å
,&
∑øm
);

54 
	}
}

58 
	$maö
 (
¨gc
, *
¨gv
[])

60 
öhîô
,
pﬁicy
,
¥i‹ôy
,
rc
;

61 
sched_∑øm
 
∑øm
;

63 
±hªad_t
 
tid
;

64 
±hªad_©å_t
 
©å
;

66 
	`±hªad_©å_öô
(&
©å
);

69 
	`±hªad_©å_£töhîôsched
(&
©å
,
PTHREAD_EXPLICIT_SCHED
);

71 
	`ªad_schedpﬁicy
(&
©å
);

72 
	`ªad_sched∑øm
(&
©å
);

74 
	`wrôe_schedpﬁicy
(&
©å
,
SCHED_FIFO
);

75 
	`wrôe_sched∑øm
(&
©å
,4);

77 
	`ªad_schedpﬁicy
(&
©å
);

78 
	`ªad_sched∑øm
(&
©å
);

80 
	`±hªad_¸óã
(&
tid
, &
©å
, 
thªad
, 
NULL
);

82 
rc
 = 
	`±hªad_joö
(
tid
,
NULL
);

85 
	`±hªad_©å_de°roy
(&
©å
);

87 
	`¥ötf
("\n Exiting from main Thread\n");

88 
	`±hªad_exô
(
NULL
);

90 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_create/pthread_create.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

4 
	~<uni°d.h
>

8 * 
	$thªad_routöe
 (*
p
)

10 
	`¥ötf
("\nHello World!\n");

11 
	`gëch¨
();

12 
	}
}

14 
	$maö
 ()

17 
±hªad_t
 
thªad
;

18 
rv
;

21 
rv
 = 
	`±hªad_¸óã
(&
thªad
, 
NULL
, 
thªad_routöe
, NULL);

22 if(
rv
)

23 
	`puts
("FailedÅo createÅhread");

25 
	`puts
("Exit Main");

26 
	`±hªad_exô
(
NULL
);

27 
	}
}

	@Unix-Programming/process-mgmt/Pthreads/thread_create/pthread_create1.c

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

4 
	~<uni°d.h
>

8 * 
	$thªad_routöe1
 (*
p
)

10 
	`gëch¨
();

11 
	`¥ötf
("\nIám %dÅhªads\n",*(*)
p
);

12 
	}
}

14 * 
	$thªad_routöe2
 (*
p
)

16 
	`¥ötf
("\nIám %dÅhªads\n",*(*)
p
);

17 
	}
}

19 
	$maö
 ()

22 
±hªad_t
 
tid1
,
tid2
;

23 
rv
;

24 
¨g1
 =1,
¨g2
 = 2;

26 
rv
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
thªad_routöe1
, &
¨g1
);

27 if(
rv
)

28 
	`puts
("FailedÅo createÅhread");

30 
rv
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
thªad_routöe2
, &
¨g2
);

31 if(
rv
)

32 
	`puts
("FailedÅo createÅhread");

34 
	`puts
("Exit Main");

36 
	`±hªad_exô
(
NULL
);

37 
	}
}

	@Unix-Programming/process-mgmt/exec/exec1.c

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

14 *
	g¨g°ochûd
[10];

15 *
	gívofchûd
[10];

17 
	$¥ï¨e_¨gs
(){

18 
¨g°ochûd
[0] = (*Ë
	`mÆloc
(20);

19 
	`°r˝y
(
¨g°ochûd
[0],"./progname");

20 
¨g°ochûd
[1] = (*Ë
	`mÆloc
(20);

21 
	`°r˝y
(
¨g°ochûd
[1],"param1");

22 
¨g°ochûd
[2] = (*Ë
	`mÆloc
(20);

23 
	`°r˝y
(
¨g°ochûd
[2],"param2");

24 
¨g°ochûd
[3]=
NULL
;

25 
	}
}

27 
	$¥ï¨e_ív
(){

28 
ívofchûd
[0] = (*Ë
	`mÆloc
(20);

29 
	`°r˝y
(
ívofchûd
[0],"env1=value1");

30 
ívofchûd
[1] = (*Ë
	`mÆloc
(20);

31 
	`°r˝y
(
ívofchûd
[1],"env1=value1");

32 
ívofchûd
[2]=
NULL
;

33 
	}
}

34 
	$maö
(){

35 
	`¥ötf
("Can you see me [ONE]\n");

36 
	`¥ï¨e_¨gs
();

37 
	`¥ï¨e_ív
();

38 
	`execve
("./ã°",
¨g°ochûd
,
ívofchûd
);

39 
	`¥ötf
("Can you see me [TWO]\n");

40 
	}
}

	@Unix-Programming/process-mgmt/exec/exec2.c

14 
	~<°dio.h
>

15 
	~<uni°d.h
>

17 *
	g¨g°ochûd
[10];

18 *
	gívofchûd
[10];

20 
	$¥ï¨e_¨gs
(){

21 
¨g°ochûd
[0] = (*Ë
	`mÆloc
(20);

22 
	`°r˝y
(
¨g°ochûd
[0],"./progname");

23 
¨g°ochûd
[1] = (*Ë
	`mÆloc
(20);

24 
	`°r˝y
(
¨g°ochûd
[1],"param1");

25 
¨g°ochûd
[2] = (*Ë
	`mÆloc
(20);

26 
	`°r˝y
(
¨g°ochûd
[2],"param2");

27 
¨g°ochûd
[3]=
NULL
;

28 
	}
}

30 
	$¥ï¨e_ív
(){

31 
ívofchûd
[0] = (*Ë
	`mÆloc
(20);

32 
	`°r˝y
(
ívofchûd
[0],"env1=value1");

33 
ívofchûd
[1] = (*Ë
	`mÆloc
(20);

34 
	`°r˝y
(
ívofchûd
[1],"env1=value1");

35 
ívofchûd
[2]=
NULL
;

36 
	}
}

37 
	$maö
(){

38 
	`¥ötf
("Can you see me [ONE]\n");

39 
	`¥ï¨e_¨gs
();

40 
	`¥ï¨e_ív
();

41 
	`execve
("./ã°1",
¨g°ochûd
,
ívofchûd
);

42 
	`¥ötf
("Can you see me [TWO]\n");

43 
	}
}

	@Unix-Programming/process-mgmt/exec/exec3.c

8 
	~<°dio.h
>

9 
	~<uni°d.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<f˙é.h
>

13 *
	g¨g°ochûd
[10];

14 *
	gívofchûd
[10];

16 
	$¥ï¨e_¨gs
(){

17 
¨g°ochûd
[0] = (*Ë
	`mÆloc
(20);

18 
	`°r˝y
(
¨g°ochûd
[0],"./progname");

19 
¨g°ochûd
[1] = (*Ë
	`mÆloc
(20);

20 
	`°r˝y
(
¨g°ochûd
[1],"param1");

21 
¨g°ochûd
[2] = (*Ë
	`mÆloc
(20);

22 
	`°r˝y
(
¨g°ochûd
[2],"param2");

23 
¨g°ochûd
[3]=
NULL
;

24 
	}
}

26 
	$¥ï¨e_ív
(){

27 
ívofchûd
[0] = (*Ë
	`mÆloc
(20);

28 
	`°r˝y
(
ívofchûd
[0],"env1=value1");

29 
ívofchûd
[1] = (*Ë
	`mÆloc
(20);

30 
	`°r˝y
(
ívofchûd
[1],"env1=value1");

31 
ívofchûd
[2]=
NULL
;

32 
	}
}

33 
	$maö
(){

34 
fd
;

35 
fd
 = 
	`›í
("./fûe.ã°",
O_RDONLY
);

37 
	`f˙é
(
fd
,
F_SETFD
,0) ;

38 
	`¥ï¨e_¨gs
();

39 
	`¥ï¨e_ív
();

40 
	`execve
("./ã°3",
¨g°ochûd
,
ívofchûd
);

41 
	`¥ötf
("Can you see me [TWO]\n");

42 
	}
}

	@Unix-Programming/process-mgmt/exec/exec4.c

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<f˙é.h
>

15 *
	g¨g°ochûd
[10];

16 *
	gívofchûd
[10];

18 
	$¥ï¨e_¨gs
(){

19 
¨g°ochûd
[0] = (*Ë
	`mÆloc
(20);

20 
	`°r˝y
(
¨g°ochûd
[0],"./progname");

21 
¨g°ochûd
[1] = (*Ë
	`mÆloc
(20);

22 
	`°r˝y
(
¨g°ochûd
[1],"param1");

23 
¨g°ochûd
[2] = (*Ë
	`mÆloc
(20);

24 
	`°r˝y
(
¨g°ochûd
[2],"param2");

25 
¨g°ochûd
[3]=
NULL
;

26 
	}
}

28 
	$¥ï¨e_ív
(){

29 
ívofchûd
[0] = (*Ë
	`mÆloc
(20);

30 
	`°r˝y
(
ívofchûd
[0],"env1=value1");

31 
ívofchûd
[1] = (*Ë
	`mÆloc
(20);

32 
	`°r˝y
(
ívofchûd
[1],"env1=value1");

33 
ívofchûd
[2]=
NULL
;

34 
	}
}

35 
	$maö
(){

36 
	`f˙é
(0,
F_SETFD
,1) ;

37 
	`f˙é
(1,
F_SETFD
,1) ;

39 
	`¥ï¨e_¨gs
();

40 
	`¥ï¨e_ív
();

41 
	`execve
("./ã°4",
¨g°ochûd
,
ívofchûd
);

42 
	`¥ötf
("Can you see me [TWO]\n");

43 
	}
}

	@Unix-Programming/process-mgmt/exec/exec5.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<f˙é.h
>

12 
	$maö
(){

13 
	`¥ötf
("Can you see me [ONE]\n");

14 
	`exe˛
("./ã°","¥og«me","¨g1","¨g2",
NULL
);

15 
	`¥ötf
("Can you see me [TWO]\n");

16 
	}
}

	@Unix-Programming/process-mgmt/exec/test.c

7 
	~<°dio.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

11 
	$maö
(
¨gc
, *
¨gv
[]){

12 
i
;

13 *
ív
;

14 
	`¥ötf
(" Nÿo‡¨gumít†%d\n",
¨gc
);

15 
i
=0;i<
¨gc
;i++)

16 
	`¥ötf
("%d %s\n",
i
,
¨gv
[i]);

17 
ív
 = 
	`gëív
("HOME");

18 
	`¥ötf
(" HOME = %s\n",
ív
);

19 
ív
 = 
	`gëív
("env1");

20 
	`¥ötf
("Énv1 = %s\n",
ív
);

21 
	`gëch¨
();

22 
	}
}

	@Unix-Programming/process-mgmt/exec/test1.c

7 
	~<°dio.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	$maö
(
¨gc
,*
¨gv
[],*
ívp
[]){

11 
i
;

12 
	`¥ötf
(" Nÿo‡¨gumít†%d\n",
¨gc
);

13 
i
=0;i<
¨gc
;i++)

14 
	`¥ötf
("%d %s\n",
i
,
¨gv
[i]);

15 
i
=0;

18 if(
ívp
[
i
] =
NULL
)

20 
	`¥ötf
("%s\n",
ívp
[
i
]);

21 
i
++;

23 
	}
}

	@Unix-Programming/process-mgmt/exec/test3.c

8 
	~<°dio.h
>

9 
	~<uni°d.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<f˙é.h
>

13 
	$maö
(){

14 
fd
 = 
	`›í
("./exec1.c",
O_RDONLY
);

15 
	`¥ötf
("öÅe°3 fd = %d\n",
fd
);

16 
	}
}

	@Unix-Programming/process-mgmt/exec/test4.c

8 
	~<°dio.h
>

9 
	~<uni°d.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<f˙é.h
>

13 
	$maö
(){

14 
	`¥ötf
(" Can you seeÅhis \n");

15 
	`≥º‹
("Can you seeÅhis...");

16 
	}
}

	@Unix-Programming/process-mgmt/fork/frk1.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<°dio.h
>

10 
	#CHILD
 0

	)

12 
	$maö
(){

13 
pid_t
 
pid
;

14 
	`¥ötf
(" MyÖid = %d \n", 
	`gëpid
());

15 
	`gëch¨
();

16 
pid
 = 
	`f‹k
();

17 if–
pid
 =
CHILD
){

18 
	`¥ötf
(" chûd: MyÖid = %d \n", 
	`gëpid
());

23 
	`¥ötf
(" MyÖid = %d \n", 
	`gëpid
());

24 
	`¥ötf
(" Newly cª©ed chûdÖid = %d \n", 
pid
);

26 
	}
}

	@Unix-Programming/process-mgmt/fork/frk2.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<°dio.h
>

9 
	~<sys/waô.h
>

11 
	#CHILD
 0

	)

13 
	$maö
(){

14 
pid_t
 
pid
;

15 
chûd°©us
;

16 
k
=10;

17 
	`¥ötf
(" MyÖid = %d \n", 
	`gëpid
());

18 
	`gëch¨
();

19 
pid
 = 
	`f‹k
();

20 if–
pid
 =
CHILD
){

21 
	`¥ötf
(" chûd: MyÖid = %d \n", 
	`gëpid
());

22 
k
=44;

23 
	`¥ötf
("Énd o‡chûd k = %d\n",
k
);

24 
	`exô
(100);

28 
	`¥ötf
(" MyÖid = %d \n", 
	`gëpid
());

29 
	`¥ötf
(" Newly cª©ed chûdÖid = %d \n", 
pid
);

30 
	`¥ötf
(" **** o‡∑ª¡ k = %d\n",
k
);

31 
	`waô
(&
chûd°©us
);

32 
	`¥ötf
("íd o‡∑ª¡ k = %d\n",
k
);

33 
	`¥ötf
("Chûd sètu†%d\n",
	`WEXITSTATUS
(
chûd°©us
));

35 
	}
}

	@Unix-Programming/process-mgmt/fork/frk3.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<°dio.h
>

9 
	~<sys/waô.h
>

11 
	#CHILD
 0

	)

12 
	$sigh™d
(
signum
){

13 
	`¥ötf
(" Iám in sig handler \n");

14 
	}
}

16 
	$maö
(){

17 
pid_t
 
pid
;

18 
chûd°©us
;

19 
pid
 = 
	`f‹k
();

20 if–
pid
 =
CHILD
){

25 
	`sig«l
(1,
sigh™d
);

26 
	`waô
(&
chûd°©us
);

27 if(
	`WIFSIGNALED
(
chûd°©us
)){

28 
	`¥ötf
(" child was killed dueÅo uncaught sig\n");

31 
	}
}

	@Unix-Programming/process-mgmt/fork/frk4.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<°dio.h
>

9 
	~<sys/waô.h
>

10 
	~<f˙é.h
>

12 
	#CHILD
 0

	)

14 
	$maö
(){

15 
fd
;

16 
buf
[2];

17 
pid_t
 
pid
;

18 
chûd°©us
;

19 
pid
 = 
	`f‹k
();

20 
fd
 = 
	`›í
("./ã°",
O_RDONLY
);

21 if–
pid
 =
CHILD
){

22 
	`ªad
(
fd
,
buf
,2);

23 
	`¥ötf
(" i¿chûd %c\n",
buf
[0]);

24 
	`¥ötf
(" i¿chûd %c\n",
buf
[1]);

25 
	`˛o£
(
fd
);

29 
	`waô
(&
chûd°©us
);

30 
	`ªad
(
fd
,
buf
,2);

31 
	`¥ötf
(" i¿∑ª¡ %c\n",
buf
[0]);

32 
	`¥ötf
(" i¿∑ª¡ %c\n",
buf
[1]);

33 
	`˛o£
(
fd
);

35 
	}
}

	@Unix-Programming/process-mgmt/fork/frk5.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<°dio.h
>

9 
	~<sys/waô.h
>

10 
	~<f˙é.h
>

12 
	#CHILD
 0

	)

14 
	$maö
(){

15 
fd
;

16 
buf
[2];

17 
pid_t
 
pid
;

18 
chûd°©us
;

19 
pid
 = 
	`f‹k
();

20 if–
pid
 =
CHILD
){

21 
	`ªad
(
fd
,
buf
,2);

22 
	`≥º‹
("child:");

23 
	`¥ötf
(" i¿chûd %c\n",
buf
[0]);

24 
	`¥ötf
(" i¿chûd %c\n",
buf
[1]);

25 
	`˛o£
(
fd
);

29 
fd
 = 
	`›í
("./ã°",
O_RDONLY
);

30 
	`waô
(&
chûd°©us
);

31 
	`ªad
(
fd
,
buf
,2);

32 
	`¥ötf
(" i¿∑ª¡ %c\n",
buf
[0]);

33 
	`¥ötf
(" i¿∑ª¡ %c\n",
buf
[1]);

34 
	`˛o£
(
fd
);

36 
	}
}

	@Unix-Programming/process-mgmt/fork/frk6.c

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<°dio.h
>

9 
	~<sys/waô.h
>

10 
	~<f˙é.h
>

11 
	#CHILD
 0

	)

13 
	gglobÆ
;

15 
	$maö
(){

16 
buf
[2];

17 
pid_t
 
pid
;

18 
chûd°©us
;

19 
pid
 = 
	`f‹k
();

20 
globÆ
 = 1;

21 if–
pid
 =
CHILD
){

22 
globÆ
 = 10;

23 
	`¥ötf
(" i¿chûd globÆ %d\n",
globÆ
);

27 
	`waô
(&
chûd°©us
);

28 
	`¥ötf
(" i¿∑ª¡ globÆ %d\n",
globÆ
);

30 
	}
}

	@Unix-Programming/process-mgmt/threads/pt.c

96 
	~<±hªad.h
>

97 
	~<uni°d.h
>

98 
	~<°dio.h
>

100 * 
	$°¨to·h⁄e
(*
¨g
){

101 
i
=0;

102 
	}
}

104 
	$maö
(){

105 
±hªad_t
 
±1
;

106 
	`±hªad_¸óã
(&
±1
,
NULL
,
°¨to·h⁄e
,NULL);

107 
	}
}

	@Unix-Programming/process-mgmt/threads/pth0.c

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<°dio.h
>

11 * 
	$°¨to·h⁄e
(*
¨g
){

12 
i
;

13 
i
=0;i<10000;i++)

14 
	`¥ötf
(" TOC 1\n");

15 
	}
}

17 
	$maö
(){

18 
±hªad_t
 
±1
,
±2
;

19 
	`gëch¨
();

20 
	`±hªad_¸óã
(&
±1
,
NULL
,
°¨to·h⁄e
,NULL);

21 
	`gëch¨
();

22 
	`¥ötf
("end of mainÅhread \n");

23 
	}
}

	@Unix-Programming/process-mgmt/threads/pth1.c

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<°dio.h
>

11 * 
	$°¨to·h⁄e
(*
¨g
){

12 
i
;

13 
i
=0;i<10000;i++)

14 
	`¥ötf
(" TOC 1\n");

15 
	}
}

17 * 
	$°¨to·htwo
(*
¨g
){

18 
i
;

19 
i
=0;i<10000;i++)

20 
	`¥ötf
("** TOC 2\n");

21 
	}
}

23 
	$maö
(){

24 
±hªad_t
 
±1
,
±2
;

25 
	`±hªad_¸óã
(&
±1
,
NULL
,
°¨to·h⁄e
,NULL);

26 
	`±hªad_¸óã
(&
±2
,
NULL
,
°¨to·htwo
,NULL);

27 
	`gëch¨
();

28 
	`¥ötf
("end of mainÅhread \n");

29 
	}
}

	@Unix-Programming/process-mgmt/threads/pth2.c

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<°dio.h
>

11 * 
	$°¨to·h⁄e
(*
¨g
){

13 
	`¥ötf
(" TOC 1\n");

14 
	}
}

16 * 
	$°¨to·htwo
(*
¨g
){

18 
	`¥ötf
("** TOC 2\n");

19 
	}
}

21 
	$maö
(){

22 
±hªad_t
 
±1
,
±2
;

23 
	`±hªad_¸óã
(&
±1
,
NULL
,
°¨to·h⁄e
,NULL);

24 
	`±hªad_¸óã
(&
±2
,
NULL
,
°¨to·htwo
,NULL);

25 
	`gëch¨
();

26 
	`¥ötf
("end of mainÅhread \n");

27 
	}
}

	@Unix-Programming/sched/affinity.c

2 
	~<sched.h
>

3 
	~<uni°d.h
>

4 
	$maö
()

7 
i
=0;

8 
pid
;

9 
no_¥o˚ss‹s
;

11 
no_¥o˚ss‹s
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

12 
	`¥ötf
("Sy°em ha†%dÖro˚ss‹s.\n", 
no_¥o˚ss‹s
);

13 
i
< 
no_¥o˚ss‹s
-1)

15 
pid
 = 
	`f‹k
();

16 if(
pid
==0)

18 
	`¥ötf
("\¿chûd %d\n",
i
);

22 
i
++;

26 
˝u_£t_t
 
c£t
;

27 
	`CPU_ZERO
–&
c£t
 );

28 
	`CPU_SET
–
i
, &
c£t
);

30 if–
	`sched_£èfföôy
–0, (
c£t
), &cset ) == -1 )

31 
	`≥º‹
("CPU Affinity...\n");

34 
	}
}

	@Unix-Programming/sched/priority.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<sys/time.h
>

5 
	~<sys/ªsour˚.h
>

6 
	~<î∫o.h
>

8 
	$maö
 (
¨gc
, *
¨gv
[])

10 
pid_t
 
mypid
;

11 
ﬁd_¥io
, 
√w_¥io
, 
i
, 
rc
;

13 
mypid
 = 
	`gëpid
 ();

15 
	`¥ötf
 ("\nExamöögÖri‹ôõ†f‹ PID = %d \n", 
mypid
);

16 
	`¥ötf
 ("%10s%10s\n", "Previous", "Assigned");

18 
i
 = -20; i < 20; i += 2) {

20 
ﬁd_¥io
 = 
	`gë¥i‹ôy
 (
PRIO_PROCESS
, ()
mypid
);

21 
rc
 = 
	`£çri‹ôy
 (
PRIO_PROCESS
, ()
mypid
, 
i
);

22 i‡(
rc
)

23 
	`Ârötf
 (
°dîr
, "setpriority() failed ");

25 
î∫o
 = 0;

27 
√w_¥io
 = 
	`gë¥i‹ôy
 (
PRIO_PROCESS
, ()
mypid
);

28 
	`¥ötf
 ("%10d%10d\n", 
ﬁd_¥io
, 
√w_¥io
);

31 
	`exô
 (0);

32 
	}
}

	@Unix-Programming/sched/priority1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<sys/time.h
>

5 
	~<sys/ªsour˚.h
>

6 
	~<î∫o.h
>

8 
	$maö
 (
¨gc
, *
¨gv
[])

10 
pid_t
 
mypid
;

11 
ﬁd_¥io
, 
√w_¥io
, 
i
=1, 
rc
;

15 
i
< 3)

17 
mypid
 = 
	`f‹k
();

18 if(
mypid
==0)

20 
mypid
 = 
	`gëpid
();

21 
ﬁd_¥io
 = 
	`gë¥i‹ôy
 (
PRIO_PROCESS
, ()
mypid
);

22 
	`gëch¨
();

23 
	`¥ötf
 ("\nExamöögÖri‹ôõ†f‹ PID = %d \n", 
mypid
);

24 
	`¥ötf
 ("%10s%10s\n", "Previous", "Assigned");

25 
√w_¥io
 = 
	`gë¥i‹ôy
 (
PRIO_PROCESS
, ()
mypid
);

26 
	`¥ötf
 ("%10d%10d\n", 
ﬁd_¥io
, 
√w_¥io
);

27 
	`exô
(0);

30 
i
++;

33 
mypid
 = 
	`gëpid
();

34 
	`¥ötf
 ("\nExamöögÖri‹ôõ†f‹ PID = %d \n", 
mypid
);

35 
	`¥ötf
 ("%10s%10s\n", "Previous", "Assigned");

36 
ﬁd_¥io
 = 
	`gë¥i‹ôy
 (
PRIO_PROCESS
, ()
mypid
);

37 
rc
 = 
	`£çri‹ôy
 (
PRIO_PGRP
, 0, 20);

38 i‡(
rc
)

39 
	`≥º‹
("setpriority.......\n ");

41 
√w_¥io
 = 
	`gë¥i‹ôy
 (
PRIO_PROCESS
, ()
mypid
);

42 
	`¥ötf
 ("%10d%10d\n", 
ﬁd_¥io
, 
√w_¥io
);

43 
	`gëch¨
();

44 
	`exô
 (0);

45 
	}
}

	@Unix-Programming/sched/sched_param.c

1 
	~<sched.h
>

2 
	~<°dio.h
>

4 
	$maö
()

6 
sched_∑øm
 
∑øm
;

8 
	`sched_gë∑øm
(0, &
∑øm
);

9 
	`¥ötf
("\¿DeÁu… Pri‹ôy : %d",
∑øm
.
sched_¥i‹ôy
);

11 
∑øm
.
sched_¥i‹ôy
 = 70;

12 
	`sched_£tscheduÀr
(0, 
SCHED_RR
,&
∑øm
);

14 
	`sched_gë∑øm
(0, &
∑øm
);

15 
	`¥ötf
("\¿New Pri‹ôy : %d",
∑øm
.
sched_¥i‹ôy
);

17 
∑øm
.
sched_¥i‹ôy
 = 60;

18 
	`sched_£ç¨am
(0,&
∑øm
);

20 
	`sched_gë∑øm
(0, &
∑øm
);

21 
	`¥ötf
("\¿New Pri‹ôy : %d",
∑øm
.
sched_¥i‹ôy
);

24 
	}
}

	@Unix-Programming/sched/sched_scheduler.c

1 
	~<sched.h
>

2 
	~<°dio.h
>

4 
	$quîy_pﬁicy
()

6 
pﬁicy
;

7 
pﬁicy
 = 
	`sched_gëscheduÀr
(0);

9 
pﬁicy
)

11 
SCHED_OTHER
:

12 
	`¥ötf
("\n Fare share schedulin......\n");

14 
SCHED_RR
:

15 
	`¥ötf
("\n Round Robin scheduling......\n");

17 
SCHED_FIFO
:

18 
	`¥ötf
("\n First In-First Out scheduling......\n");

21 
	}
}

24 
	$maö
()

26 
sched_∑øm
 
∑øm
;

27 
∑øm
.
sched_¥i‹ôy
=60;

28 
	`gëch¨
();

29 
	`quîy_pﬁicy
();

30 
	`sched_£tscheduÀr
(0, 
SCHED_RR
,&
∑øm
);

31 
	`gëch¨
();

32 
	`quîy_pﬁicy
();

34 
	}
}

	@Unix-Programming/selectpoll/multi1.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<f˙é.h
>

12 
	$maö
(){

13 
fd1
,
fd2
;

14 
buf
[10];

15 
n
;

16 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

17 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

18 
	`¥ötf
(" TryingÅoÑead fromÖone\n");

19 
n
 = 
	`ªad
 (
fd1
,
buf
,10);

20 
	`¥ötf
("Ñód %dÇÿo‡byã†‰omÖ⁄ê\n",
n
);

21 
	`¥ötf
(" TryingÅoÑead fromÖtwo\n");

22 
n
 = 
	`ªad
 (
fd2
,
buf
,10);

23 
	`¥ötf
("Ñód %dÇÿo‡byã†‰omÖtwÿ\n",
n
);

24 
	}
}

	@Unix-Programming/selectpoll/multi2.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/time.h
>

11 
	~<f˙é.h
>

13 
	$maö
(){

14 
fd1
,
fd2
;

15 
fd_£t
 
ªad_£t
,
wrôe_£t
,
ex˚±_£t
;

16 
buf
[10];

17 
timevÆ
 
timeout
;

18 
n
;

19 
timeout
.
tv_£c
 = 90;

20 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

21 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

22 
	`FD_ZERO
(&
ªad_£t
);

25 
	`FD_SET
(
fd1
,&
ªad_£t
);

26 
	`FD_SET
(
fd2
,&
ªad_£t
);

27 
n
 = 
	`£À˘
(
FD_SETSIZE
,&
ªad_£t
,
NULL
,NULL,&
timeout
);

28 i‡(
n
 <0 ){

29 
	`≥º‹
("select ");

30 
	`exô
(1);

32 
	`¥ötf
("Çÿo‡des¸ùt‹Ñódy = %d\n",
n
);

33 
	}
}

	@Unix-Programming/selectpoll/multi3.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/time.h
>

10 
	~<f˙é.h
>

12 
	$maö
(){

13 
fd1
,
fd2
;

14 
fd_£t
 
ªad_£t
,
wrôe_£t
,
ex˚±_£t
;

15 
buf
[10];

16 
timevÆ
 
timeout
;

17 
n
;

18 
timeout
.
tv_£c
 = 90;

19 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

20 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

21 
	`FD_ZERO
(&
ªad_£t
);

22 
	`FD_SET
(
fd1
,&
ªad_£t
);

23 
	`FD_SET
(
fd2
,&
ªad_£t
);

24 
n
 = 
	`£À˘
(
FD_SETSIZE
,&
ªad_£t
,
NULL
,NULL,NULL);

25 i‡(
n
 <0 ){

26 
	`≥º‹
("select ");

27 
	`exô
(1);

30 if–
	`FD_ISSET
(
fd1
,&
ªad_£t
)){

31 
	`¥ötf
("Ñeading from fd1 (pone)\n");

32 
n
 = 
	`ªad
(
fd1
,
buf
,10);

33 
	`¥ötf
("Ñód %d %†‰omÖ⁄ê\n",
n
,
buf
);

36 if–
	`FD_ISSET
(
fd2
,&
ªad_£t
)){

37 
	`¥ötf
("Ñeading from fd2 (ptwo)\n");

38 
n
 = 
	`ªad
(
fd2
,
buf
,10);

39 
	`¥ötf
("Ñód %d fromÖtwÿ%†\n",
n
,
buf
);

41 
	}
}

	@Unix-Programming/selectpoll/multi4.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/time.h
>

11 
	~<f˙é.h
>

13 
	$maö
(){

14 
fd1
,
fd2
;

15 
fd_£t
 
ªad_£t
,
wrôe_£t
,
ex˚±_£t
;

16 
buf
[10];

17 
timevÆ
 
timeout
;

18 
n
;

19 
timeout
.
tv_£c
 = 90;

20 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

21 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

23 
	`FD_ZERO
(&
ªad_£t
);

24 
	`FD_SET
(
fd1
,&
ªad_£t
);

25 
	`FD_SET
(
fd2
,&
ªad_£t
);

26 
n
 = 
	`£À˘
(
FD_SETSIZE
,&
ªad_£t
,
NULL
,NULL,&
timeout
);

27 i‡(
n
 <0 ){

28 
	`≥º‹
("select ");

29 
	`exô
(1);

32 if–
	`FD_ISSET
(
fd1
,&
ªad_£t
)){

33 
	`¥ötf
("Ñeading from fd1 (pone)\n");

34 
n
 = 
	`ªad
(
fd1
,
buf
,10);

35 
	`¥ötf
("Ñód %d fromÖ⁄ê\n",
n
);

38 if–
	`FD_ISSET
(
fd2
,&
ªad_£t
)){

39 
	`¥ötf
("Ñeading from fd2 (ptwo)\n");

40 
n
 = 
	`ªad
(
fd2
,
buf
,10);

41 
	`¥ötf
("Ñód %d fromÖtwÿ\n",
n
);

44 
	}
}

	@Unix-Programming/selectpoll/namedpipec/client.c

1 
	~<°dio.h
>

2 
	~<î∫o.h
>

3 
	~<˘y≥.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<fuŒdu∂ex.h
>

9 
	$maö
(
¨gc
, *
¨gv
[])

11 
wrfd
, 
rdfd
, 
numªad
;

12 
rdbuf
[
MAX_BUF_SIZE
];

16 i‡(
¨gc
 != 2) {

17 
	`¥ötf
("Ußgê: %†<°rögÅÿbê£¡Åÿthê£rvî>n", 
¨gv
[0]);

18 
	`exô
 (1);

22 
wrfd
 = 
	`›í
(
NP1
, 
O_WRONLY
);

25 
rdfd
 = 
	`›í
(
NP2
, 
O_RDONLY
);

28 
	`wrôe
(
wrfd
, 
¨gv
[1], 
	`°æí
(argv[1]));

31 
numªad
 = 
	`ªad
(
rdfd
, 
rdbuf
, 
MAX_BUF_SIZE
);

33 
rdbuf
[
numªad
] = '0';

35 
	`¥ötf
("FuŒ Du∂ex Clõ¡ : Ród FromÅhêPùê: %¢", 
rdbuf
);

36 
	}
}

	@Unix-Programming/selectpoll/namedpipec/fullduplex.h

1 
	#NP1
 "/tmp/≈1"

	)

2 
	#NP2
 "/tmp/≈2"

	)

3 
	#MAX_BUF_SIZE
 255

	)

	@Unix-Programming/selectpoll/namedpipec/server.c

1 
	~<°dio.h
>

2 
	~<î∫o.h
>

3 
	~<˘y≥.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<fuŒdu∂ex.h
>

9 
	$maö
(
¨gc
, *
¨gv
[])

11 
rdfd
, 
wrfd
, 
ªt_vÆ
, 
cou¡
, 
numªad
;

12 
buf
[100];

14 
fd_£t
 
ªad_£t
;

18 
ªt_vÆ
 = 
	`mkfifo
(
NP1
, 0666);

20 i‡((
ªt_vÆ
 =-1Ë&& (
î∫o
 !
EEXIST
)) {

21 
	`≥º‹
("Error creatingÅheÇamedÖipe");

22 
	`exô
 (1);

25 
ªt_vÆ
 = 
	`mkfifo
(
NP2
, 0666);

27 i‡((
ªt_vÆ
 =-1Ë&& (
î∫o
 !
EEXIST
)) {

28 
	`≥º‹
("Error creatingÅheÇamedÖipe");

29 
	`exô
 (1);

33 
rdfd
 = 
	`›í
(
NP1
, 
O_RDONLY
);

36 
wrfd
 = 
	`›í
(
NP2
, 
O_WRONLY
);

43 
fd1
 = 
	`›í
(
NP1
,
O_RDWR
);

44 
	`FD_ZERO
(&
ªad_£t
);

45 
	`FD_SET
(
fd1
,&
ªad_£t
);

46 
n
 = 
	`£À˘
(
FD_SETSIZE
,&
ªad_£t
,
NULL
,NULL,NULL);

47 i‡(
n
 <0 ){

48 
	`≥º‹
("select ");

49 
	`exô
(1);

52 if–
	`FD_ISSET
(
fd1
,&
ªad_£t
)){

53 
	`¥ötf
("Ñeading from fd1 (pone)\n");

54 
n
 = 
	`ªad
(
fd1
,
buf
,50);

55 
	`¥ötf
("Ñód %†‰omÖ⁄ê\n",
buf
);

58 
	`¥ötf
("FuŒ Du∂ex Sîvî : Ród FromÅhêpùê: %¢", 
buf
);

61 
cou¡
 = 0;

62 
cou¡
 < 
numªad
) {

63 
buf
[
cou¡
] = 
	`touµî
(buf[count]);

64 
cou¡
++;

71 
	`wrôe
(
wrfd
, 
buf
, 
	`°æí
(buf));

72 
	}
}

	@Unix-Programming/selectpoll/poll1.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<pﬁl.h
>

11 
	~<°r›ts.h
>

12 
	~<f˙é.h
>

14 
	$maö
(){

15 
fd1
,
fd2
;

16 
pﬁlfd
 
pﬁœºay
[10];

17 
buf
[10];

18 
n
;

19 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

20 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

21 
pﬁœºay
[0].
fd
 = 
fd1
;

22 
pﬁœºay
[1].
fd
 = 
fd2
;

23 
pﬁœºay
[0].
evíts
 = 
POLLIN
 ;

24 
pﬁœºay
[1].
evíts
 = 
POLLIN
 ;

25 
n
 = 
	`pﬁl
(
pﬁœºay
,2,90000);

26 i‡(
n
 <0 ){

27 
	`≥º‹
("poll:");

28 
	`exô
(1);

30 
	`¥ötf
("fd1Ñevíà%d\n",
pﬁœºay
[0].
ªvíts
);

31 
	`¥ötf
("fd2Ñevíà%d\n",
pﬁœºay
[1].
ªvíts
);

32 
	`¥ötf
("POLLIN %d\n",
POLLIN
);

33 
	`¥ötf
("POLLOUT %d\n",
POLLOUT
);

34 
	`¥ötf
(".. %d\n",(
pﬁœºay
[0].
ªvíts
 & 
POLLIN
));

35 
	`¥ötf
(".. %d\n",(
pﬁœºay
[1].
ªvíts
 & 
POLLIN
));

36 
	}
}

	@Unix-Programming/selectpoll/poll2.c

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<pﬁl.h
>

11 
	~<°r›ts.h
>

12 
	~<f˙é.h
>

14 
	$maö
(){

15 
fd1
,
fd2
;

16 
pﬁlfd
 
pﬁœºay
[10];

17 
buf
[10];

18 
n
;

19 
fd1
 = 
	`›í
("./p⁄e",
O_RDWR
);

20 
fd2
 = 
	`›í
("./±wo",
O_RDWR
);

21 
pﬁœºay
[0].
fd
 = 
fd1
;

22 
pﬁœºay
[1].
fd
 = 
fd2
;

23 
pﬁœºay
[0].
evíts
 = 
POLLIN
 ;

24 
pﬁœºay
[1].
evíts
 = 
POLLIN
 ;

25 
n
 = 
	`pﬁl
(
pﬁœºay
,2,90000);

26 i‡(
n
 <0 ){

27 
	`≥º‹
("poll:");

28 
	`exô
(1);

31 if((
pﬁœºay
[0].
ªvíts
 & 
POLLIN
) == 1 ){

32 
	`¥ötf
("Ñeading from fd1 (pone)\n");

33 
n
 = 
	`ªad
(
fd1
,
buf
,10);

34 
	`¥ötf
("Ñód %d fromÖ⁄ê\n",
n
);

37 if((
pﬁœºay
[1].
ªvíts
 & 
POLLIN
) == 1 ){

38 
	`¥ötf
("Ñeading from fd2 (ptwo)\n");

39 
n
 = 
	`ªad
(
fd2
,
buf
,10);

40 
	`¥ötf
("Ñód %d fromÖtwÿ\n",
n
);

42 
	}
}

	@Unix-Programming/serial/mr.c

3 
	~"£rüŒib.h
"

5 
	$maö
(){

6 
fd
,
i
;

7 
ãrmios
 *
ãr1
,*
ãr2
,*
ãr3
,*
ãr4
;

8 
ãr1
=(
ãrmios
 *)
	`mÆloc
((termios));

9 
ãr2
=(
ãrmios
 *)
	`mÆloc
((termios));

10 
ãr3
=(
ãrmios
 *)
	`mÆloc
((termios));

11 
ãr4
=(
ãrmios
 *)
	`mÆloc
((termios));

12 
fd
=
	`›íSîül
("/dev/ttyS1");

13 
	`£tSîül
(
fd
,
ãr1
,
ãr2
);

15 
	`tcgë©å
(0,
ãr3
);

16 
	`tcgë©å
(0,
ãr4
);

17 
ãr4
->
c_lÊag
 &~(
ICANON
 | 
ECHO
);

18 
	`tc£èâr
(0,
TCSANOW
,
ãr4
);

20 
i
=
	`ªadFromSîül
(
fd
);

21 
	`tc£èâr
(
fd
,
TCSANOW
,
ãr1
);

22 
	`˛o£
(
fd
);

23 
	`tc£èâr
(0,
TCSANOW
,
ãr3
);

24 
	`˛o£
(0);

25 
	`¥ötf
("\náfterÑesettingÅerminals\n");

26 
	`exô
(0);

28 
	}
}

	@Unix-Programming/serial/mw.c

3 
	~"£r1.h
"

5 
	$maö
(){

6 
fd
;

7 
ãrmios
 *
ﬁd£r
,*
√w£r
,*
ﬁdãr
,*
√wãr
;

8 
ﬁd£r
=(
ãrmios
 *)
	`mÆloc
((termios));

9 
√w£r
=(
ãrmios
 *)
	`mÆloc
((termios));

10 
ﬁdãr
=(
ãrmios
 *)
	`mÆloc
((termios));

11 
√wãr
=(
ãrmios
 *)
	`mÆloc
((termios));

12 
fd
=
	`›íSîül
("/dev/ttyS1");

13 
	`£tSîül
(
fd
,
ﬁd£r
,
√w£r
);

15 
	`tcgë©å
(0,
ﬁdãr
);

16 
	`tcgë©å
(0,
√wãr
);

17 
√wãr
->
c_lÊag
 &~(
ICANON
 | 
ECHO
);

18 
	`tc£èâr
(0,
TCSANOW
,
√wãr
);

19 
	`wrôeToSîül
(
fd
,'x');

20 
	`tc£èâr
(
fd
,
TCSANOW
,
ﬁd£r
);

21 
	`˛o£
(
fd
);

22 
	`tc£èâr
(0,
TCSANOW
,
ﬁdãr
);

23 
	`exô
(0);

24 
	}
}

	@Unix-Programming/serial/ser1.c

1 
	~"£r1.h
"

8 
	$›íSîül
(*
p‹t
){

9 
fd
;

10 
	`¥ötf
(" TryögÅÿ›í %s\n",
p‹t
);

11 
fd
 = 
	`›í
(
p‹t
, 
O_RDWR
 | 
O_NOCTTY
);

12 i‡(
fd
 <0) {

13 
	`≥º‹
(
p‹t
);

14 
	`exô
(-1);

16 
	`¥ötf
(" P‹à›íed fd = %d\n",
fd
);

17 (
fd
);

18 
	}
}

20 
	$£tSîül
(
fd
,
ãrmios
 *
ﬁdtio
, ãrmio†*
√wtio
){

22 
	`tcgë©å
(
fd
,
ﬁdtio
);

28 
√wtio
->
c_cÊag
 = 
BAUDRATE
 | 
CRTSCTS
 | 
CS8
 | 
CLOCAL
 | 
CREAD
;

41 
√wtio
->
c_iÊag
 = 
IGNPAR
;

46 
√wtio
->
c_oÊag
 = 0;

52 
√wtio
->
c_lÊag
 = 0;

55 
√wtio
->
c_cc
[
VMIN
]=1;

56 
√wtio
->
c_cc
[
VTIME
]=0;

59 
	`tcÊush
(
fd
, 
TCIFLUSH
);

60 
	`tc£èâr
(
fd
,
TCSANOW
,
√wtio
);

66 
	`tc£èâr
(1,
TCSANOW
,
√wtio
);

67 
	`¥ötf
(" serialÖort setting modified\n");

68 (
fd
);

69 
	}
}

76 
	$wrôeToSîül
(
fd
,
íd
){

77 
n
;

78 
c
;

80 
c
 = 
	`gëch¨
();

81 
	`¥ötf
(" ch¨Ñód = %c\n",
c
);

82 
n
 = 
	`wrôe
(
fd
,&
c
,1);

83 if–
n
 == -1)

84 
	`≥º‹
("serial:");

85 }
c
 !
íd
);

86 
	}
}

88 
	$ªadFromSîül
(
fd
){

89 
c
;

90 
	`ªad
(
fd
,&
c
,1);

91 
	`wrôe
(1,&
c
,1);

92  
c
;

93 
	}
}

99 
	$˛o£Sîül
(
fd
){

100 
	`˛o£
(
fd
);

101 
	}
}

107 
	$£rülCÀ¨
(
fd
)

108 
fd
;

110 
i
 = 0;

111 
c
[8],
buf„r
[1024];

113 
buf„r
[0] = '\0';

114 
	`ªad
(
fd
,
c
,1Ë> 0 && 
i
 < 1000) {

115 i‡(
c
[0] == 0)

116 
c
[0] = ' ';

117 
buf„r
[
i
++] = 
c
[0];

118 
buf„r
[
i
] = '\0';

120 
	}
}

	@Unix-Programming/serial/ser1.h

2 
	~<ãrmios.h
>

3 
	~<°dio.h
>

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

8 
	#BAUDRATE
 
B38400


	)

10 
	#FALSE
 0

	)

11 
	#TRUE
 1

	)

13 
›íSîül
(*);

15 
£tSîül
(,
ãrmios
 *, termios *);

19 
wrôeToSîül
(,);

22 
ªadFromSîül
();

24 
˛órSîül
();

	@Unix-Programming/signals/part1/killproc.c

8 
	~<sys/ty≥s.h
>

9 
	~<sig«l.h
>

10 
	~<°dio.h
>

12 
	$maö
(){

13 
pid_t
 
pid
;

14 
sig_no
;

15 
	`¥ötf
("ÉnterÅheÖid ofÅheÖrocess for whichÅhe signal\
Åo be sent:");

17 
	`sˇnf
("%d",&
pid
);

18 
	`¥ötf
("EnterÅhe signalÅhatÇeedÅo be sent:");

19 
	`sˇnf
("%d",&
sig_no
);

20 
	`kûl
(
pid
,
sig_no
);

21 
	`≥º‹
("Sig_res:");

22 
	}
}

	@Unix-Programming/signals/part1/proc1.c

5 
	$maö
(
¨gc
, *
¨gv
[]){

6 
no
,
c
=1;

7 
	`¥ötf
("Nÿo‡¨g†∑s£d = %d\n",
¨gc
);

8 
no
=0;no<
¨gc
;no++)

9 
	`¥ötf
("%s\n",
¨gv
[
no
]);

10 
	`¥ötf
(" This isÅhe firstÜine \n");

11 
	`¥ötf
("ÉnteráÇo :");

12 
	`sˇnf
("%d",&
no
);

13 if(
no
 <5)

14 
	`exô
(0);

15 
c
){

16 
	`¥ötf
(" I will continue forever \n");

18 
	`¥ötf
(" LastÜine of main\n");

19 
	}
}

	@Unix-Programming/signals/part1/readconf.c

6 
	~<sig«l.h
>

7 
	~<°dio.h
>

10 
FILE
 *
	gÂ
=
NULL
;

11 
	gu_«me
[100];

13 
	$sigh™d
(
signum
){

14 
Â
 = 
	`f›í
("./prog.conf","r");

15 
	`fsˇnf
(
Â
,"%s",
u_«me
);

16 
	`f˛o£
(
Â
);

17 
	}
}

19 
	$maö
(){

20 
	`sig«l
(1,
sigh™d
);

21 
Â
 = 
	`f›í
("./prog.conf","r");

22 
	`fsˇnf
(
Â
,"%s",
u_«me
);

23 
	`f˛o£
(
Â
);

25 
	`¥ötf
("Iám w‹kög f‹ Mr. %s\n",
u_«me
);

27 
	}
}

	@Unix-Programming/signals/part1/sigabort.c

6 
	~<sig«l.h
>

8 
	$sigh™d
–
sig_num
){

9 
	`¥ötf
("ábort signalÑec'd \n");

10 
	`¥ötf
(" We can useÅhisÅoÖerform clean up op's\n");

11 
	}
}

13 
	$maö
(){

14 
	`sig«l
(
SIGABRT
,
sigh™d
);

15 
	`¥ötf
(" someÅhing has gone worng\n");

16 
	`ab‹t
();

17 
	`¥ötf
(" can you seeÅhis\n");

18 
	}
}

	@Unix-Programming/signals/part1/sigalarm.c

7 
	~<sig«l.h
>

9 
	$sigh™d
(
signum
){

10 
	`¥ötf
(" I haveÅo wake up my bossÇow\n");

11 
	`Æ¨m
(5);

12 
	}
}

14 
	$maö
(){

15 
	`sig«l
(
SIGALRM
,
sigh™d
);

16 
	`Æ¨m
(5);

19 
	}
}

	@Unix-Programming/signals/part1/sighand.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sig«l.h
>

12 
	g⁄e_occuªd
 = 0;

13 
	gâ_occuªd
 = 0;

16 
	$sh_f‹_⁄e
–
signum
){

17 
⁄e_occuªd
 = 1;

18 
	`¥ötf
(" This is handler for signalÇo one \n");

19 
	}
}

22 
	$sh_f‹_â
–
signum
){

23 
â_occuªd
 =1;

24 
	`¥ötf
(" IámÇow h™dlög sig«»nÿ%d \n",
signum
);

25 
	}
}

27 
	$maö
(){

29 
	`sig«l
(1,
sh_f‹_⁄e
);

30 
	`sig«l
(2,
sh_f‹_â
);

31 
	`sig«l
(3,
sh_f‹_â
);

34 
	`¥ötf
(" Iám happyÇow , I will do same work forever\n");

35 if(
⁄e_occuªd
)

36 
bad_w‹k
;

38 
bad_w‹k
:

40 
	`¥ötf
(" Iám doing bad work for my survival\n");

41 if(
â_occuªd
)

42 
dõ
;

44 
dõ
:

46 
	`¥ötf
(" Iám goingÅo die some day \n");

48 
	}
}

	@Unix-Programming/signals/part1/sighand1.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sig«l.h
>

13 
	$sh_f‹_⁄e
–
signum
){

14 
	`¥ötf
(" This is handler for signalÇo one \n");

15 
	}
}

18 
	$sh_f‹_nöe
–
signum
){

19 
	`¥ötf
(" IámÇow h™dlög sig«»nÿ%d \n",
signum
);

20 
	}
}

22 
	$maö
(){

24 
	`sig«l
(1,
sh_f‹_⁄e
);

25 
	`sig«l
(
SIGKILL
,
sh_f‹_nöe
);

26 
	`≥º‹
("siginstall:");

27 
	`gëch¨
();

28 
	`gëch¨
();

31 
	`¥ötf
(" Iám happyÇow , I will do same work forever\n");

33 
	}
}

	@Unix-Programming/signals/part1/sigign.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sig«l.h
>

13 
	$maö
(){

15 
	`sig«l
(1,
SIG_IGN
);

16 
	`sig«l
(2,
SIG_DFL
);

17 
	`sig«l
(
SIGPIPE
,
SIG_DFL
);

20 
	`¥ötf
(" Iám happyÇow , I will do same work forever\n");

22 
	}
}

	@Unix-Programming/signals/part1/sigintr.c

7 
	~<sig«l.h
>

9 
	$sigh™d
(
signum
){

10 
	`¥ötf
("Interrupt signalÑec'd \n");

11 
	}
}

13 
	$maö
(){

14 
	`sig«l
(
SIGINT
,
sigh™d
);

17 
	}
}

	@Unix-Programming/signals/part1/test.c

1 
	~<°dio.h
>

2 
	$maö
(){

3 
	`¥ötf
("inápplication \n");

4 
	`gëch¨
();

5 
	}
}

	@Unix-Programming/signals/part2/sigpend.c

7 
	~<°dio.h
>

8 
	~<sig«l.h
>

11 
	$check_≥ndög_sigs
(
sig£t_t
 
s
){

12 
i
,
ªs
;

13 
i
 =1;i<5;i++){

14 
ªs
 = 
	`sigismembî
(&
s
,
i
);

15 if(
ªs
)

16 
	`¥ötf
(" sig«»%d i†≥ndög \n",
i
);

18 
	`¥ötf
(" sig«»%d i†nŸÖídög \n",
i
);

20 
	}
}

21 
	$sigh™d
(
no
){

22 
	`¥ötf
(" Iám in sighandler\n");

23 
	}
}

25 
	$maö
(){

26 
sig£t_t
 
s_£t
,
s
;

27 
	`sig«l
(1,
sigh™d
);

28 
	`sigem±y£t
(&
s_£t
);

29 
	`sigadd£t
(&
s_£t
,1);

30 
	`sig¥ocmask
(
SIG_BLOCK
|
SIG_SETMASK
,&
s_£t
,
NULL
);

31 
	`¥ötf
(" Send me signal oneánd seeÅheÉffectÇow \n");

32 
	`gëch¨
();

33 
	`gëch¨
();

34 
	`sig≥ndög
(&
s
);

35 
	`check_≥ndög_sigs
(
s
);

36 
	`gëch¨
();

37 
	`sig¥ocmask
(
SIG_UNBLOCK
,&
s_£t
,
NULL
);

38 
	`¥ötf
(" Now signalsáre unblocked \n");

40 
	}
}

	@Unix-Programming/signals/part2/sigset1.c

6 
	~<°dio.h
>

7 
	~<sig«l.h
>

9 
	$sigh™d
(
no
){

10 
	`¥ötf
(" Iám in sighandler\n");

11 
	}
}

12 
	$maö
(){

13 
sig£t_t
 
s_£t
;

14 
	`sig«l
(1,
sigh™d
);

15 
	`sigem±y£t
(&
s_£t
);

16 
	`sigadd£t
(&
s_£t
,1);

17 
	`≥º‹
("sig1");

18 
	`sigadd£t
(&
s_£t
,4);

19 
	`≥º‹
("sig4");

20 
	`sig¥ocmask
(
SIG_BLOCK
|
SIG_SETMASK
,&
s_£t
,
NULL
);

21 
	`≥º‹
("sigmask");

22 
	`¥ötf
(" Send me signal oneánd seeÅheÉffectÇow \n");

23 
	`gëch¨
();

24 
	`gëch¨
();

25 
	`sig¥ocmask
(
SIG_UNBLOCK
,&
s_£t
,
NULL
);

26 
	`¥ötf
(" Now signalsáre unblocked \n");

28 
	}
}

	@Unix-Programming/signals/part2/sigset2.c

7 
	~<°dio.h
>

8 
	~<sig«l.h
>

10 
	$check_blocked_sigs
(){

11 
i
,
ªs
;

12 
sig£t_t
 
s
;

13 
	`sig¥ocmask
(
SIG_BLOCK
,
NULL
,&
s
);

14 
i
 =1;i<5;i++){

15 
ªs
 = 
	`sigismembî
(&
s
,
i
);

16 if(
ªs
)

17 
	`¥ötf
(" sig«»%d i†blocked \n",
i
);

19 
	`¥ötf
(" sig«»%d i†nŸ blocked \n",
i
);

21 
	}
}

22 
	$maö
(){

23 
sig£t_t
 
s_£t
;

24 
	`sigem±y£t
(&
s_£t
);

25 
	`sigadd£t
(&
s_£t
,1);

26 
	`sigadd£t
(&
s_£t
,4);

27 
	`sig¥ocmask
(
SIG_BLOCK
|
SIG_SETMASK
,&
s_£t
,
NULL
);

28 
	`check_blocked_sigs
();

29 
	`sig¥ocmask
(
SIG_UNBLOCK
,&
s_£t
,
NULL
);

30 
	`check_blocked_sigs
();

31 
	}
}

	@Unix-Programming/signals/part2/sigset3.c

7 
	~<°dio.h
>

8 
	~<sig«l.h
>

10 
	$check_blocked_sigs
(){

11 
i
,
ªs
;

12 
sig£t_t
 
s
;

13 
	`sig¥ocmask
(
SIG_BLOCK
,
NULL
,&
s
);

14 
i
 =1;i<5;i++){

15 
ªs
 = 
	`sigismembî
(&
s
,
i
);

16 if(
ªs
)

17 
	`¥ötf
(" sig«»%d i†blocked \n",
i
);

19 
	`¥ötf
(" sig«»%d i†nŸ blocked \n",
i
);

21 
	}
}

22 
	$maö
(){

23 
sig£t_t
 
s_£t
;

24 
	`sigem±y£t
(&
s_£t
);

25 
	`sigadd£t
(&
s_£t
,1);

26 
	`sigadd£t
(&
s_£t
,4);

27 
	`sig¥ocmask
(
SIG_BLOCK
|
SIG_SETMASK
,&
s_£t
,
NULL
);

28 
	`check_blocked_sigs
();

29 
	`sigem±y£t
(&
s_£t
);

30 
	`sigadd£t
(&
s_£t
,2);

31 
	`sig¥ocmask
(
SIG_BLOCK
,&
s_£t
,
NULL
);

32 
	`check_blocked_sigs
();

33 
	}
}

	@Unix-Programming/signals/part2/sigset4.c

7 
	~<°dio.h
>

8 
	~<sig«l.h
>

10 
	$check_blocked_sigs
(){

11 
i
,
ªs
;

12 
sig£t_t
 
s
;

13 
	`sig¥ocmask
(
SIG_BLOCK
,
NULL
,&
s
);

14 
i
 =1;i<5;i++){

15 
ªs
 = 
	`sigismembî
(&
s
,
i
);

16 if(
ªs
)

17 
	`¥ötf
(" sig«»%d i†blocked \n",
i
);

19 
	`¥ötf
(" sig«»%d i†nŸ blocked \n",
i
);

21 
	}
}

22 
	$maö
(){

23 
sig£t_t
 
s_£t
;

24 
	`sigem±y£t
(&
s_£t
);

25 
	`sigadd£t
(&
s_£t
,1);

26 
	`sigadd£t
(&
s_£t
,4);

27 
	`sig¥ocmask
(
SIG_BLOCK
|
SIG_SETMASK
,&
s_£t
,
NULL
);

28 
	`check_blocked_sigs
();

29 
	`sigem±y£t
(&
s_£t
);

30 
	`sigadd£t
(&
s_£t
,2);

31 
	`sig¥ocmask
(
SIG_BLOCK
|
SIG_SETMASK
,&
s_£t
,
NULL
);

32 
	`check_blocked_sigs
();

33 
	}
}

	@Unix-Programming/signals/part2/sigset5.c

7 
	~<°dio.h
>

8 
	~<sig«l.h
>

10 
	$check_blocked_sigs
(){

11 
i
,
ªs
;

12 
sig£t_t
 
s
;

13 
	`sig¥ocmask
(
SIG_BLOCK
,
NULL
,&
s
);

14 
i
 =1;i<32;i++){

15 
ªs
 = 
	`sigismembî
(&
s
,
i
);

16 if(
ªs
)

17 
	`¥ötf
(" sig«»%d i†blocked \n",
i
);

19 
	`¥ötf
(" sig«»%d i†nŸ blocked \n",
i
);

21 
	}
}

22 
	$maö
(){

23 
sig£t_t
 
s_£t
;

24 
	`sigfûl£t
(&
s_£t
);

25 
	`sig¥ocmask
(
SIG_BLOCK
|
SIG_SETMASK
,&
s_£t
,
NULL
);

26 
	`check_blocked_sigs
();

27 
	}
}

	@c-code/Designs/layarch/desg1/gifhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

12 
	$ˇnH™dÀ
(*
fûíame
){

13 
Àn
;

14 *
íd
;

15 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

16 
Àn
 = 
	`°æí
(
fûíame
);

17 
íd
 = 
fûíame
 + (
Àn
 -3);

18 
	`¥ötf
("Énd = %s\n",
íd
);

21 if(
	`°rcmp
(
íd
,"gif") == 0)

22  
TRUE
;

24  
FALSE
;

25 
	}
}

27 
	$døwImage
(*
fûíame
){

28 if–
	`ˇnH™dÀ
(
fûíame
)){

29 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

30  
TRUE
;

33  
FALSE
;

34 
	}
}

36 
	$ßvefûe
(*
√wfûíame
 ){

37 
	`¥ötf
(" file saved by gif handler \n");

38  
TRUE
;

39 
	}
}

	@c-code/Designs/layarch/desg1/handlers.h

7 
	#TRUE
 1

	)

8 
	#FALSE
 0

	)

10 
ˇnH™dÀ
(*);

11 
døwImage
(*);

12 
ßvefûe
(*);

	@c-code/Designs/layarch/desg1/tiffhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

12 
	$ˇnH™dÀ
(*
fûíame
){

13 
Àn
;

14 *
íd
;

15 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

16 
Àn
 = 
	`°æí
(
fûíame
);

17 
íd
 = 
fûíame
 + (
Àn
 -3);

18 
	`¥ötf
("Énd = %s\n",
íd
);

21 if(
	`°rcmp
(
íd
,"tif") == 0)

22  
TRUE
;

24  
FALSE
;

25 
	}
}

27 
	$døwImage
(*
fûíame
){

28 if–
	`ˇnH™dÀ
(
fûíame
)){

29 
	`¥ötf
(" (TIFËHow i†thi†imagê%†\n",
fûíame
);

30  
TRUE
;

33  
FALSE
;

34 
	}
}

36 
	$ßvefûe
(*
√wfûíame
 ){

37 
	`¥ötf
(" file saved by TIF handler \n");

38  
TRUE
;

39 
	}
}

	@c-code/Designs/layarch/desg1/ui.c

7 
	~<°dio.h
>

8 
	~"h™dÀrs.h
"

9 
	gfûíame
[100];

11 
	$h™dÀMíuEvít
(
choi˚
){

12 
	`¥ötf
(" Enter fileÇame :");

13 
	`sˇnf
("%s",
fûíame
);

14 
choi˚
){

16 if(
	`ˇnH™dÀ
(
fûíame
))

17 
	`døwImage
(
fûíame
);

19 
	`¥ötf
(" we cannot handleÅhis file\n");

22 
	`ßvefûe
(
fûíame
);

25 
	`¥ötf
(" ----------------------------------\n");

26 
	}
}

28 
	$di•œyMíu
(){

29 
choi˚
;

31 
	`¥ötf
(" 1: Show Image \n");

32 
	`¥ötf
(" 2: Save Image \n");

33 
	`¥ötf
(" 3: Exit \n");

34 
	`¥ötf
(" Choice:");

35 
	`sˇnf
("%d",&
choi˚
);

36 if(
choi˚
 == 3)

37 
	`exô
(0);

38 
	`h™dÀMíuEvít
(
choi˚
);

40 
	}
}

42 
	$maö
(){

43 
	`di•œyMíu
();

44 
	}
}

	@c-code/Designs/layarch/desg2/bmphandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

13 
	$bmp_ˇnH™dÀ
(*
fûíame
){

14 
Àn
;

15 *
íd
;

16 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

17 
Àn
 = 
	`°æí
(
fûíame
);

18 
íd
 = 
fûíame
 + (
Àn
 -3);

19 
	`¥ötf
("Énd = %s\n",
íd
);

22 if(
	`°rcmp
(
íd
,"bmp") == 0)

23  
TRUE
;

25  
FALSE
;

26 
	}
}

28 
	$bmp_døwImage
(*
fûíame
){

29 if–
	`bmp_ˇnH™dÀ
(
fûíame
)){

30 
	`¥ötf
("(BMPËHow i†thi†imagê%†\n",
fûíame
);

31  
TRUE
;

34  
FALSE
;

35 
	}
}

37 
	$bmp_ßvefûe
(*
√wfûíame
 ){

38 
	`¥ötf
(" file saved by BMP handler \n");

39  
TRUE
;

40 
	}
}

42 
imageH™dÀr
 
	gbmph™dÀr
 = {

43 
bmp_ˇnH™dÀ
,

44 
bmp_døwImage
,

45 
bmp_ßvefûe


	@c-code/Designs/layarch/desg2/config.c

7 
	~<°dio.h
>

8 
	~"h™dÀrs.h
"

10 
imageH™dÀr
 *
	gimageh™dÀrs
[]={

11 &
tifh™dÀr
,

12 &
gifh™dÀr
,

13 &
jpgh™dÀr
,

14 &
bmph™dÀr
,

15 
NULL


	@c-code/Designs/layarch/desg2/gifhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

13 
	$gif_ˇnH™dÀ
(*
fûíame
){

14 
Àn
;

15 *
íd
;

16 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

17 
Àn
 = 
	`°æí
(
fûíame
);

18 
íd
 = 
fûíame
 + (
Àn
 -3);

19 
	`¥ötf
("Énd = %s\n",
íd
);

22 if(
	`°rcmp
(
íd
,"gif") == 0)

23  
TRUE
;

25  
FALSE
;

26 
	}
}

28 
	$gif_døwImage
(*
fûíame
){

29 if–
	`gif_ˇnH™dÀ
(
fûíame
)){

30 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

31  
TRUE
;

34  
FALSE
;

35 
	}
}

37 
	$gif_ßvefûe
(*
√wfûíame
 ){

38 
	`¥ötf
(" file saved by gif handler \n");

39  
TRUE
;

40 
	}
}

42 
imageH™dÀr
 
	ggifh™dÀr
 = {

43 
gif_ˇnH™dÀ
,

44 
gif_døwImage
,

45 
gif_ßvefûe


	@c-code/Designs/layarch/desg2/handlers.h

7 
	#TRUE
 1

	)

8 
	#FALSE
 0

	)

11 (*
	mˇnH™dÀ
) (*);

12 (*
	mdøwImage
)(*);

13 (*
	mßvefûe
)(*);

14 }
	timageH™dÀr
;

16 
imageH™dÀr
 *
imageh™dÀrs
[];

17 
imageH™dÀr
 
tifh™dÀr
;

18 
imageH™dÀr
 
gifh™dÀr
;

19 
imageH™dÀr
 
jpgh™dÀr
;

20 
imageH™dÀr
 
bmph™dÀr
;

	@c-code/Designs/layarch/desg2/jpghandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

13 
	$jpg_ˇnH™dÀ
(*
fûíame
){

14 
Àn
;

15 *
íd
;

16 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

17 
Àn
 = 
	`°æí
(
fûíame
);

18 
íd
 = 
fûíame
 + (
Àn
 -3);

19 
	`¥ötf
("Énd = %s\n",
íd
);

22 if(
	`°rcmp
(
íd
,"jpg") == 0)

23  
TRUE
;

25  
FALSE
;

26 
	}
}

28 
	$jpg_døwImage
(*
fûíame
){

29 if–
	`jpg_ˇnH™dÀ
(
fûíame
)){

30 
	`¥ötf
("(JPGËHow i†thi†imagê%†\n",
fûíame
);

31  
TRUE
;

34  
FALSE
;

35 
	}
}

37 
	$jpg_ßvefûe
(*
√wfûíame
 ){

38 
	`¥ötf
(" file saved by JPG handler \n");

39  
TRUE
;

40 
	}
}

42 
imageH™dÀr
 
	gjpgh™dÀr
 = {

43 
jpg_ˇnH™dÀ
,

44 
jpg_døwImage
,

45 
jpg_ßvefûe


	@c-code/Designs/layarch/desg2/pcxhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

13 
	$pcx_ˇnH™dÀ
(*
fûíame
){

14 
Àn
;

15 *
íd
;

16 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

17 
Àn
 = 
	`°æí
(
fûíame
);

18 
íd
 = 
fûíame
 + (
Àn
 -3);

19 
	`¥ötf
("Énd = %s\n",
íd
);

22 if(
	`°rcmp
(
íd
,"pcx") == 0)

23  
TRUE
;

25  
FALSE
;

26 
	}
}

28 
	$pcx_døwImage
(*
fûíame
){

29 if–
	`pcx_ˇnH™dÀ
(
fûíame
)){

30 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

31  
TRUE
;

34  
FALSE
;

35 
	}
}

37 
	$pcx_ßvefûe
(*
√wfûíame
 ){

38 
	`¥ötf
(" file saved byÖcx handler \n");

39  
TRUE
;

40 
	}
}

42 
imageH™dÀr
 
	gpcxh™dÀr
 = {

43 
pcx_ˇnH™dÀ
,

44 
pcx_døwImage
,

45 
pcx_ßvefûe


	@c-code/Designs/layarch/desg2/tifhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

13 
	$tif_ˇnH™dÀ
(*
fûíame
){

14 
Àn
;

15 *
íd
;

16 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

17 
Àn
 = 
	`°æí
(
fûíame
);

18 
íd
 = 
fûíame
 + (
Àn
 -3);

21 if(
	`°rcmp
(
íd
,"tif") == 0)

22  
TRUE
;

24  
FALSE
;

25 
	}
}

27 
	$tif_døwImage
(*
fûíame
){

28 if–
	`tif_ˇnH™dÀ
(
fûíame
)){

29 
	`¥ötf
("(TIFËHow i†thi†imagê%†\n",
fûíame
);

30  
TRUE
;

33  
FALSE
;

34 
	}
}

36 
	$tif_ßvefûe
(*
√wfûíame
 ){

37 
	`¥ötf
(" file saved by TIF handler \n");

38  
TRUE
;

39 
	}
}

41 
imageH™dÀr
 
	gtifh™dÀr
 = {

42 
tif_ˇnH™dÀ
,

43 
tif_døwImage
,

44 
tif_ßvefûe


	@c-code/Designs/layarch/desg2/ui.c

7 
	~<°dio.h
>

8 
	~"h™dÀrs.h
"

9 
	gfûíame
[100];

11 
	$h™dÀMíuEvít
(
choi˚
){

12 
	`¥ötf
(" Enter fileÇame :");

13 
	`sˇnf
("%s",
fûíame
);

14 
choi˚
){

16 
	`vdøwImage
(
fûíame
);

19 
	`vßvefûe
(
fûíame
);

22 
	`¥ötf
(" ----------------------------------\n");

23 
	}
}

25 
	$di•œyMíu
(){

26 
choi˚
;

28 
	`¥ötf
(" 1: Show Image \n");

29 
	`¥ötf
(" 2: Save Image \n");

30 
	`¥ötf
(" 3: Exit \n");

31 
	`¥ötf
(" Choice:");

32 
	`sˇnf
("%d",&
choi˚
);

33 if(
choi˚
 == 3)

34 
	`exô
(0);

35 
	`h™dÀMíuEvít
(
choi˚
);

37 
	}
}

39 
	$maö
(){

40 
	`di•œyMíu
();

41 
	}
}

	@c-code/Designs/layarch/desg2/viml.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~"h™dÀrs.h
"

12 
	$föd_h™dÀr
(* 
fûíame
){

13 
imageH™dÀr
 *
ih
;

14 
h™dÀno
 = 0;

15 
ih
 = 
imageh™dÀrs
[0];

16 
ih
 !
NULL
){

17 
	`¥ötf
(" vim»h™dÀÇÿ%dÖå = %d\n",
h™dÀno
,
ih
);

18 if(
ih
 ->
	`ˇnH™dÀ
(
fûíame
))

19  
h™dÀno
;

20 
h™dÀno
++;

21 
ih
 = 
imageh™dÀrs
[
h™dÀno
];

24 
	}
}

26 
	$vdøwImage
(*
fûíame
){

27 
imageH™dÀr
 *
ih
;

28 
h™dÀno
 = 0;

29 
h™dÀno
 = 
	`föd_h™dÀr
(
fûíame
);

30 
	`¥ötf
(" h™dÀÇÿ%d\n", 
h™dÀno
);

31 if–
h™dÀno
 == -1){

32 
	`¥ötf
(" We cannot handleÅhis kind of files\n");

33  
FALSE
;

35 
ih
=
imageh™dÀrs
[
h™dÀno
];

36 
ih
->
	`døwImage
(
fûíame
);

37  
FALSE
;

38 
	}
}

40 
	$vßvefûe
(*
√wfûíame
 ){

41 
imageH™dÀr
 *
ih
;

42 
h™dÀno
 = 0;

43 
h™dÀno
 = 
	`föd_h™dÀr
(
√wfûíame
);

44 if–
h™dÀno
 == -1){

45 
	`¥ötf
(" We cannot handleÅhis kind of files\n");

46  
FALSE
;

48 
ih
=
imageh™dÀrs
[
h™dÀno
];

49 
ih
->
	`ßvefûe
(
√wfûíame
);

50  
FALSE
;

51 
	}
}

	@c-code/Designs/layarch/desg3/bmphandler.c

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

13 
	$bmp_ˇnH™dÀ
(*
fûíame
){

14 
Àn
;

15 *
íd
;

16 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

17 
Àn
 = 
	`°æí
(
fûíame
);

18 
íd
 = 
fûíame
 + (
Àn
 -3);

19 
	`¥ötf
("Énd = %s\n",
íd
);

22 if(
	`°rcmp
(
íd
,"bmp") == 0)

23  
TRUE
;

25  
FALSE
;

26 
	}
}

28 
	$bmp_døwImage
(*
fûíame
){

29 if–
	`bmp_ˇnH™dÀ
(
fûíame
)){

30 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

31  
TRUE
;

34  
FALSE
;

35 
	}
}

37 
	$bmp_ßvefûe
(*
√wfûíame
 ){

38 
	`¥ötf
(" file saved by bmp handler \n");

39  
TRUE
;

40 
	}
}

42 
imageH™dÀr
 
	gbmph™dÀr
 = {

43 
bmp_ˇnH™dÀ
,

44 
bmp_døwImage
,

45 
bmp_ßvefûe


48 
	$_öô
(){

49 
	`¥ötf
("Ñegistering bmphandler \n");

50 
	`ªg_h™dÀr
(&
bmph™dÀr
);

52 
	}
}

54 
	$_föi
(){

55 
	`¥ötf
(" UnÑegistering bmphandler \n");

57 
	}
}

	@c-code/Designs/layarch/desg3/config.c

6 
	~<°dio.h
>

7 
	~<dlf˙.h
>

8 
	~"h™dÀrs.h
"

11 
imageH™dÀr
 *
	gimageh™dÀrs
[
SIZE
];

15 
	glibs
 = 0;

17 
	$ªg_h™dÀr
(
imageH™dÀr
 *
ih
){

19 
imageh™dÀrs
[
libs
] = 
ih
;

20 
libs
++;

21  
TRUE
;

22 
	}
}

23 
	$uƒeg_h™dÀr
(
no
){

24 
	`¥ötf
("Çot yet implemented\n");

25 
	}
}

29 
	$öô_h™dÀrs
(){

30 
FILE
 *
Â
;

31 *
s›å
;

32 
so_«me
[300];

33 
Â
=
	`f›í
("./config.txt","r");

34 if(
Â
==
NULL
){

35 
	`¥ötf
(" config.txtÇot found \n");

36  
FALSE
;

38 
	`fgës
(
so_«me
,300,
Â
);

39 !
	`„of
(
Â
)){

40 
so_«me
[
	`°æí
(so_name) - 1] = '\0';

41 
	`¥ötf
(" Lﬂdög .. %s\n",
so_«me
);

42 
s›å
 = 
	`dl›í
(
so_«me
,
RTLD_NOW
);

43 if(
s›å
 =
NULL
){

44 
	`¥ötf
("FailedÅoÜoadÜibrary\n");

45  
FALSE
;

47 
	`fgës
(
so_«me
,300,
Â
);

49  
TRUE
;

50 
	}
}

	@c-code/Designs/layarch/desg3/gifhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

13 
	$gif_ˇnH™dÀ
(*
fûíame
){

14 
Àn
;

15 *
íd
;

16 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

17 
Àn
 = 
	`°æí
(
fûíame
);

18 
íd
 = 
fûíame
 + (
Àn
 -3);

19 
	`¥ötf
("Énd = %s\n",
íd
);

22 if(
	`°rcmp
(
íd
,"gif") == 0)

23  
TRUE
;

25  
FALSE
;

26 
	}
}

28 
	$gif_døwImage
(*
fûíame
){

29 if–
	`gif_ˇnH™dÀ
(
fûíame
)){

30 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

31  
TRUE
;

34  
FALSE
;

35 
	}
}

37 
	$gif_ßvefûe
(*
√wfûíame
 ){

38 
	`¥ötf
(" file saved by gif handler \n");

39  
TRUE
;

40 
	}
}

42 
imageH™dÀr
 
	ggifh™dÀr
 = {

43 
gif_ˇnH™dÀ
,

44 
gif_døwImage
,

45 
gif_ßvefûe


48 
	$_öô
(){

49 
	`¥ötf
("Ñegistering gifhandler \n");

50 
	`ªg_h™dÀr
(&
gifh™dÀr
);

52 
	}
}

54 
	$_föi
(){

55 
	`¥ötf
(" UnÑegistering gifhandler \n");

57 
	}
}

	@c-code/Designs/layarch/desg3/handlers.h

7 
	#TRUE
 1

	)

8 
	#FALSE
 0

	)

11 (*
	mˇnH™dÀ
) (*);

12 (*
	mdøwImage
)(*);

13 (*
	mßvefûe
)(*);

14 }
	timageH™dÀr
;

16 
imageH™dÀr
 *
imageh™dÀrs
[];

17 
imageH™dÀr
 
tifh™dÀr
;

18 
imageH™dÀr
 
gifh™dÀr
;

	@c-code/Designs/layarch/desg3/jpghandler.c

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

13 
	$jpg_ˇnH™dÀ
(*
fûíame
){

14 
Àn
;

15 *
íd
;

16 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

17 
Àn
 = 
	`°æí
(
fûíame
);

18 
íd
 = 
fûíame
 + (
Àn
 -3);

19 
	`¥ötf
("Énd = %s\n",
íd
);

22 if(
	`°rcmp
(
íd
,"jpg") == 0)

23  
TRUE
;

25  
FALSE
;

26 
	}
}

28 
	$jpg_døwImage
(*
fûíame
){

29 if–
	`jpg_ˇnH™dÀ
(
fûíame
)){

30 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

31  
TRUE
;

34  
FALSE
;

35 
	}
}

37 
	$jpg_ßvefûe
(*
√wfûíame
 ){

38 
	`¥ötf
(" file saved by jpg handler \n");

39  
TRUE
;

40 
	}
}

42 
imageH™dÀr
 
	gjpgh™dÀr
 = {

43 
jpg_ˇnH™dÀ
,

44 
jpg_døwImage
,

45 
jpg_ßvefûe


48 
	$_öô
(){

49 
	`¥ötf
("Ñegistering jpghandler \n");

50 
	`ªg_h™dÀr
(&
jpgh™dÀr
);

52 
	}
}

54 
	$_föi
(){

55 
	`¥ötf
(" UnÑegistering jpghandler \n");

57 
	}
}

	@c-code/Designs/layarch/desg3/tifhandler.c

7 
	~<°dio.h
>

8 
	~<°rög.h
>

9 
	~"h™dÀrs.h
"

14 
	$tif_ˇnH™dÀ
(*
fûíame
){

15 
Àn
;

16 *
íd
;

17 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

18 
Àn
 = 
	`°æí
(
fûíame
);

19 
íd
 = 
fûíame
 + (
Àn
 -3);

20 
	`¥ötf
("Énd = %s\n",
íd
);

23 if(
	`°rcmp
(
íd
,"tif") == 0)

24  
TRUE
;

26  
FALSE
;

27 
	}
}

29 
	$tif_døwImage
(*
fûíame
){

30 if–
	`tif_ˇnH™dÀ
(
fûíame
)){

31 
	`¥ötf
("(TIFËHow i†thi†imagê%†\n",
fûíame
);

32  
TRUE
;

35  
FALSE
;

36 
	}
}

38 
	$tif_ßvefûe
(*
√wfûíame
 ){

39 
	`¥ötf
(" file saved by TIF handler \n");

40  
TRUE
;

41 
	}
}

43 
imageH™dÀr
 
	gtifh™dÀr
 = {

44 
tif_ˇnH™dÀ
,

45 
tif_døwImage
,

46 
tif_ßvefûe


49 
	$_öô
(){

50 
	`¥ötf
("ÑegisteringÅif handler\n");

51 
	`ªg_h™dÀr
(&
tifh™dÀr
);

53 
	}
}

55 
	$_föi
(){

56 
	`¥ötf
(" UnÑegisteringÅif handler \n");

57 
	}
}

	@c-code/Designs/layarch/desg3/ui.c

7 
	~<°dio.h
>

8 
	~"h™dÀrs.h
"

9 
	gfûíame
[100];

11 
	$h™dÀMíuEvít
(
choi˚
){

12 
	`¥ötf
(" Enter fileÇame :");

13 
	`sˇnf
("%s",
fûíame
);

14 
choi˚
){

16 
	`vdøwImage
(
fûíame
);

19 
	`vßvefûe
(
fûíame
);

22 
	`¥ötf
(" ----------------------------------\n");

23 
	}
}

25 
	$di•œyMíu
(){

26 
choi˚
;

28 
	`¥ötf
(" 1: Show Image \n");

29 
	`¥ötf
(" 2: Save Image \n");

30 
	`¥ötf
(" 3: Exit \n");

31 
	`¥ötf
(" Choice:");

32 
	`sˇnf
("%d",&
choi˚
);

33 if(
choi˚
 == 3)

34 
	`exô
(0);

35 
	`h™dÀMíuEvít
(
choi˚
);

37 
	}
}

39 
	$maö
(){

40 
	`öô_h™dÀrs
();

41 
	`di•œyMíu
();

42 
	}
}

	@c-code/Designs/layarch/desg3/viml.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~"h™dÀrs.h
"

12 
	$föd_h™dÀr
(* 
fûíame
){

13 
imageH™dÀr
 *
ih
;

14 
h™dÀno
 = 0;

15 
ih
 = 
imageh™dÀrs
[0];

16 
ih
 !
NULL
){

17 
	`¥ötf
(" vim»h™dÀÇÿ%dÖå = %d\n",
h™dÀno
,
ih
);

18 if(
ih
 ->
	`ˇnH™dÀ
(
fûíame
))

19  
h™dÀno
;

20 
h™dÀno
++;

21 
ih
 = 
imageh™dÀrs
[
h™dÀno
];

24 
	}
}

26 
	$vdøwImage
(*
fûíame
){

27 
imageH™dÀr
 *
ih
;

28 
h™dÀno
 = 0;

29 
h™dÀno
 = 
	`föd_h™dÀr
(
fûíame
);

30 
	`¥ötf
(" h™dÀÇÿ%d\n", 
h™dÀno
);

31 if–
h™dÀno
 == -1){

32 
	`¥ötf
(" We cannot handleÅhis kind of files\n");

33  
FALSE
;

35 
ih
=
imageh™dÀrs
[
h™dÀno
];

36 
ih
->
	`døwImage
(
fûíame
);

37  
FALSE
;

38 
	}
}

40 
	$vßvefûe
(*
√wfûíame
 ){

41 
imageH™dÀr
 *
ih
;

42 
h™dÀno
 = 0;

43 
h™dÀno
 = 
	`föd_h™dÀr
(
√wfûíame
);

44 if–
h™dÀno
 == -1){

45 
	`¥ötf
(" We cannot handleÅhis kind of files\n");

46  
FALSE
;

48 
ih
=
imageh™dÀrs
[
h™dÀno
];

49 
ih
->
	`ßvefûe
(
√wfûíame
);

50 
	}
}

	@c-code/Queue/QUEUE.C

	@c-code/Queue/QUEUE.H

8 
	~<°dio.h
>

9 
	#EQUE_FULL
 -1

	)

10 
	#EQUE_EMPTY
 -2

	)

12 
	squeue
{

13 *
	mª¨
;

14 *
	m‰⁄t
;

15 
	msize
;

16 * 
	mñemíts
;

17 * 
	míd
;

18 
	mn€
;

19 }
	tQUEUE
;

22 
QUEUE
 * 
öô_queue
–
size
);

23 
íqueue
(
QUEUE
 *
q
,
ôem
);

24 
dequeue
(
QUEUE
 *
q
);

	@c-code/Queue/TESTQ.C

7 
	~"queue.h
"

8 
î∫o
;

9 
	$maö
(){

10 
QUEUE
 * 
q
;

11 
ô
;

12 
q

	`öô_queue
(3);

13 
	`¥ötf
(" QUEUE = %x \n",
q
);

14 
ô
 = 
	`dequeue
(
q
);

15 
	`¥ötf
("î∫ÿ%d\n",
î∫o
);

16 
	`íqueue
(
q
,10);

17 
	`íqueue
(
q
,11);

18 
	`íqueue
(
q
,12);

19 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

20 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

21 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

22 
ô
 = 
	`dequeue
(
q
);

23 
	`¥ötf
("î∫ÿ%d\n",
î∫o
);

24 
	}
}

	@c-code/Queue/TESTQ1.C

7 
	~"queue.h
"

8 
î∫o
;

9 
	$maö
(){

10 
QUEUE
 * 
q
;

11 
ô
;

12 
q

	`öô_queue
(3);

13 
	`¥ötf
(" QUEUE = %x \n",
q
);

14 
	`íqueue
(
q
,1);

15 
	`íqueue
(
q
,11);

16 
	`íqueue
(
q
,12);

17 
	`íqueue
(
q
,13);

18 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

19 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

20 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

22 
ô
 = 
	`dequeue
(
q
);

23 
	`¥ötf
("î∫ÿ%d\n",
î∫o
);

24 
	}
}

	@c-code/Queue/TESTQ2.C

9 
	~"queue.h
"

10 
î∫o
;

11 
	$maö
(){

12 
QUEUE
 * 
q
;

13 
ô
;

14 
q

	`öô_queue
(3);

15 
	`¥ötf
(" QUEUE = %x \n",
q
);

16 
	`íqueue
(
q
,1);

17 
	`íqueue
(
q
,11);

18 
	`íqueue
(
q
,12);

19 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

20 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

21 
	`íqueue
(
q
,13);

22 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

23 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

24 
	`íqueue
(
q
,19);

25 
	`¥ötf
("ÉÀm = %d\n",
	`dequeue
(
q
));

26 
ô
 = 
	`dequeue
(
q
);

27 
	}
}

	@c-code/build/make1/gifhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

12 
	$ˇnH™dÀ
(*
fûíame
){

13 
Àn
;

14 *
íd
;

15 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

16 
Àn
 = 
	`°æí
(
fûíame
);

17 
íd
 = 
fûíame
 + (
Àn
 -3);

18 
	`¥ötf
("Énd = %s\n",
íd
);

21 if(
	`°rcmp
(
íd
,"gif") == 0)

22  
TRUE
;

24  
FALSE
;

25 
	}
}

27 
	$døwImage
(*
fûíame
){

28 if–
	`ˇnH™dÀ
(
fûíame
)){

29 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

30  
TRUE
;

33  
FALSE
;

34 
	}
}

36 
	$ßvefûe
(*
√wfûíame
 ){

37 
	`¥ötf
(" file saved by gif handler \n");

38  
TRUE
;

39 
	}
}

	@c-code/build/make1/handlers.h

7 
	#TRUE
 1

	)

8 
	#FALSE
 0

	)

10 
ˇnH™dÀ
(*);

11 
døwImage
(*);

12 
ßvefûe
(*);

	@c-code/build/make1/ui.c

7 
	~<°dio.h
>

8 
	~"h™dÀrs.h
"

9 
	gfûíame
[100];

11 
	$h™dÀMíuEvít
(
choi˚
){

12 
	`¥ötf
(" Enter fileÇame :");

13 
	`sˇnf
("%s",
fûíame
);

14 
choi˚
){

16 if(
	`ˇnH™dÀ
(
fûíame
))

17 
	`døwImage
(
fûíame
);

19 
	`¥ötf
(" we cannot handleÅhis file\n");

22 
	`ßvefûe
(
fûíame
);

25 
	`¥ötf
(" ----------------------------------\n");

26 
	}
}

28 
	$di•œyMíu
(){

29 
choi˚
;

31 
	`¥ötf
(" 1: Show Image \n");

32 
	`¥ötf
(" 2: Save Image \n");

33 
	`¥ötf
(" 3: Exit \n");

34 
	`¥ötf
(" Choice:");

35 
	`sˇnf
("%d",&
choi˚
);

36 if(
choi˚
 == 3)

37 
	`exô
(0);

38 
	`h™dÀMíuEvít
(
choi˚
);

40 
	}
}

42 
	$maö
(){

43 
	`di•œyMíu
();

44 
	}
}

	@c-code/build/make2/gifhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

12 
	$ˇnH™dÀ
(*
fûíame
){

13 
Àn
;

14 *
íd
;

15 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

16 
Àn
 = 
	`°æí
(
fûíame
);

17 
íd
 = 
fûíame
 + (
Àn
 -3);

18 
	`¥ötf
("Énd = %s\n",
íd
);

21 if(
	`°rcmp
(
íd
,"gif") == 0)

22  
TRUE
;

24  
FALSE
;

25 
	}
}

27 
	$døwImage
(*
fûíame
){

28 if–
	`ˇnH™dÀ
(
fûíame
)){

29 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

30  
TRUE
;

33  
FALSE
;

34 
	}
}

36 
	$ßvefûe
(*
√wfûíame
 ){

37 
	`¥ötf
(" file saved by gif handler \n");

38  
TRUE
;

39 
	}
}

	@c-code/build/make2/handlers.h

7 
	#TRUE
 1

	)

8 
	#FALSE
 0

	)

10 
ˇnH™dÀ
(*);

11 
døwImage
(*);

12 
ßvefûe
(*);

	@c-code/build/make2/ui.c

7 
	~<°dio.h
>

8 
	~"h™dÀrs.h
"

9 
	gfûíame
[100];

11 
	$h™dÀMíuEvít
(
choi˚
){

12 
	`¥ötf
(" Enter fileÇame :");

13 
	`sˇnf
("%s",
fûíame
);

14 
choi˚
){

16 if(
	`ˇnH™dÀ
(
fûíame
))

17 
	`døwImage
(
fûíame
);

19 
	`¥ötf
(" we cannot handleÅhis file\n");

22 
	`ßvefûe
(
fûíame
);

25 
	`¥ötf
(" ----------------------------------\n");

26 
	}
}

28 
	$di•œyMíu
(){

29 
choi˚
;

31 
	`¥ötf
(" 1: Show Image \n");

32 
	`¥ötf
(" 2: Save Image \n");

33 
	`¥ötf
(" 3: Exit \n");

34 
	`¥ötf
(" Choice:");

35 
	`sˇnf
("%d",&
choi˚
);

36 if(
choi˚
 == 3)

37 
	`exô
(0);

38 
	`h™dÀMíuEvít
(
choi˚
);

40 
	}
}

42 
	$maö
(){

43 
	`di•œyMíu
();

44 
	}
}

	@c-code/build/make3/gifhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

12 
	$ˇnH™dÀ
(*
fûíame
){

13 
Àn
;

14 *
íd
;

15 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

16 
Àn
 = 
	`°æí
(
fûíame
);

17 
íd
 = 
fûíame
 + (
Àn
 -3);

18 
	`¥ötf
("Énd = %s\n",
íd
);

21 if(
	`°rcmp
(
íd
,"gif") == 0)

22  
TRUE
;

24  
FALSE
;

25 
	}
}

27 
	$døwImage
(*
fûíame
){

28 if–
	`ˇnH™dÀ
(
fûíame
)){

29 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

30  
TRUE
;

33  
FALSE
;

34 
	}
}

36 
	$ßvefûe
(*
√wfûíame
 ){

37 
	`¥ötf
(" file saved by gif handler \n");

38  
TRUE
;

39 
	}
}

	@c-code/build/make3/handlers.h

7 
	#TRUE
 1

	)

8 
	#FALSE
 0

	)

10 
ˇnH™dÀ
(*);

11 
døwImage
(*);

12 
ßvefûe
(*);

	@c-code/build/make3/ui.c

7 
	~<°dio.h
>

8 
	~"h™dÀrs.h
"

9 
	gfûíame
[100];

11 
	$h™dÀMíuEvít
(
choi˚
){

12 
	`¥ötf
(" Enter fileÇame :");

13 
	`sˇnf
("%s",
fûíame
);

14 
choi˚
){

16 if(
	`ˇnH™dÀ
(
fûíame
))

17 
	`døwImage
(
fûíame
);

19 
	`¥ötf
(" we cannot handleÅhis file\n");

22 
	`ßvefûe
(
fûíame
);

25 
	`¥ötf
(" ----------------------------------\n");

26 
	}
}

28 
	$di•œyMíu
(){

29 
choi˚
;

31 
	`¥ötf
(" 1: Show Image \n");

32 
	`¥ötf
(" 2: Save Image \n");

33 
	`¥ötf
(" 3: Exit \n");

34 
	`¥ötf
(" Choice:");

35 
	`sˇnf
("%d",&
choi˚
);

36 if(
choi˚
 == 3)

37 
	`exô
(0);

38 
	`h™dÀMíuEvít
(
choi˚
);

40 
	}
}

42 
	$maö
(){

43 
	`di•œyMíu
();

44 
	}
}

	@c-code/build/make4/gif/gifhandler.c

7 
	~<°rög.h
>

8 
	~"h™dÀrs.h
"

12 
	$ˇnH™dÀ
(*
fûíame
){

13 
Àn
;

14 *
íd
;

15 
	`¥ötf
(" Checkög whëhî I c™ h™dÀ %†‹ÇŸ \n",
fûíame
);

16 
Àn
 = 
	`°æí
(
fûíame
);

17 
íd
 = 
fûíame
 + (
Àn
 -3);

18 
	`¥ötf
("Énd = %s\n",
íd
);

21 if(
	`°rcmp
(
íd
,"gif") == 0)

22  
TRUE
;

24  
FALSE
;

25 
	}
}

27 
	$døwImage
(*
fûíame
){

28 if–
	`ˇnH™dÀ
(
fûíame
)){

29 
	`¥ötf
(" How i†thi†imagê%†\n",
fûíame
);

30  
TRUE
;

33  
FALSE
;

34 
	}
}

36 
	$ßvefûe
(*
√wfûíame
 ){

37 
	`¥ötf
(" file saved by gif handler \n");

38  
TRUE
;

39 
	}
}

	@c-code/build/make4/gif/handlers.h

7 
	#TRUE
 1

	)

8 
	#FALSE
 0

	)

10 
ˇnH™dÀ
(*);

11 
døwImage
(*);

12 
ßvefûe
(*);

	@c-code/build/make4/handlers.h

7 
	#TRUE
 1

	)

8 
	#FALSE
 0

	)

10 
ˇnH™dÀ
(*);

11 
døwImage
(*);

12 
ßvefûe
(*);

	@c-code/build/make4/ui.c

7 
	~<°dio.h
>

8 
	~"h™dÀrs.h
"

9 
	gfûíame
[100];

11 
	$h™dÀMíuEvít
(
choi˚
){

12 
	`¥ötf
(" Enter fileÇame :");

13 
	`sˇnf
("%s",
fûíame
);

14 
choi˚
){

16 if(
	`ˇnH™dÀ
(
fûíame
))

17 
	`døwImage
(
fûíame
);

19 
	`¥ötf
(" we cannot handleÅhis file\n");

22 
	`ßvefûe
(
fûíame
);

25 
	`¥ötf
(" ----------------------------------\n");

26 
	}
}

28 
	$di•œyMíu
(){

29 
choi˚
;

31 
	`¥ötf
(" 1: Show Image \n");

32 
	`¥ötf
(" 2: Save Image \n");

33 
	`¥ötf
(" 3: Exit \n");

34 
	`¥ötf
(" Choice:");

35 
	`sˇnf
("%d",&
choi˚
);

36 if(
choi˚
 == 3)

37 
	`exô
(0);

38 
	`h™dÀMíuEvít
(
choi˚
);

40 
	}
}

42 
	$maö
(){

43 
	`di•œyMíu
();

44 
	}
}

	@c-code/loadtime/MANDL.C

7 
	~<°dio.h
>

8 
	~<dlf˙.h
>

10 
	$maö
(){

11 *
±r
;

12 *
h™dÀ
;

13 
i
;

14 (*
‚±r
)(,);

15 
±r
 = (*)
	`gëív
("SO_LIB");

16 if(
±r
 =
NULL
){

17 
	`¥ötf
(" Define SO_LIBÉnvironment var before invoking\n");

18 
	`exô
(1);

20 
h™dÀ
 = 
	`dl›í
(
±r
,
RTLD_NOW
);

21 if(
h™dÀ
 =
NULL
){

22 
	`¥ötf
(" FailedÅoÜoadÜibrary \n");

23 
	`exô
(2);

26 
‚±r
 = 
	`dlsym
(
h™dÀ
,"somefunc");

28 
i
(
‚±r
) (10,20);

29 
	`¥ötf
("Ñesu… o‡fun˘i⁄ = %d\n",
i
);

30 
	`dl˛o£
(
h™dÀ
);

31 
	}
}

	@c-code/loadtime/MYLIB.C

4 
	$somefunc
(
i
, 
j
){

5  
i
+
j
;

6 
	}
}

	@c-code/memcpy/MEM1.C

6 
	$mymemc›y
(*
§c
,*
de°
, 
cou¡
){

7 
	`__asm__
("movl 8(%ebp),%esi");

8 
	`__asm__
("movl 12(%ebp),%edi");

9 
	`__asm__
("movl 16(%ebp),%ecx");

10 
	`__asm__
("cld");

11 
	`__asm__
("repnz movsb ");

12 
	}
}

	@c-code/memcpy/MEM2.C

1 
	$mymemc›y
(*
§c
,*
de°
, 
cou¡
){

2 
i
;

3 
i
=0;i<
cou¡
;i++){

4 *
de°
=*
§c
;

5 
de°
++;

6 
§c
++;

8 
	}
}

	@c-code/memcpy/TEST1.C

6 
	$maö
(){

7 
a
[10]="abcdefghi";

8 
b
[10];

9 
i
;

11 
	`mymemc›y
(
a
,
b
,10);

12 
	`¥ötf
("%s\n",
b
);

13 
	}
}

	@c-code/memcpy/TEST2.C

1 
	$maö
(){

2 
a
[10]="abcdefghi";

3 
b
[10];

4 
l
;

5 
l
=0;l<9999999;l++)

6 
	`mymemc›y
(
a
,
b
,10);

7 
	`¥ötf
("%s\n",
b
);

8 
	}
}

	@c-code/pointers/part1/five.c

5 
	$maö
(){

6 
a
[5][10] = {"line one","lineÅwo","lineÅhree","line four","end"};

7 *
k
[] ={"one" ,"two","three","four"};

8 **
±r
;

9 
i
;

10 
±r
 = &
k
[0];

11 
i
=0;i<3;i++){

12 
	`¥ötf
("%s\n",*
±r
);

13 
±r
++;

15 
	}
}

	@c-code/pointers/part1/four.c

5 *
	gk
[] ={"one" ,"two","three","four"};

6 
	$maö
(){

8 
a
[5][10] = {"line one","lineÅwo","lineÅhree","line four","end"};

9 
i
;

10 
i
=0;i<3;i++){

11 
	`¥ötf
(" k[%d] = %x \n",
i
,
k
[i]);

12 
	`¥ötf
("%s\n",
k
[
i
]);

14 
	}
}

	@c-code/pointers/part1/one.c

5 
	$maö
(){

6 *
±r
;

7 **
±π›å
;

8 
p
;

9 
p
=9;

10 
±r
=&
p
;

11 
±π›å
=&
±r
;

12 
	`¥ötf
("ádªs†o‡±∏%x\n",
±π›å
);

13 
	`¥ötf
("ádªs†o‡±π›å = %x\n",&
±π›å
);

14 
	`¥ötf
("ádªs†o‡∞%x\n",
±r
);

15 
	`¥ötf
–" c⁄ã¡ o‡*±∏%x\n",*
±r
);

16 
	`¥ötf
–" c⁄ã¡ o‡*±π›å = %x\n",*
±π›å
);

17 
	`¥ötf
–" c⁄ã¡ o‡**±π›å = %x\n",**
±π›å
);

18 
	}
}

	@c-code/pointers/part1/six.c

5 
	$maö
(){

7 *
k
[] ={"one" ,"four","end"};

8 **
±r
;

9 
i
;

10 
±r
 = &
k
[0];

11 
	`°rcmp
(*
±r
,"end")!=0){

12 
	`¥ötf
("%s\n",*
±r
);

13 
±r
++;

15 
	}
}

	@c-code/pointers/part1/three.c

5 
	$maö
(){

7 
a
[] = "abcdef";

8 *
k
;

9 
k
=&
a
[0];

10 *
k
 != '\0')

11 
	`putch¨
(*
k
++);

12 
	}
}

	@c-code/pointers/part1/two.c

5 
	$maö
(){

6 *
±r
;

7 **
±π›å
;

8 
x
,
p
;

9 
p
=9;

10 
±r
=&
p
;

11 
±π›å
=&
±r
;

12 (**
±π›å
)++;

13 
	`¥ötf
(" vÆuêo‡**±π›å = %d\n",**
±π›å
);

14 
	`¥ötf
–"±π›å = %x\n",
±π›å
);

15 
±π›å
++;

16 
	`¥ötf
–"±π›å = %x\n",
±π›å
);

17 
±π›å
--;

18 
	`¥ötf
("Öå = %x\n",
±r
);

19 (*
±π›å
) ++;

20 
	`¥ötf
("Öå = %x\n",
±r
);

21 (*
±π›å
) --;

22 
x
=**
±π›å
;

23 
	`¥ötf
–"±π›å = %x x=%d\n",
±π›å
,
x
);

24 
x
=++**
±π›å
;

26 
	`¥ötf
–"±π›å = %x x=%d\n",
±π›å
,
x
);

27 
	}
}

	@c-code/pointers/part2/FOUR.C

6 
	$noof°r
–**
±πo°r
){

7 
no°rögs
=0;

8  
	`°rcmp
(*
±πo°r
,"end") !=0){

9 
no°rögs
++;

10 
±πo°r
++;

12  
no°rögs
;

13 
	}
}

16 
	$maö
(){

17 *
°rögs
[10]={"abc","cdf","xyz","mno","end"};

18 *
°rögs1
[10]={"abc","mno","end"};

19 **
s
=
°rögs
;

20 
	`¥ötf
(" NÿO‡Såög†%d\n",
	`noof°r
(
s
));

21 
	`¥ötf
(" NÿO‡Såög†%d\n",
	`noof°r
(
°rögs1
));

23 
	}
}

	@c-code/pointers/part2/ONE.C

7 
	$sw≠
 ( 
a
, 
b
){

8 
ãmp
;

9 
ãmp
 = 
a
;

10 
a
=
b
;

11 
b
=
ãmp
;

12 
	}
}

13 
	$maö
(){

14 
x
=10,
y
=20;

15 
	`¥ötf
(" bef‹êsw≠ x = %d y = %d\n",
x
,
y
);

16 
	`sw≠
(
x
,
y
);

17 
	`¥ötf
(" A·î sw≠ x = %d y = %d\n",
x
,
y
);

18 
	}
}

	@c-code/pointers/part2/THREE.C

5 
	$Ànof°r
–*
±πo°r
){

6 
Àn
=0;

7 *
±πo°r
 !='\0'){

8 
Àn
++;

9 
±πo°r
++;

11  
Àn
;

12 
	}
}

15 
	$maö
(){

16 *
s
 = "this isá string";

17 *
s1
 = " This isánother String";

18 
	`¥ötf
(" %d\n",
s
);

19 
	`¥ötf
("Üígth o‡fú° Såög = %d\n", 
	`Ànof°r
(
s
));

20 
	`¥ötf
("Üígth o‡£c⁄d Såög = %d\n", 
	`Ànof°r
(
s1
));

21 
	`¥ötf
("Üígth o‡Thúd Såög = %d\n", 
	`Ànof°r
("xyz"));

22 
	}
}

	@c-code/pointers/part2/TWO.C

7 
	$sw≠
 ( *
a
, * 
b
){

8 
ãmp
;

9 
ãmp
 = *
a
;

10 *
a
=*
b
;

11 *
b
=
ãmp
;

12 
	}
}

13 
	$maö
(){

14 
x
=10,
y
=20;

15 
	`¥ötf
(" bef‹êsw≠ x = %d y = %d\n",
x
,
y
);

16 
	`sw≠
(&
x
,&
y
);

17 
	`¥ötf
(" A·î sw≠ x = %d y = %d\n",
x
,
y
);

18 
	}
}

	@c-code/pointers/part3/FOUR.C

5 
	$maö
(){

6 *
p
;

7 
i
;

8 
i
=0;

9 
i
 <100){

10 
p
 = (*Ë
	`mÆloc
(10000000);

11 
	`¥ötf
("%x check memm≠ i¿/¥o¯\n",
p
);

12 
	`gëch¨
();

14 
	}
}

	@c-code/pointers/part3/ONE.C

6 
	$maö
(){

7 *
p
;

8 
p
=100;

9 
p
++;

10 
	`¥ötf
("Ö = %d\n",
p
);

11 
	}
}

	@c-code/pointers/part3/THREE.C

6 
	$maö
(){

7 *
±r
,*
dummy
;

8 
±r
 = (*Ë
	`mÆloc
(());

9 
dummy
 = (*Ë
	`mÆloc
(());

10 
	`¥ötf
("Öå = %x\n",
±r
);

11 
	`¥ötf
(" dummy = %x\n",
dummy
);

12 *
±r
=1;

13 
	`¥ötf
(" *±∏%d\n",*
±r
);

14 
±r
 = (*Ë
	`ªÆloc
(ptr,32);

15 
	`¥ötf
("Öå = %x\n",
±r
);

16 
	`¥ötf
(" *±∏%d\n",*
±r
);

17 
	}
}

	@c-code/pointers/part3/TWO.C

6 
	$maö
(){

7 *
p
;

8 *
±r
;

9 
p
 = (*)
	`mÆloc
(4);

10 
±r
 = (*Ë
p
;

11 
	`¥ötf
("Öå = %x\n",
±r
);

12 *
±r
=9898;

13 
	`¥ötf
(" *±∏%d\n",*
±r
);

14 
	`gëch¨
();

15 
	}
}

	@c-code/pointers/part4/FIVE.C

5 
	~<°dio.h
>

6 
	#TABSIZE
 10

	)

8 
	semp
{

9 *
	m«me
;

10 
	mem≤o
;

11 
	mßl
;

12 
	mdïäo
;

13 }
	tEmp
;

15 
Emp
 *
	gEmpHashTabÀ
[
TABSIZE
];

20 
	$hashcode
–* 
«me
){

21 
code
=0;

22 *
«me
 != '\0'){

23 
code
 +=*
«me
;

24 
«me
++;

26  
code
;

27 
	}
}

28 
	$addtoEmpTabÀ
(){

29 
c
[100];

30 
hashcd
;

31 
Emp
 * 
ãmp
;

32 
	`¥ötf
(" Enter Employee Name:");

33 
	`sˇnf
("%s",
c
);

34 
hashcd
=
	`hashcode
(
c
);

35 
	`¥ötf
(" Hash Codê=%d \n",
hashcd
);

36 
hashcd
 = hashcd % 
TABSIZE
;

37 
	`¥ötf
(" Hash Codê=%d \n",
hashcd
);

38 if(
EmpHashTabÀ
[
hashcd
] !=
NULL
){

39 
	`¥ötf
(" AlreadyánÉmployee with same hash codeÉxists\n");

42 
ãmp
 = (
Emp
 *Ë
	`mÆloc
((Emp));

43 
	`¥ötf
(" EnterÇo :");

44 
	`sˇnf
("%d",&
ãmp
->
em≤o
);

46 
ãmp
->
«me
 = (*Ë
	`mÆloc
(
	`°æí
(
c
)+1);

47 
	`mem˝y
(
ãmp
->
«me
,
c
,
	`°æí
(c) + 1);

48 
EmpHashTabÀ
[
hashcd
]=
ãmp
;

49 
	`¥ötf
("%†InfÿSt‹ed\n",
EmpHashTabÀ
[
hashcd
]->
«me
);

50 
	}
}

52 
	$maö
(){

53 
n€mp
,
i
;

54  
i
 =0 ; i<
TABSIZE
;i++)

55 
EmpHashTabÀ
[
i
]=
NULL
;

56 
	`¥ötf
(" EnterÇo ofÉmployees:");

57 
	`sˇnf
("%d",&
n€mp
);

58 
i
=0;i<
n€mp
;i++)

59 
	`addtoEmpTabÀ
();

60 
	}
}

	@c-code/pointers/part4/FOUR.C

5 
	~<°dio.h
>

7 
	semp
{

8 
	mem≤o
;

9 
	mßl
;

10 
	mdïäo
;

11 
emp
 *
	m√xãmp
;

12 
emp
 *
	m¥evemp
;

13 }
	tEmp
;

15 
Emp
 * 
	$addEmpToLi°
(
Emp
 *
t›
){

16 
Emp
 *
ãmp
;

19 
t›
->
√xãmp
 !=
NULL
)

20 
t›
Ò›->
√xãmp
;

21 
ãmp
=(
Emp
*Ë
	`mÆloc
((Emp));

22 if(
ãmp
 =
NULL
)

23  
t›
;

24 
	`¥ötf
(" EnterÉmpno:");

25 
	`sˇnf
("%d",&
ãmp
->
em≤o
);

26 
	`¥ötf
(" Enter sal:");

27 
	`sˇnf
("%d",&
ãmp
->
ßl
);

28 
t›
->
√xãmp
=
ãmp
;

29 
ãmp
->
√xãmp
=
NULL
;

30 
ãmp
->
¥evemp
=
t›
;

31  
ãmp
;

32 
	}
}

33 
	$di•œyFromT›
(
Emp
 * 
t›
){

34 
	`¥ötf
("================\n");

35  
t›
->
√xãmp
 !
NULL
){

36 
t›
Ò›->
√xãmp
;

37 
	`¥ötf
(" Nÿ%d\n",
t›
->
em≤o
);

38 
	`¥ötf
(" SÆ =%d\n",
t›
->
ßl
);

39 
	`¥ötf
("================\n");

41 
	}
}

42 
	$di•œyFromBŸtom
(
Emp
 * 
bŸtom
){

43 
	`¥ötf
("================\n");

44  
bŸtom
->
¥evemp
!
NULL
){

45 
	`¥ötf
(" Nÿ%d\n",
bŸtom
->
em≤o
);

46 
	`¥ötf
(" SÆ =%d\n",
bŸtom
->
ßl
);

47 
	`¥ötf
("================\n");

48 
bŸtom
=bŸtom->
¥evemp
;

50 
	}
}

51 
	$maö
(){

52 
n€mp
,
i
;

53 
Emp
 *
hód
;

54 
Emp
 *
èû
;

55 
hód
 = (
Emp
*)
	`mÆloc
((Emp));

56 
èû
=
hód
;

57 if(
hód
==
NULL
){

58 
	`¥ötf
("Öroblem inállocation memory\n");

59 
	`exô
(1);

61 
hód
->
√xãmp
=
NULL
;

62 
hód
->
¥evemp
=
NULL
;

63 
	`¥ötf
("ÉnterÇo ofÉmployees\n");

64 
	`sˇnf
("%d",&
n€mp
);

65 
i
=0;i<
n€mp
;i++)

66 
èû
=
	`addEmpToLi°
(
hód
);

67 
	`di•œyFromT›
(
hód
);

68 
	`¥ötf
(" List from Bottom \n");

69 
	`di•œyFromBŸtom
(
èû
);

70 
	}
}

	@c-code/pointers/part4/SIX.C

5 
	~<°dio.h
>

6 
	#TABSIZE
 10

	)

8 
	semp
{

9 *
	m«me
;

10 
	mem≤o
;

11 
	mßl
;

12 
	mdïäo
;

13 
emp
 *
	m√xt
;

14 }
	tEmp
;

16 
Emp
 *
	gEmpHashTabÀ
[
TABSIZE
];

21 
	$hashcode
–* 
«me
){

22 
code
=0;

23 *
«me
 != '\0'){

24 
code
 +=*
«me
;

25 
«me
++;

27  
code
;

28 
	}
}

29 
	$addtoEmpTabÀ
(){

30 
c
[100];

31 
hashcd
;

32 
Emp
 * 
ãmp
,*
dummy
;

33 
	`¥ötf
(" Enter Employee Name:");

34 
	`sˇnf
("%s",
c
);

35 
hashcd
=
	`hashcode
(
c
);

36 
hashcd
 = hashcd % 
TABSIZE
;

37 
ãmp
 = (
Emp
 *Ë
	`mÆloc
((Emp));

38 
	`¥ötf
(" EnterÇo :");

39 
	`sˇnf
("%d",&
ãmp
->
em≤o
);

41 
ãmp
->
«me
 = (*Ë
	`mÆloc
(
	`°æí
(
c
)+1);

42 
	`mem˝y
(
ãmp
->
«me
,
c
,
	`°æí
(c) +1);

43 
ãmp
->
√xt
=
NULL
;

44 if(
EmpHashTabÀ
[
hashcd
] =
NULL
)

45 
EmpHashTabÀ
[
hashcd
] = 
ãmp
;

47 
dummy
 = 
EmpHashTabÀ
[
hashcd
];

48 
dummy
 ->
√xt
 !
NULL
)

49 
dummy
 = dummy->
√xt
;

51 
dummy
->
√xt
 = 
ãmp
;

52 
	`¥ötf
(" Collision Resolved by using Chaining\n");

54 
	`¥ötf
("%†InfÿSt‹ed\n",
EmpHashTabÀ
[
hashcd
]->
«me
);

55 
	}
}

56 
	$Di•œyHT
(){

57 
i
;

58 
Emp
 *
dummy
;

59 
	`¥ötf
("===================================\n");

60 
i
 =0; i<
TABSIZE
;i++){

61 
	`¥ötf
("%d ",
i
);

62 
dummy
 = 
EmpHashTabÀ
[
i
];

63 
dummy
!=
NULL
){

64 
	`¥ötf
("%†",
dummy
->
«me
);

65 
dummy
=dummy->
√xt
;

67 
	`¥ötf
("\n");

69 
	`¥ötf
("===================================\n");

70 
	}
}

71 
	$maö
(){

72 
n€mp
,
i
;

73  
i
 =0 ; i<
TABSIZE
;i++)

74 
EmpHashTabÀ
[
i
]=
NULL
;

75 
	`¥ötf
(" EnterÇo ofÉmployees:");

76 
	`sˇnf
("%d",&
n€mp
);

77 
i
=0;i<
n€mp
;i++)

78 
	`addtoEmpTabÀ
();

79 
	`Di•œyHT
();

80 
	}
}

	@c-code/pointers/part4/STRUCT.C

6 
	ma
;

7 
	mb
;

8 
	mc
;

9 }
	tMyDT
;

11 
	$maö
(){

12 
MyDT
 
m1
;

13 
MyDT
 *
±r
;

14 
m1
.
a
=10;

15 
m1
.
b
=20;

16 
m1
.
c
=30;

17 
±r
=&
m1
;

19 
	`¥ötf
(" vÆuêo‡®%d\n",(*
±r
).
a
);

20 
	`¥ötf
(" vÆuêo‡b = %d\n",
±r
->
b
);

23 
	`¥ötf
(" vÆuêo‡¯%d\n",
±r
->
c
);

24 
	}
}

	@c-code/pointers/part4/STRUCT1.C

5 
	sabc
{

6 
	ma
;

7 
	mb
;

8 
	mc
;

9 
abc
 *
	m±r
;

10 }
	tMyDT
;

12 
	$maö
(){

13 
MyDT
 
m1
;

14 
m1
.
a
=10;

15 
m1
.
b
=20;

16 
m1
.
c
=30;

17 
m1
.
±r
=&m1;

18 
	`¥ötf
(" vÆuêo‡®%d\n",(*
m1
.
±r
).
a
);

19 
	`¥ötf
(" vÆuêo‡b = %d\n",
m1
.
±r
->
b
);

22 
	`¥ötf
(" vÆuêo‡¯%d\n",
m1
.
±r
->
c
);

23 
	}
}

	@c-code/pointers/part4/THREE.C

5 
	~<°dio.h
>

7 
	semp
{

8 
	mem≤o
;

9 
	mßl
;

10 
	mdïäo
;

11 
emp
 *
	m√xãmp
;

12 }
	tEmp
;

14 
Emp
 * 
	$addEmpToLi°
(
Emp
 *
t›
){

15 
Emp
 *
ãmp
;

18 
t›
->
√xãmp
 !=
NULL
)

19 
t›
Ò›->
√xãmp
;

20 
ãmp
=(
Emp
*Ë
	`mÆloc
((Emp));

21 if(
ãmp
 =
NULL
)

22  
ãmp
;

23 
	`¥ötf
(" EnterÉmpno:");

24 
	`sˇnf
("%d",&
ãmp
->
em≤o
);

25 
	`¥ötf
(" Enter sal:");

26 
	`sˇnf
("%d",&
ãmp
->
ßl
);

27 
t›
->
√xãmp
=
ãmp
;

28 
ãmp
->
√xãmp
=
NULL
;

29  
ãmp
;

30 
	}
}

31 
	$Di•œyEmpLi°
(
Emp
 * 
t›
){

32 
	`¥ötf
("================\n");

33  
t›
->
√xãmp
 !
NULL
){

34 
t›
Ò›->
√xãmp
;

35 
	`¥ötf
(" Nÿ%d\n",
t›
->
em≤o
);

36 
	`¥ötf
(" SÆ =%d\n",
t›
->
ßl
);

37 
	`¥ötf
("================\n");

39 
	}
}

40 
	$maö
(){

41 
n€mp
,
i
;

42 
Emp
 *
t›
;

43 
t›
 = (
Emp
*)
	`mÆloc
((Emp));

44 if(
t›
==
NULL
){

45 
	`¥ötf
("Öroblem inállocation memory\n");

46 
	`exô
(1);

48 
t›
->
√xãmp
=
NULL
;

49 
	`¥ötf
("ÉnterÇo ofÉmployees\n");

50 
	`sˇnf
("%d",&
n€mp
);

51 
i
=0;i<
n€mp
;i++)

52 
	`addEmpToLi°
(
t›
);

53 
	`Di•œyEmpLi°
(
t›
);

54 
	}
}

	@c-code/pointers/part5/CHKFREED.C

9 
	$buggyfun˘i⁄
(){

10 * 
öçå
;

11 
öçå
 = (*Ë
	`mÆloc
( ());

12 *
öçå
=55;

13 
	`¥ötf
(" i¡±∏poöt†tÿ%x\n",
öçå
);

14 
	`‰ì
(
öçå
);

15 
	`¥ötf
(" i¡±∏poöt†tÿ%x\n",
öçå
);

16 *
öçå
=99;

18 
	}
}

21 
	$maö
(){

22 
	`buggyfun˘i⁄
();

23 
	}
}

	@c-code/pointers/part5/OVERRUN.C

8 
	$buggyfun˘i⁄
(){

9 * 
öçå
;

10 
i
;

12 
öçå
 = (*Ë
	`mÆloc
( () *4);

13 
i
=0;i<5;i++){

14 *
öçå
 = 55;

15 
öçå
++;

18 
	}
}

21 
	$maö
(){

22 
	`buggyfun˘i⁄
();

23 
	}
}

	@c-code/pointers/part5/four.c

5 
	$maö
(){

6 *
p
;

7 
i
;

8 
i
=0;

9 
i
 <100){

10 
p
 = (*Ë
	`mÆloc
(10000000);

11 
	`¥ötf
("%x check memm≠ i¿/¥o¯\n",
p
);

12 
	`gëch¨
();

14 
	}
}

	@c-code/pointers/part5/nooverrun.c

8 
	$buggyfun˘i⁄
(){

9 * 
öçå
;

10 
i
;

12 
öçå
 = (*Ë
	`mÆloc
( () *4);

13 
i
=0;i<4;i++){

14 *
öçå
 = 55;

15 
öçå
++;

18 
	}
}

21 
	$maö
(){

22 
	`buggyfun˘i⁄
();

23 
	}
}

	@c-code/pointers/part5/one.c

6 
	$maö
(){

7 *
p
;

8 
p
=100;

9 
p
++;

10 
	`¥ötf
("Ö = %d\n",
p
);

11 
	}
}

	@c-code/pointers/part5/three.c

6 
	$maö
(){

7 *
±r
,*
dummy
;

8 
±r
 = (*Ë
	`mÆloc
(());

9 
dummy
 = (*Ë
	`mÆloc
(());

10 
	`¥ötf
("Öå = %x\n",
±r
);

11 
	`¥ötf
(" dummy = %x\n",
dummy
);

12 *
±r
=1;

13 
	`¥ötf
(" *±∏%d\n",*
±r
);

14 
±r
 = (*Ë
	`ªÆloc
(ptr,32);

15 
	`¥ötf
("Öå = %x\n",
±r
);

16 
	`¥ötf
(" *±∏%d\n",*
±r
);

17 
	}
}

	@c-code/pointers/part5/two.c

6 
	$maö
(){

7 *
p
;

8 *
±r
;

9 
p
 = (*)
	`mÆloc
(4);

10 
±r
 = (*Ë
p
;

11 
	`¥ötf
("Öå = %x\n",
±r
);

12 *
±r
=9898;

13 
	`¥ötf
(" *±∏%d\n",*
±r
);

14 
	`gëch¨
();

15 
	}
}

	@c-code/pointers/part5/underrun.c

8 
	$buggyfun˘i⁄
(){

9 * 
öçå
;

10 
i
;

12 
öçå
 = (*Ë
	`mÆloc
( () *4);

13 
i
=0;i<2;i++){

14 *
öçå
 = 55;

15 
öçå
--;

18 
	}
}

21 
	$maö
(){

22 
	`buggyfun˘i⁄
();

23 
	}
}

	@c-code/stack/BIN/ABC.C

4 
	$maö
(){

5 
i
=0;i<10;i++){

7 
	}
}

	@c-code/stack/BIN/GENSTK.C

7 
	~"gí°k.h
"

10 
	g°kîr
;

11 
DATATYPE
 
	g°ack
[
STACK_SIZE
];

12 
	gt›
;

15 
	$öô_°ack
(){

16 
t›
=-1;

17 
°kîr
=0;

18 
	}
}

20 
	$push
(
DATATYPE
 
ôem
){

21 
°kîr
=0;

23 if(
t›
 =
STACK_SIZE
 -1){

24 
°kîr
=
ERR_FULL
;

27 
t›
++;

28 
°ack
[
t›
]=
ôem
;

29 
	}
}

32 
DATATYPE
 
	$p›
(){

33 
DATATYPE
 
ôem
;

34 
°kîr
=0;

36 if(
t›
==-1){

37 
°kîr
=
ERR_EMPTY
;

40 
ôem
 = 
°ack
[
t›
];

41 
t›
--;

42  
ôem
;

43 
	}
}

	@c-code/stack/BIN/GENSTK.H

6 
	#DATATYPE
 

	)

9 
	#STACK_SIZE
 10

	)

10 
	#ERR_FULL
 -1

	)

11 
	#ERR_EMPTY
 -2

	)

13 
öô_°ack
();

14 
push
 (
DATATYPE
 
ôem
);

15 
DATATYPE
 
p›
();

	@c-code/stack/BIN/STACK1.C

5 
	~"°ack1.h
"

8 
	g°kîr
;

9 
	g°ack
[
STACK_SIZE
];

10 
	gt›
;

13 
	$öô_°ack
(){

14 
t›
=-1;

15 
°kîr
=0;

16 
	}
}

18 
	$push
(
ôem
){

19 
°kîr
=0;

21 if(
t›
 =
STACK_SIZE
 -1){

22 
°kîr
=
ERR_FULL
;

25 
t›
++;

26 
°ack
[
t›
]=
ôem
;

27 
	}
}

30 
	gôem
;

31 
	g°kîr
=0;

33 if(
	gt›
==-1){

34 
°kîr
=
ERR_EMPTY
;

37 
	gôem
 = 
°ack
[
t›
];

38 
	gt›
--;

39  
	gôem
;

	@c-code/stack/BIN/STACK1.H

5 
	#STACK_SIZE
 10

	)

6 
	#ERR_FULL
 -1

	)

7 
	#ERR_EMPTY
 -2

	)

9 
öô_°ack
();

10 
push
 (
ôem
);

11 
p›
();

	@c-code/stack/BIN/US2.C

6 
	~<°dio.h
>

7 
	~"°ack1.h
"

9 
°kîr
;

11 
	$maö
(){

12 
c
;

13 
i
;

14 
FILE
 *
Â
;

15 
	`öô_°ack
();

16 
Â
 = 
	`f›í
("abc.c","r");

17  (
i
=
	`fgëc
(
Â
)Ë!=
EOF
 ){

18 
c
(Ë
i
;

19 
	`¥ötf
("%c",
c
);

21 
	`f˛o£
(
Â
);

22 
	}
}

	@c-code/stack/BIN/US3.C

6 
	~<°dio.h
>

7 
	~"°ack1.h
"

9 
°kîr
;

11 
	$maö
(){

12 
c
,
x
;

13 
i
;

14 
FILE
 *
Â
;

15 
	`öô_°ack
();

16 
Â
 = 
	`f›í
("abc.c","r");

17  (
i
=
	`fgëc
(
Â
)Ë!=
EOF
 ){

18 
c
(Ë
i
;

19 i‡–(
c
 == '{') || (c == '('))

20 
	`push
(
c
);

21 i‡–
c
 == ')'){

22 
x
=
	`p›
();

23 if(
x
 != '('){

24 
	`¥ötf
("Érror in file \n");

25 
	`exô
(-1);

28 i‡–
c
 == '}'){

29 
x
=
	`p›
();

30 if(
x
 != '{'){

31 
	`¥ötf
("Érror in file \n");

32 
	`exô
(-1);

36 
	`¥ötf
("ÇoÉrror in file \n") ;

37 
	`f˛o£
(
Â
);

38 
	}
}

	@c-code/stack/BIN/usestack1.c

6 
	~<°dio.h
>

7 
	~"°ack1.h
"

9 
°kîr
;

10 
	$maö
(){

11 
c
;

12 
i
;

13 
	`öô_°ack
();

14 
c
=
	`p›
();

15 
	`¥ötf
(" stkî∏%d\n",
°kîr
);

16 
	`¥ötf
("Ö›≥d iãm = %c\n",
c
);

17 
c
='a';

18 
i
=0;i<11;i++){

19 
	`push
(
c
+
i
);

20 
	`¥ötf
("Öushed %¯",
c
+
i
);

21 
	`¥ötf
(" stkî∏%d\n", 
°kîr
);

23 
	`gëch¨
();

24 
i
=0;i<11;i++){

25 
c
=
	`p›
();

26 
	`¥ötf
(" stkî∏%d\n",
°kîr
);

27 
	`¥ötf
("Ö›≥d iãm = %c\n",
c
);

29 
	}
}

	@c-code/stack/TXT/ABC.C

4 
	$maö
(){

5 
i
=0;i<10;i++){

7 
	}
}

	@c-code/stack/TXT/GENSTK.C

7 
	~"gí°k.h
"

10 
	g°kîr
;

11 
DATATYPE
 
	g°ack
[
STACK_SIZE
];

12 
	gt›
;

15 
	$öô_°ack
(){

16 
t›
=-1;

17 
°kîr
=0;

18 
	}
}

20 
	$push
(
DATATYPE
 
ôem
){

21 
°kîr
=0;

23 if(
t›
 =
STACK_SIZE
 -1){

24 
°kîr
=
ERR_FULL
;

27 
t›
++;

28 
°ack
[
t›
]=
ôem
;

29 
	}
}

32 
DATATYPE
 
	$p›
(){

33 
DATATYPE
 
ôem
;

34 
°kîr
=0;

36 if(
t›
==-1){

37 
°kîr
=
ERR_EMPTY
;

40 
ôem
 = 
°ack
[
t›
];

41 
t›
--;

42  
ôem
;

43 
	}
}

	@c-code/stack/TXT/GENSTK.H

6 
	#DATATYPE
 

	)

9 
	#STACK_SIZE
 10

	)

10 
	#ERR_FULL
 -1

	)

11 
	#ERR_EMPTY
 -2

	)

13 
öô_°ack
();

14 
push
 (
DATATYPE
 
ôem
);

15 
DATATYPE
 
p›
();

	@c-code/stack/TXT/STACK1.C

5 
	~"°ack1.h
"

8 
	g°kîr
;

9 
	g°ack
[
STACK_SIZE
];

10 
	gt›
;

13 
	$öô_°ack
(){

14 
t›
=-1;

15 
°kîr
=0;

16 
	}
}

18 
	$push
(
ôem
){

19 
°kîr
=0;

21 if(
t›
 =
STACK_SIZE
 -1){

22 
°kîr
=
ERR_FULL
;

25 
t›
++;

26 
°ack
[
t›
]=
ôem
;

27 
	}
}

30 
	$p›
(){

31 
ôem
;

32 
°kîr
=0;

34 if(
t›
==-1){

35 
°kîr
=
ERR_EMPTY
;

38 
ôem
 = 
°ack
[
t›
];

39 
t›
--;

40  
ôem
;

41 
	}
}

	@c-code/stack/TXT/STACK1.H

5 
	#STACK_SIZE
 10

	)

6 
	#ERR_FULL
 -1

	)

7 
	#ERR_EMPTY
 -2

	)

9 
öô_°ack
();

10 
push
 (
ôem
);

11 
p›
();

	@c-code/stack/TXT/US2.C

6 
	~<°dio.h
>

7 
	~"°ack1.h
"

9 
°kîr
;

11 
	$maö
(){

12 
c
;

13 
i
;

14 
FILE
 *
Â
;

15 
	`öô_°ack
();

16 
Â
 = 
	`f›í
("abc.c","r");

17  (
i
=
	`fgëc
(
Â
)Ë!=
EOF
 ){

18 
c
(Ë
i
;

19 
	`¥ötf
("%c",
c
);

21 
	`f˛o£
(
Â
);

22 
	}
}

	@c-code/stack/TXT/US3.C

6 
	~<°dio.h
>

7 
	~"°ack1.h
"

9 
°kîr
;

11 
	$maö
(){

12 
c
,
x
;

13 
i
;

14 
FILE
 *
Â
;

15 
	`öô_°ack
();

16 
Â
 = 
	`f›í
("abc.c","r");

17  (
i
=
	`fgëc
(
Â
)Ë!=
EOF
 ){

18 
c
(Ë
i
;

19 i‡–(
c
 == '{') || (c == '('))

20 
	`push
(
c
);

21 i‡–
c
 == ')'){

22 
x
=
	`p›
();

23 if(
x
 != '('){

24 
	`¥ötf
("Érror in file \n");

25 
	`exô
(-1);

28 i‡–
c
 == '}'){

29 
x
=
	`p›
();

30 if(
x
 != '{'){

31 
	`¥ötf
("Érror in file \n");

32 
	`exô
(-1);

36 
	`¥ötf
("ÇoÉrror in file \n") ;

37 
	`f˛o£
(
Â
);

38 
	}
}

	@c-code/stack/TXT/usestack1.c

6 
	~<°dio.h
>

7 
	~"°ack1.h
"

9 
°kîr
;

10 
	$maö
(){

11 
c
;

12 
i
;

13 
	`öô_°ack
();

14 
c
=
	`p›
();

15 
	`¥ötf
(" stkî∏%d\n",
°kîr
);

16 
	`¥ötf
("Ö›≥d iãm = %c\n",
c
);

17 
c
='a';

18 
i
=0;i<11;i++){

19 
	`push
(
c
+
i
);

20 
	`¥ötf
("Öushed %¯",
c
+
i
);

21 
	`¥ötf
(" stkî∏%d\n", 
°kîr
);

23 
	`gëch¨
();

24 
i
=0;i<11;i++){

25 
c
=
	`p›
();

26 
	`¥ötf
(" stkî∏%d\n",
°kîr
);

27 
	`¥ötf
("Ö›≥d iãm = %c\n",
c
);

29 
	}
}

	@c-code/static&shared/main.c

5 
	~<°dio.h
>

6 
	~"p›3.h
"

7 
	$maö
()

9 
ch
;

10 
	`£ndmaû
();

11 
	`ªcvmaû
();

14 
	`¥ötf
("\n 1.Send");

15 
	`¥ötf
("\n 2.Receive");

16 
	`¥ötf
("\n 3.Exit");

17 
	`¥ötf
("\n Enter Your Choice [1/2/3] :");

18 
	`sˇnf
("%d",&
ch
);

19 
ch
){

20 1: 
	`£ndmaû
();

22 2: 
	`ªcvmaû
();

24 3: 
	`exô
(0);

27 
	}
}

29 
	$£ndmaû
(){

30 
£nd
[100];

31 
compo£
[1024];

32 
c⁄fúm
;

34 
	`¥ötf
("\n Enter Destination Mail ID : ");

35 
	`sˇnf
("%s",
£nd
);

36 
	`¥ötf
("\n ComposeÅhe Message: \n");

37 
	`sˇnf
("%s",
compo£
);

38 
	`¥ötf
("\n Sending Message....\n Confirm [y/n] : ");

39 
	`gëch¨
();

40 
	`sˇnf
("%c",&
c⁄fúm
);

41 if(
c⁄fúm
 == 'y' || confirm == 'Y')

42 
	`p›3£nd
();

44 
	`¥ötf
("\n Message was cancelled\n");

45 
	}
}

47 
	$ªcvmaû
()

49 
msg
;

51 
	`¥ötf
("\n Which date Messages you wantÅoÑeceive : ");

52 
	`sˇnf
("%d",&
msg
);

53 
	`p›3ªcv
(
msg
);

54 
	`¥ötf
("\n\n");

56 
	}
}

	@c-code/static&shared/pop3.h

1 
p›3£nd
();

2 
p›3ªcv
();

	@c-code/static&shared/pop3recv.c

6 
	$p›3ªcv
(
numbî
)

8 
	`¥ötf
("\¿Thênumbî o‡Mesßge†ª˚ived : %d ",
numbî
);

10 
	}
}

	@c-code/static&shared/pop3send.c

6 
	$p›3£nd
()

8 
	`¥ötf
("\n Message sent Sucessfully");

9 
	}
}

	@c-code/trees/ONE.C

7 
	~<°dio.h
>

8 
	sd©a
{

9 
	msomed©a
;

10 
d©a
 *
	mÀ·
;

11 
d©a
 *
	mright
;

13 
d©a
 
	tBö¨yTªe
;

15 
	$addNodeToTªe
(
Bö¨yTªe
 *
roŸ
){

16 
√wd©a
;

17 
Bö¨yTªe
 *
ãmp
,*
whîëﬂdd
;

18 
	`¥ötf
(" Enter dataÅo beádded :");

19 
	`sˇnf
("%d",&
√wd©a
);

21 if(
roŸ
->
somed©a
 == 0){

22 
roŸ
->
somed©a
=
√wd©a
;

26 
ãmp
 = (
Bö¨yTªe
 *Ë
	`mÆloc
((BinaryTree));

27 
ãmp
->
somed©a
 = 
√wd©a
;

28 
ãmp
->
À·
 = 
NULL
;

29 
ãmp
->
right
 = 
NULL
;

31 
whîëﬂdd
 = 
roŸ
;

33 if(
√wd©a
 < 
whîëﬂdd
->
somed©a
){

35 i‡(
whîëﬂdd
->
À·
 ==
NULL
){

36 
whîëﬂdd
->
À·
 = 
ãmp
;

40 
whîëﬂdd
=whîëﬂdd->
À·
;

44 i‡(
whîëﬂdd
->
right
 ==
NULL
){

45 
whîëﬂdd
->
right
 = 
ãmp
;

49 
whîëﬂdd
=whîëﬂdd->
right
;

53 
	}
}

55 
	$£¨chNode
–
Bö¨yTªe
 * 
roŸ
, 
n
){

57 if(
roŸ
 ->
somed©a
 =
n
){

58 
	`¥ötf
(" data found\n");

61 if(
n
 < 
roŸ
->
somed©a
 ){

62 i‡(
roŸ
->
À·
 =
NULL
)

64 
roŸ
 =ÑoŸ ->
À·
;

67 if(
roŸ
->
right
 =
NULL
)

69 
roŸ
 =ÑoŸ ->
right
;

72 
	}
}

74 
	$maö
(){

75 
n⁄o
;

76 
i
;

77 
Bö¨yTªe
 *
roŸ
 = (Bö¨yTªê*Ë
	`mÆloc
((BinaryTree));

78 
roŸ
->
À·
=
NULL
;

79 
roŸ
->
right
=
NULL
;

80 
roŸ
->
somed©a
 = 0;

81 
	`¥ötf
(" EnterÇo of dataitems you wantÅo store:");

82 
	`sˇnf
("%d",&
n⁄o
);

83 
i
=0;i<
n⁄o
;i++)

84 
	`addNodeToTªe
(
roŸ
);

85 
	`sy°em
("clear");

86 
i
=0;i<4;i++){

87 
	`¥ötf
(" EnterÅheÇoÅo be searched :");

88 
	`sˇnf
("%d",&
n⁄o
);

89 
	`£¨chNode
(
roŸ
,
n⁄o
);

91 
	}
}

	@c-code/trees/TREE.C

13 
	~<°dio.h
>

14 
	~"åì.h
"

18 
TªeNode
 * 
	$¸óãRoŸNode
(){

19 
TªeNode
 *
roŸ
;

20 
roŸ
(
TªeNode
 *Ë
	`mÆloc
( (TreeNode));

21 if(
roŸ
 !=
NULL
){

22 
roŸ
->
chûdli°
=
NULL
;

23 
roŸ
->
chûdcou¡
=0;

25  
roŸ
;

26 
	}
}

28 
TªeNode
 *
	$addNode
(
TªeNode
 *
∑ª¡
){

29 
TªeNode
 *
chûd
;

30 
TªeNode
 **
li°°¨t
;

31 
TªeNode
 **
ﬁdli°°¨t
;

32 
TªeNode
 **
ãmp1
,**
ãmp2
;

33 
i
;

34 if(
∑ª¡
 =
NULL
)

36  
NULL
;

37 
chûd
(
TªeNode
 *Ë
	`mÆloc
( (TreeNode));

38 if(
chûd
 ==
NULL
)

39  
NULL
;

42 
chûd
->
chûdli°
=
NULL
;

43 
chûd
->
chûdcou¡
=0;

46 if(
∑ª¡
->
chûdcou¡
 == 0){

47 
li°°¨t
 = (
TªeNode
 **Ë
	`mÆloc
((TreeNode *));

48 
∑ª¡
->
chûdcou¡
=1;

49 *
li°°¨t
 = 
chûd
;

50 
∑ª¡
 ->
chûdli°
 =
li°°¨t
;

53 
∑ª¡
->
chûdcou¡
++;

54 
ﬁdli°°¨t
=
∑ª¡
->
chûdli°
;

55 
	`¥ötf
(" *ﬁdli° sèπ %x *\n",
ﬁdli°°¨t
);

56 
i
 = 
∑ª¡
->
chûdcou¡
;

57 
li°°¨t
 = (
TªeNode
 **Ë
	`mÆloc
((TªeNode*)* 
i
);

58 
	`¥ötf
(" *√wli° sèπ %x *\n",
li°°¨t
);

60 
ãmp1
=
li°°¨t
;

61 
ãmp2
=
ﬁdli°°¨t
;

62 
i
=1;i<
∑ª¡
->
chûdcou¡
;i++){

63 *
ãmp1
 = *
ãmp2
;

64 
ãmp1
++;

65 
ãmp2
++;

67 *
ãmp1
=
chûd
;

68 
∑ª¡
->
chûdli°
=
li°°¨t
;

70 
	`‰ì
(
ﬁdli°°¨t
);

72 
	`¥ötf
(" \«·îáddögÜi° sèπ =%x",
∑ª¡
->
chûdli°
);

73 
	`¥ötf
("\¿poöã∏öÜi° sèπ =%x",*(
∑ª¡
->
chûdli°
));

74 (
chûd
);

75 
	}
}

76 
	$gëChûdCou¡
(
TªeNode
 *
node
){

77  
node
->
chûdcou¡
;

78 
	}
}

81 
TªeNode
 ** 
	$gëChûdNodes
(
TªeNode
 *
node
){

82  
node
->
chûdli°
;

83 
	}
}

	@c-code/trees/TREE.H

7 
	sTN
{

8 
	md©a
 ;

9 
TN
 **
	mchûdli°
;

10 
	mchûdcou¡
;

11 }
	tTªeNode
;

15 
TªeNode
 *
¸óãRoŸNode
();

16 
TªeNode
 *
addNode
(TªeNodê*
∑ª¡
);

17 
gëChûdCou¡
(
TªeNode
 *
node
);

20 
TªeNode
 ** 
gëChûdNodes
(TªeNodê*
∑ª¡
);

	@c-code/trees/USETREE.C

9 
	~<°dio.h
>

10 
	~"åì.h
"

12 
	$¥öéi°
(
TªeNode
 *
node
){

13 
TªeNode
 **
li°
,*
nodïå
;

14 
ccou¡
,
i
;

15 
ccou¡
 = 
	`gëChûdCou¡
(
node
);

16 
li°
 = 
	`gëChûdNodes
(
node
);

17 if(
li°
 =
NULL
)

19 
nodïå
 = *
li°
;

20 
i
=0;i<
ccou¡
; i++){

21 
	`¥ötf
(" D©®ö Nodê%d\n",
nodïå
->
d©a
);

22 
nodïå
++;

24 
	}
}

25 
	$maö
(){

26 
TªeNode
 * 
roŸ
,*
ãmp1
,*
ãmp2
;

27 
roŸ
 = 
	`¸óãRoŸNode
();

28 
	`¥ötf
("ÑoŸÇodê%x", 
roŸ
);

29 
ãmp1
 = 
	`addNode
(
roŸ
);

30 
ãmp1
->
d©a
 = 1;

31 
ãmp2
=
	`addNode
(
roŸ
);

32 
ãmp2
->
d©a
=2;

33 
ãmp2
=
	`addNode
(
roŸ
);

34 
ãmp2
->
d©a
=3;

35 
ãmp2
=
	`addNode
(
roŸ
);

36 
ãmp2
->
d©a
=4;

37 
ãmp2
=
	`addNode
(
roŸ
);

38 
ãmp2
->
d©a
=5;

39 
	`¥ötf
("Çÿo‡chûdÇode†f‹ÑoŸ %d\n",
	`gëChûdCou¡
(
roŸ
));

40 
ãmp2
=
	`addNode
(
ãmp1
);

41 
ãmp2
->
d©a
=100;

42 
ãmp2
=
	`addNode
(
ãmp1
);

43 
ãmp2
->
d©a
=200;

44 
	`¥ötf
("Çÿo‡chûdÇode†f‹Åemp1 %d\n",
	`gëChûdCou¡
(
ãmp1
));

45 
	`¥öéi°
(
roŸ
);

46 
	`¥öéi°
(
ãmp1
);

47 
	}
}

	@c-code/trees/UT.C

9 
	~<°dio.h
>

10 
	~"åì.h
"

12 
	$¥öéi°
(
TªeNode
 *
node
){

13 
TªeNode
 **
li°
;

14 
TªeNode
 *
nodïå
;

15 
ccou¡
,
i
;

16 
ccou¡
 = 
	`gëChûdCou¡
(
node
);

17 
li°
 = 
	`gëChûdNodes
(
node
);

18 
	`¥ötf
("Çÿo‡chûdÇode†%d\n",
ccou¡
);

19 if(
li°
 =
NULL
)

21 
i
=0;i<
ccou¡
; i++){

22 
	`¥ötf
(" D©®ö Nodê%d\n",(*
li°
)->
d©a
);

23 
li°
++;

25 
	}
}

26 
	$maö
(){

27 
TªeNode
 * 
roŸ
,*
ãmp1
,*
ãmp2
;

28 
roŸ
 = 
	`¸óãRoŸNode
();

29 
	`¥ötf
("ÑoŸÇodê%x", 
roŸ
);

30 
ãmp1
 = 
	`addNode
(
roŸ
);

31 
ãmp1
->
d©a
=1;

32 
ãmp1
 = 
	`addNode
(
roŸ
);

33 
ãmp1
->
d©a
=2;

34 
ãmp1
 = 
	`addNode
(
roŸ
);

35 
ãmp1
->
d©a
=3;

36 
ãmp1
 = 
	`addNode
(
roŸ
);

37 
ãmp1
->
d©a
=4;

38 
ãmp2
 = 
	`addNode
(
ãmp1
);

39 
ãmp2
->
d©a
=1000;

40 
ãmp2
 = 
	`addNode
(
ãmp1
);

41 
ãmp2
->
d©a
=2000;

42 
ãmp2
 = 
	`addNode
(
ãmp1
);

43 
ãmp2
->
d©a
=3000;

44 
	`¥öéi°
(
roŸ
);

45 
	`¥öéi°
(
ãmp1
);

46 
	}
}

	@c-code/trees/XYZ.C

7 
	$maö
(){

8 *
p
 =0x5687;

9 *
p
=44;

10 
	}
}

	@ddex/block/ramdisk.c

17 
	~<löux/moduÀ.h
>

18 
	~<löux/moduÀ∑øm.h
>

19 
	~<löux/öô.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/fs.h
>

23 
	~<löux/î∫o.h
>

24 
	~<löux/ty≥s.h
>

25 
	~<löux/vmÆloc.h
>

26 
	~<löux/gíhd.h
>

27 
	~<löux/blkdev.h
>

28 
	~<löux/hdªg.h
>

29 
	~<löux/devi˚.h
>

30 
	~<asm/uac˚ss.h
>

31 
	~<löux/blkpg.h
>

32 
	~<löux/vîsi⁄.h
>

33 
	gmaj‹_num
 = 0;

34 
moduÀ_∑øm
(
maj‹_num
, , 0);

35 
	gh¨d£˘_size
 = 512;

36 
moduÀ_∑øm
(
h¨d£˘_size
, , 0);

37 
	gn£˘‹s
 = 16024;

38 
moduÀ_∑øm
(
n£˘‹s
, , 0);

39 
˛ass
 *
	gveda_˛ass
 = 
NULL
;

42 
	ssbd_devi˚
 {

43 
	msize
;

44 
•ölock_t
 
	mlock
;

45 
u8
 *
	md©a
;

46 
gídisk
 *
	mgd
;

47 } 
	gDevi˚
;

48 
dev_t
 
	gmydev
;

50 
	#KERNEL_SECTOR_SIZE
 512

	)

51 
sbd_ªque°
(
ªque°_queue
 *
q
);

55 
ªque°_queue
 *
	gQueue
;

56 
	$sbd_›í
(
block_devi˚
 *
bd
, 
fmode_t
 
pos
)

59 
	}
}

62 
block_devi˚_›î©i⁄s
 
	gsbd_›s
 = {.
ow√r
 =

63 
THIS_MODULE
,.
	g›í
 = 
sbd_›í
,

69 
	$do_a˘uÆ_ªq
(
ªque°
 *
ªq
)

71 
max_£˘‹s
,
dú
, 
size
;

72 *
addr
;

73 
îr‹
;

74 
ªq_ôî©‹
 
ôî
;

75 
bio_vec
 *
bv
;

76 *
buf„r
;

77 
£˘‹
 = 
ªq
->sector;

78 
max_£˘‹s
 = 
ªq
->
ƒ_£˘‹s
;

81 i‡(
£˘‹
 > 
n£˘‹s
 || (£˘‹ + 
max_£˘‹s
) >Çsectors) {

82 
	`íd_ªque°
(
ªq
, 0);

87 
dú
 = 
	`rq_d©a_dú
(
ªq
);

93 
addr
 = 
Devi˚
.
d©a
 + (
£˘‹
 << 9);

94 
	`rq_f‹_óch_£gmít
(
bv
, 
ªq
, 
ôî
) {

95 
size
 = 
bv
->
bv_Àn
;

96 
buf„r
 = 
	`∑ge_addªss
(
bv
->
bv_∑ge
Ë+ bv->
bv_off£t
;

97 i‡(
dú
 =
WRITE
){

98 
	`¥ötk
("WRITING TO DISK\n");

99 
	`mem˝y
(
addr
, 
buf„r
, 
size
);

101 
	`¥ötk
("READING FROM DISK\n");

102 
	`mem˝y
(
buf„r
, 
addr
, 
size
);

104 
addr
 +
size
;

107 
îr‹
 = 
ªq
->
îr‹s
 ? -
EIO
:0;

108 
	`__blk_íd_ªque°
(
ªq
, 
îr‹
,ªq->
ƒ_£˘‹s
<<9);

109 
	}
}

110 
	$sbd_ªque°
(
ªque°_queue
 *
q
)

112 
ªque°
 *
ªq
;

115 (
ªq
 = 
	`ñv_√xt_ªque°
(
q
)Ë!
NULL
) {

116 i‡(!
	`blk_fs_ªque°
(
ªq
)) {

117 
	`íd_ªque°
(
ªq
, 0);

122 
	`do_a˘uÆ_ªq
(
ªq
);

124 
	}
}

125 
__öô
 
	$sbd_öô
()

129 
Devi˚
.
size
 = 
n£˘‹s
 * 
h¨d£˘_size
;

130 
	`•ö_lock_öô
(&
Devi˚
.
lock
);

131 
Devi˚
.
d©a
 = 
	`vmÆloc
(Devi˚.
size
);

132 i‡(
Devi˚
.
d©a
 =
NULL
)

133  -
ENOMEM
;

134 
	`mem£t
(
Devi˚
.
d©a
, 0, Devi˚.
size
);

137 
Queue
 = 
	`blk_öô_queue
(
sbd_ªque°
, &
Devi˚
.
lock
);

138 i‡(
Queue
 =
NULL
)

139 
out
;

140 
	`blk_queue_h¨d£˘_size
(
Queue
, 
h¨d£˘_size
);

143 
maj‹_num
 = 
	`ªgi°î_blkdev
(major_num, "sbd");

144 i‡(
maj‹_num
 <= 0) {

145 
	`¥ötk
(
KERN_WARNING
 "sbd: unableÅo get majorÇumber\n");

146 
out
;

148 
mydev
 = 
	`MKDEV
(
maj‹_num
, 0);

149 
veda_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
, "Veda22");

150 i‡(
	`IS_ERR
(
veda_˛ass
)) {

151 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

153 
	`devi˚_¸óã
(
veda_˛ass
, 
NULL
, 
mydev
, NULL, "sbd0");

154 
Devi˚
.
gd
 = 
	`Æloc_disk
(1);

155 i‡(!
Devi˚
.
gd
)

156 
out_uƒegi°î
;

157 
Devi˚
.
gd
->
maj‹
 = 
maj‹_num
;

158 
Devi˚
.
gd
->
fú°_mö‹
 = 0;

159 
Devi˚
.
gd
->
f›s
 = &
sbd_›s
;

160 
Devi˚
.
gd
->
¥iv©e_d©a
 = &Device;

161 
	`°r˝y
(
Devi˚
.
gd
->
disk_«me
, "sbd0");

162 
	`£t_ˇ∑côy
(
Devi˚
.
gd
,
n£˘‹s
 * (
h¨d£˘_size
 / 
KERNEL_SECTOR_SIZE
));

163 
Devi˚
.
gd
->
queue
 = 
Queue
;

164 
	`add_disk
(
Devi˚
.
gd
);

167 
out_uƒegi°î
:
	`uƒegi°î_blkdev
(
maj‹_num
, "sbd");

168 
out
:
	`v‰ì
(
Devi˚
.
d©a
);

169  -
ENOMEM
;

170 
	}
}

171 
__exô
 
	$sbd_exô
()

173 
	`dñ_gídisk
(
Devi˚
.
gd
);

174 
	`put_disk
(
Devi˚
.
gd
);

175 
	`devi˚_de°roy
(
veda_˛ass
, 
mydev
);

176 
	`˛ass_de°roy
(
veda_˛ass
);

177 
	`uƒegi°î_blkdev
(
maj‹_num
, "sbd");

178 
	`blk_˛ónup_queue
(
Queue
);

179 
	`v‰ì
(
Devi˚
.
d©a
);

180 
	`¥ötk
("\n Module Removed\n");

181 
	}
}

182 
moduÀ_öô
(
sbd_öô
);

183 
moduÀ_exô
(
sbd_exô
);

184 
MODULE_LICENSE
("Dual BSD/GPL");

	@ddex/block/test.c

5 
	~<sys/°©.h
>

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<löux/fs.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<sys/io˘l.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 
buf
[20]={};

16 
fd
=
	`›í
("/dev/sbd0", 
O_RDWR
);

17 if(
fd
<=0){

18 
	`≥º‹
("TEST FD: ");

19 
	`exô
(1);

21 
	`io˘l
(
fd
,
BLKGETSIZE
,&
i
);

22 
	`¥ötf
("ªsu… o‡io˘»%d\n",
i
);

23 
	`wrôe
(
fd
,"MohanÑeddy",20);

24 
	`ªad
(
fd
,
buf
,20);

25 
	`¥ötf
("\nDATA :%s",
buf
);

26 
	}
}

	@ddex/char/clock/clock.c

6 
	~<löux/moduÀ.h
>

7 
	~<löux/vîsi⁄.h
>

8 
	~<löux/kî√l.h
>

9 
	~<löux/fs.h
>

10 
	~<löux/¶ab.h
>

11 
	~<löux/i›‹t.h
>

12 
	~<asm/io.h
>

13 
	~<löux/öô.h
>

14 
	~<asm/uac˚ss.h
>

15 
	~"˛ock.h
"

18 
	göu£
 = 0;

20 
	gcmd_¨r
[]={

21 
DAY_CMD
,

22 
MONTH_CMD
,

23 
YEAR_CMD
,

24 
HOURS_CMD
,

25 
MINUTES_CMD
,

26 
SECONDS_CMD


35 
	$πc_›í
(
öode
 *öode, 
fûe
 *
fûp
)

37 if(
öu£
)

38  -
EBUSY
;

39 
öu£
 = 1;

41 
	}
}

43 
	$πc_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

45 
öu£
 = 0;

47 
	}
}

53 
ssize_t
 
	$πc_wrôe
(
fûe
 *
fûp
, c⁄° *
buf
, 
size_t
 
cou¡
,

54 
loff_t
 *
f_pos
)

56 
cmd
,
d©a
;

57 if(
cou¡
 > 1)

58  -
EIO
;

59 if(*
f_pos
 >
FILE_SIZE
)

60  -
EIO
;

61 
cmd
 = 
cmd_¨r
[*
f_pos
];

62 if–
	`c›y_‰om_u£r
(&
d©a
,
buf
,1))

63  -
EFAULT
;

64 
	`¥ötk
("cmd = %d d©®%d\n",
cmd
,
d©a
);

65 
	`WRITE_TO_CLOCK
(
cmd
,
d©a
);

66 (*
f_pos
)++;

68 
	}
}

70 
ssize_t
 
	$πc_ªad
(
fûe
 *
fûp
,*
buf
, 
size_t
 
cou¡
,

71 
loff_t
 *
f_pos
)

73 
cmd
=0,
d©a
=0;

74 
d©a
=0;

75 if(
cou¡
 > 1)

76  -
EIO
;

77 if(*
f_pos
 >
FILE_SIZE
)

78  -
EIO
;

79 
cmd
 = 
cmd_¨r
[*
f_pos
];

80 
	`READ_FROM_CLOCK
(
cmd
,
d©a
);

81 i‡(
	`c›y_to_u£r
(
buf
,&
d©a
,1))

82  -
EFAULT
;

83 
	`¥ötk
("d©®%d cmd = %d \n",
d©a
,
cmd
);

84 (*
f_pos
)++;

86 
	}
}

87 
fûe_›î©i⁄s
 
	gf›s
 = {

88 
wrôe
: 
πc_wrôe
,

89 
ªad
: 
πc_ªad
,

90 
›í
: 
πc_›í
,

91 
ªÀa£
: 
πc_ªÀa£


94 
	$öô_moduÀ
()

96 
ªsu…
 = 0;

97 
öu£
 = 0;

98 
ªsu…
 = 
	`ªgi°î_chrdev
(
CLOCK_MAJOR
,"˛ock",&
f›s
);

100 
	}
}

102 
	$˛ónup_moduÀ
()

104 
	`uƒegi°î_chrdev
(
CLOCK_MAJOR
, "clock");

105 
	}
}

	@ddex/char/clock/clock.h

7 
	#RTC_PORT_BASE
 0x70

	)

9 
	#RTC_DATA_PORT
 0x71

	)

11 
	#RTC_CMD_PORT
 
RTC_PORT_BASE


	)

13 
	#SECONDS_CMD
 0

	)

14 
	#MINUTES_CMD
 2

	)

15 
	#HOURS_CMD
 4

	)

16 
	#DAY_CMD
 7

	)

17 
	#MONTH_CMD
 8

	)

18 
	#YEAR_CMD
 9

	)

22 
	#READ_FROM_CLOCK
(
cmd
,
d©a
)\

	)

23 
outb_p
(
cmd
,
RTC_CMD_PORT
);
	gd©a
=
öb_p
(
RTC_DATA_PORT
);

26 
	#WRITE_TO_CLOCK
(
cmd
,
vÆue
Ë\

	)

27 
outb_p
(
cmd
,
RTC_CMD_PORT
); outb_p(
vÆue
,
RTC_DATA_PORT
);

30 
	#CLOCK_MAJOR
 0

	)

32 
	#FILE_SIZE
 6

	)

	@ddex/char/clock/useclk.c

7 
	~<°dio.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<f˙é.h
>

10 
	$maö
(){

11 
fd
,
i
;

12 
d©a
;

13 
fd
 = 
	`›í
("/dev/˛ock",
O_RDONLY
);

14 if(
fd
 < 0){

15 
	`≥º‹
("clock:");

16 
	`exô
(1);

18 
d©a
 =0x04;

19 
i
=0;i<6;i++){

20 
	`ªad
(
fd
,&
d©a
,1);

21 
	`¥ötf
(" .... %x....\n",
d©a
);

24 
	}
}

	@ddex/char/clock/useclk1.c

7 
	~<°dio.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<f˙é.h
>

10 
	$maö
(){

11 
fd
,
i
;

12 
d©a
;

13 
fd
 = 
	`›í
("/dev/˛ock",
O_WRONLY
);

14 if(
fd
 < 0){

15 
	`≥º‹
("clock:");

16 
	`exô
(1);

18 
d©a
 =0x04;

19 
i
=0;i<6;i++){

20 
	`wrôe
(
fd
,&
d©a
,1);

21 
	`¥ötf
(" .... %x....\n",
d©a
);

23 
	}
}

	@ddex/char/ioctl/char_driver_ioctlrw.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~"veda_ch¨_devi˚.h
"

12 
	#MAJORNO
 300

	)

13 
	#MINORNO
 0

	)

14 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

15 
	#MAX_LENGTH
 4000

	)

16 
	#SUCCESS
 0

	)

18 *
	gch¨_devi˚_buf
;

19 
cdev
 *
	gveda_cdev
;

20 
dev_t
 
	gmydev
;

21 
	gcou¡
=1;

22 
˛ass
 *
	gveda_˛ass
;

39 
	$ch¨_dev_›í
(
öode
 *inode,

40 
fûe
 *file)

42 
cou¡î
 = 0;

43 
cou¡î
++;

44 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

45 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

46 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

47 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

48  
SUCCESS
;

49 
	}
}

62 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

63 
fûe
 *file)

65  
SUCCESS
;

66 
	}
}

81 
	$ch¨_dev_ªad
(
fûe
 *file,

82 *
buf
,

83 
size_t
 
lbuf
,

84 
loff_t
 *
µos
)

86 
maxbyãs
;

87 
byãs_to_do
;

88 
nbyãs
;

90 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

92 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

93 
byãs_to_do
 = 
maxbyãs
;

95 if–
byãs_to_do
 == 0 ) {

96 
	`¥ötk
("ReachedÉnd of device\n");

97  -
ENOSPC
;

100 
nbyãs
 = 
byãs_to_do
 -

101 
	`c›y_to_u£r
–
buf
,

102 
ch¨_devi˚_buf
 + *
µos
,

103 
byãs_to_do
 );

105 *
µos
 +
nbyãs
;

106  
nbyãs
;

107 
	}
}

122 
	$ch¨_dev_wrôe
(
fûe
 *file,

123 c⁄° *
buf
,

124 
size_t
 
lbuf
,

125 
loff_t
 *
µos
)

127 
nbyãs
;

128 
byãs_to_do
;

129 
maxbyãs
;

131 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

133 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

134 
byãs_to_do
 = 
maxbyãs
;

136 if–
byãs_to_do
 == 0 ) {

137 
	`¥ötk
("ReachedÉnd of device\n");

138  -
ENOSPC
;

141 
nbyãs
 = 
byãs_to_do
 -

142 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

143 
buf
,

144 
byãs_to_do
 );

145 *
µos
 +
nbyãs
;

146  
nbyãs
;

147 
	}
}

167 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

169 
loff_t
 
ã°pos
;

170 
‹ig
) {

173 
ã°pos
 = 
off£t
;

176 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

179 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

182  -
EINVAL
;

185 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

186 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

187 
fûe
->
f_pos
 = 
ã°pos
;

188 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

189  
ã°pos
;

190 
	}
}

192 
my_d©a
 
	gmy_d©a
 = {

193 .
i
 = -100,

194 .
	gx
 = 100,

195 .
	gs
 = "Linux Kernel",

199 
	$chrdev_u∆ocked_io˘l
 (
fûe
 *
Â
, 
cmd
, 
¨g
)

201 
size
, 
rc
, 
dúe˘i⁄
;

202 
__u£r
 *
iﬂrgp
 = (__u£∏*)
¨g
;

204 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
VEDA_MAGIC
) {

205 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

206  -
EINVAL
;

209 
dúe˘i⁄
 = 
	`_IOC_DIR
 (
cmd
);

210 
size
 = 
	`_IOC_SIZE
 (
cmd
);

212 
dúe˘i⁄
) {

214 
_IOC_WRITE
:

215 
	`¥ötk
(
KERN_INFO
 "Ñódög = %d byã†‰om u£r-•a˚ánd wrôögÅÿdevi˚\n",
size
);

216 
rc
 = 
	`c›y_‰om_u£r
 (&
my_d©a
, 
iﬂrgp
, 
size
);

217 
	`¥ötk
(
KERN_INFO
 "my_d©a.ò%d\¿ (öt)my_d©a.x = %ld\¿ my_d©a.†%s\n",
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

218  
rc
;

221 
_IOC_READ
:

222 
	`¥ötk
 (
KERN_INFO
 "Ñódög devi˚ánd wrôög = %d byã†tÿu£r-•a˚\n", 
size
);

223 
	`¥ötk
 (
KERN_INFO
 "my_d©a.ò%d\¿ (öt)my_d©a.x = %ld\¿ my_d©a.†%s\n",
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

224 
rc
 = 
	`c›y_to_u£r
 (
iﬂrgp
, &
my_d©a
, 
size
);

225  
rc
;

229 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

230  -
EINVAL
;

232 
	}
}

236 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

237 .
ow√r
 = 
THIS_MODULE
,

238 .
	gu∆ocked_io˘l
 = 
chrdev_u∆ocked_io˘l
,

239 .
	gªad
 = 
ch¨_dev_ªad
,

240 .
	gwrôe
 = 
ch¨_dev_wrôe
,

241 .
	g›í
 = 
ch¨_dev_›í
,

242 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

243 .
	gŒ£ek
 = 
ch¨_dev_l£ek


246 
__öô
 
	$ch¨_dev_öô
()

248 
ªt
;

250 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

251 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

255 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

256 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

257 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

260 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

262 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

263 if–
ªt
 < 0 ) {

264 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

265 
	`cdev_dñ
 (
veda_cdev
);

266 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

270 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

271 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

273 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

274 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

276 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

278 
	}
}

280 
__exô
 
	$ch¨_dev_exô
()

282 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

283 
	`˛ass_de°roy
 (
veda_˛ass
);

284 
	`cdev_dñ
(
veda_cdev
);

285 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

286 
	`k‰ì
(
ch¨_devi˚_buf
);

287 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

288 
	}
}

289 
moduÀ_öô
(
ch¨_dev_öô
);

290 
moduÀ_exô
(
ch¨_dev_exô
);

292 
MODULE_AUTHOR
("VEDA");

293 
MODULE_DESCRIPTION
("Character Device Driver - Test");

294 
MODULE_LICENSE
("GPL");

	@ddex/char/ioctl/char_driver_ioctlvar.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~"veda_ch¨_devi˚.h
"

12 
	#MAJORNO
 300

	)

13 
	#MINORNO
 0

	)

14 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

15 
	#MAX_LENGTH
 4000

	)

16 
	#SUCCESS
 0

	)

18 *
	gch¨_devi˚_buf
;

19 
cdev
 *
	gveda_cdev
;

20 
dev_t
 
	gmydev
;

21 
	gcou¡
=1;

22 
˛ass
 *
	gveda_˛ass
;

39 
	$ch¨_dev_›í
(
öode
 *inode,

40 
fûe
 *file)

42 
cou¡î
 = 0;

43 
cou¡î
++;

44 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

45 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

46 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

47 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

48  
SUCCESS
;

49 
	}
}

62 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

63 
fûe
 *file)

65  
SUCCESS
;

66 
	}
}

81 
	$ch¨_dev_ªad
(
fûe
 *file,

82 *
buf
,

83 
size_t
 
lbuf
,

84 
loff_t
 *
µos
)

86 
maxbyãs
;

87 
byãs_to_do
;

88 
nbyãs
;

90 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

92 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

93 
byãs_to_do
 = 
maxbyãs
;

95 if–
byãs_to_do
 == 0 ) {

96 
	`¥ötk
("ReachedÉnd of device\n");

97  -
ENOSPC
;

100 
nbyãs
 = 
byãs_to_do
 -

101 
	`c›y_to_u£r
–
buf
,

102 
ch¨_devi˚_buf
 + *
µos
,

103 
byãs_to_do
 );

105 *
µos
 +
nbyãs
;

106  
nbyãs
;

107 
	}
}

122 
	$ch¨_dev_wrôe
(
fûe
 *file,

123 c⁄° *
buf
,

124 
size_t
 
lbuf
,

125 
loff_t
 *
µos
)

127 
nbyãs
;

128 
byãs_to_do
;

129 
maxbyãs
;

131 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

133 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

134 
byãs_to_do
 = 
maxbyãs
;

136 if–
byãs_to_do
 == 0 ) {

137 
	`¥ötk
("ReachedÉnd of device\n");

138  -
ENOSPC
;

141 
nbyãs
 = 
byãs_to_do
 -

142 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

143 
buf
,

144 
byãs_to_do
 );

145 *
µos
 +
nbyãs
;

146  
nbyãs
;

147 
	}
}

167 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

169 
loff_t
 
ã°pos
;

170 
‹ig
) {

173 
ã°pos
 = 
off£t
;

176 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

179 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

182  -
EINVAL
;

185 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

186 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

187 
fûe
->
f_pos
 = 
ã°pos
;

188 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

189  
ã°pos
;

190 
	}
}

192 
ölöe
 
	$chrdev_u∆ocked_io˘l
 (
fûe
 *
Â
, 
cmd
, 
¨g
)

194 
i
, 
rc
, 
dúe˘i⁄
;

195 
size
;

196 *
buf„r
;

197 
__u£r
 *
iﬂrgp
 = (__u£∏*)
¨g
;

201 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
VEDA_MAGIC
) {

202 
	`¥ötk
 (
KERN_WARNING
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

203  -
EINVAL
;

208 
size
 = 
	`_IOC_SIZE
 (
cmd
);

209 
buf„r
 = 
	`kmÆloc
 ((
size_t
Ë
size
, 
GFP_KERNEL
);

210 i‡(!
buf„r
) {

211 
	`¥ötk
 (
KERN_ERR
 "Kmalloc failed for buffer\n");

212  -
ENOMEM
;

217 
	`mem£t
 (
buf„r
, 'X', 
size
);

219 
dúe˘i⁄
 = 
	`_IOC_DIR
 (
cmd
);

221 
dúe˘i⁄
) {

223 
_IOC_WRITE
:

224 
¥ötk


225 (
KERN_INFO
 "Ñódög = %d byã†‰om u£r-•a˚ánd wrôögÅÿdevi˚\n", 
size
);

226 
rc
 = 
	`c›y_‰om_u£r
 (
buf„r
, 
iﬂrgp
, 
size
);

227 
	`¥ötk
 (
KERN_INFO
 "r¯‰om c›y_‰om_u£∏%d\n", 
rc
);

230 
_IOC_READ
:

231 
	`¥ötk
 (
KERN_INFO


232 "Ñódög devi˚ánd wrôög = %d byã†tÿu£r-•a˚\n", 
size
);

233 
rc
 = 
	`c›y_to_u£r
 (
iﬂrgp
, 
buf„r
, 
size
);

234 
	`¥ötk
 (
KERN_INFO
 "r¯‰om c›y_to_u£∏%d\n", 
rc
);

237 
	`¥ötk
 (
KERN_WARNING
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

238  -
EINVAL
;

240 
i
 = 0; i < 
size
; i++)

241 
	`¥ötk
 (
KERN_INFO
 "%c", 
buf„r
[
i
]);

242 
	`¥ötk
 (
KERN_INFO
 "\n");

244 i‡(
buf„r
)

245 
	`k‰ì
 (
buf„r
);

246  
rc
;

247 
	}
}

249 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

250 .
ow√r
 = 
THIS_MODULE
,

251 .
	gu∆ocked_io˘l
 = 
chrdev_u∆ocked_io˘l
,

252 .
	gªad
 = 
ch¨_dev_ªad
,

253 .
	gwrôe
 = 
ch¨_dev_wrôe
,

254 .
	g›í
 = 
ch¨_dev_›í
,

255 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

256 .
	gŒ£ek
 = 
ch¨_dev_l£ek


259 
__öô
 
	$ch¨_dev_öô
()

261 
ªt
;

263 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

264 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

268 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

269 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

270 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

273 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

275 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

276 if–
ªt
 < 0 ) {

277 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

278 
	`cdev_dñ
 (
veda_cdev
);

279 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

283 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

284 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

286 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

287 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

289 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

291 
	}
}

293 
__exô
 
	$ch¨_dev_exô
()

295 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

296 
	`˛ass_de°roy
 (
veda_˛ass
);

297 
	`cdev_dñ
(
veda_cdev
);

298 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

299 
	`k‰ì
(
ch¨_devi˚_buf
);

300 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

301 
	}
}

302 
moduÀ_öô
(
ch¨_dev_öô
);

303 
moduÀ_exô
(
ch¨_dev_exô
);

305 
MODULE_AUTHOR
("VEDA");

306 
MODULE_DESCRIPTION
("Character Device Driver - Test");

307 
MODULE_LICENSE
("GPL");

	@ddex/char/ioctl/myproc.c

2 
	~<löux/moduÀ.h
>

3 
	~<löux/¥oc_fs.h
>

4 
	~<löux/uac˚ss.h
>

5 
	~<löux/öô.h
>

7 
	#NODE
 "drivî/my_¥oc"

	)

9 
	g∑øm
 = 100;

10 
¥oc_dú_íåy
 *
	gmy_¥oc
;

13 
	$my_¥oc_ªad
 (*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
,

14 *
eof
, *
d©a
)

16  
	`•rötf
 (
∑ge
, "%d\n", 
∑øm
);

17 
	}
}

20 
	$my_¥oc_wrôe
 (
fûe
 *fûe, c⁄° 
__u£r
 * 
buf„r
,

21 
cou¡
, *
d©a
)

23 *
°r
;

24 
°r
 = 
	`kmÆloc
 ((
size_t
Ë
cou¡
, 
GFP_KERNEL
);

25 i‡(
	`c›y_‰om_u£r
 (
°r
, 
buf„r
, 
cou¡
)) {

26 
	`k‰ì
 (
°r
);

27  -
EFAULT
;

29 
	`ssˇnf
 (
°r
, "%d", &
∑øm
);

30 
	`¥ötk
 (
KERN_INFO
 "∑øm ha†bì¿£àtÿ%d\n", 
∑øm
);

31 
	`k‰ì
 (
°r
);

32  
cou¡
;

33 
	}
}

35 
__öô
 
	$my_öô
 ()

37 
my_¥oc
 = 
	`¸óã_¥oc_íåy
 (
NODE
, 
S_IRUGO
 | 
S_IWUSR
, 
NULL
);

38 i‡(!
my_¥oc
) {

39 
	`¥ötk
 (
KERN_ERR
 "I faûedÅÿmakê%s\n", 
NODE
);

42 
	`¥ötk
 (
KERN_INFO
 "I cª©ed %s\n", 
NODE
);

43 
my_¥oc
->
ªad_¥oc
 = 
my_¥oc_ªad
;

44 
my_¥oc
->
wrôe_¥oc
 = 
my_¥oc_wrôe
;

46 
	}
}

48 
__exô
 
	$my_exô
 ()

50 i‡(
my_¥oc
) {

51 
	`ªmove_¥oc_íåy
 (
NODE
, 
NULL
);

52 
	`¥ötk
 (
KERN_INFO
 "Removed %s\n", 
NODE
);

54 
	}
}

56 
moduÀ_öô
 (
my_öô
);

57 
moduÀ_exô
 (
my_exô
);

59 
MODULE_AUTHOR
 ("Team Veda");

60 
MODULE_DESCRIPTION
 ("proc files");

61 
MODULE_LICENSE
 ("GPL");

	@ddex/char/ioctl/rwioctl_test.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<sys/io˘l.h
>

7 
	~<°rög.h
>

8 
	~"veda_ch¨_devi˚.h
"

11 
my_d©a
 
	gmy_d©a
;

12 
	$maö
 (
¨gc
, *
¨gv
[])

14 
fd
, 
rc
;

15 
MY_IOCTL
;

16 *
nodíame
 = "/dev/veda_cdrv";

20 i‡(
¨gc
 > 1)

21 
nodíame
 = 
¨gv
[1];

22 
fd
 = 
	`›í
 (
nodíame
, 
O_RDWR
);

23 
	`¥ötf
 (" I o≥√dÅhêdevi˚Çode, fûêdes¸ùt‹ = %d\n", 
fd
);

27 
MY_IOCTL
 = ()
	`_IOR
 (
VEDA_MAGIC
, 1, 
my_d©a
);

28 
rc
 = 
	`io˘l
 (
fd
, 
MY_IOCTL
, &
my_d©a
);

29 
	`¥ötf
 ("\¿r¯‰om io˘»ªadög = %d \n\n", 
rc
);

30 
¥ötf


32 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

36 
	`°r˝y
 (
my_d©a
.
s
, "a string");

37 
my_d©a
.
i
 = 10;

38 
my_d©a
.
x
 = -700;

39 
	`¥ötf
 ("\n Sending from user-space:\n");

40 
¥ötf


42 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

46 
MY_IOCTL
 = ()
	`_IOW
 (
VEDA_MAGIC
, 1, 
my_d©a
);

47 
rc
 = 
	`io˘l
 (
fd
, 
MY_IOCTL
, &
my_d©a
);

48 
	`¥ötf
 ("\¿r¯‰om io˘»%d \n\n", 
rc
);

52 
MY_IOCTL
 = ()
	`_IOR
 (
VEDA_MAGIC
, 1, 
my_d©a
);

53 
rc
 = 
	`io˘l
 (
fd
, 
MY_IOCTL
, &
my_d©a
);

54 
	`¥ötf
 ("\¿r¯‰om io˘»ªadög = %d \n\n", 
rc
);

55 
¥ötf


57 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

59 
	`˛o£
 (
fd
);

60 
	`exô
 (0);

62 
	}
}

	@ddex/char/ioctl/varioctl_test.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<sys/io˘l.h
>

7 
	~<mÆloc.h
>

8 
	~<°rög.h
>

9 
	~"veda_ch¨_devi˚.h
"

10 
	#MY_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),size)

	)

11 
	#MY_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
, (ty≥),“r),size)

	)

13 
	$maö
 ()

15 
fd
, 
rc
, 
i
, 
lbuf
;

16 *
buf„r
, *
nodíame
 = "/dev/veda_cdrv";

17 
MYIOC_X
;

20 
fd
 = 
	`›í
 (
nodíame
, 
O_RDWR
);

21 
	`¥ötf
 (" I o≥√dÅhêdevi˚Çode, fûêdes¸ùt‹ = %d\n", 
fd
);

24 
lbuf
 = 1000;

25 
	`¥ötf
 (" Iám goögÅÿ£nd backánd f‹thá buf„∏o‡%d byãs\n", 
lbuf
);

28 
buf„r
 = 
	`mÆloc
 (
lbuf
);

31 
	`¥ötf
 ("\n Getting data fromÅhe kernel:\n");

33 
MYIOC_X
 = ()
	`MY_IOR
 (
VEDA_MAGIC
, 1, 
lbuf
);

35 
rc
 = 
	`io˘l
 (
fd
, 
MYIOC_X
, 
buf„r
);

37 
	`¥ötf
 ("\¿r¯‰om io˘»%d \n\n", 
rc
);

39 
	`¥ötf
 (" buffer in user-space is =\n ");

40 
i
 = 0; i < 
lbuf
; i++)

41 
	`¥ötf
 ("%c", 
buf„r
[
i
]);

42 
	`¥ötf
 ("\n");

46 
	`mem£t
 (
buf„r
, '0', 
lbuf
);

48 
	`¥ötf
 ("\n Sending dataÅoÅhe kernel:\n");

49 
MYIOC_X
 = ()
	`MY_IOW
 (
VEDA_MAGIC
, 1, 
lbuf
);

50 
rc
 = 
	`io˘l
 (
fd
, 
MYIOC_X
, 
buf„r
);

51 
	`¥ötf
 ("\¿r¯‰om io˘»%d \n\n", 
rc
);

53 
	`¥ötf
 (" buffer in user-space is =\n ");

54 
i
 = 0; i < 
lbuf
; i++)

55 
	`¥ötf
 ("%c", 
buf„r
[
i
]);

56 
	`¥ötf
 ("\n");

58 
	`˛o£
 (
fd
);

59 
	`exô
 (0);

60 
	}
}

	@ddex/char/ioctl/veda_char_device.h

1 #i‚de‡
_VEDA_CHAR_DEVICE_H_


2 
	#_VEDA_CHAR_DEVICE_H_


	)

4 
	~<asm/io˘l.h
>

6 
	smy_d©a


8 
	mi
;

9 
	mx
;

10 
	ms
[256];

14 
	#VEDA_MAGIC
 'L'

	)

	@ddex/char/kbd/five/kboard.h

5 
	#KBOARD_BASE_PORT
 0x60

	)

6 
	#KBOARD_DATA_PORT
 
KBOARD_BASE_PORT


	)

7 
	#KBOARD_STATUS_REG
 
KBOARD_BASE_PORT
 + 0x4

	)

8 
	#KBOARD_CTL_REG
 
KBOARD_BASE_PORT
 + 0x4

	)

12 
	#KB_SELFTEST_CMD
 0xAA

	)

13 
	#KB_ENABLE_CMD
 0xAE

	)

14 
	#KB_DISABLE_CMD
 0xAD

	)

18 
	#KB_TEST_SUCC
 0x04

	)

21 
	#ªad_kbd_öput
(Ë
	`öb
(
KBOARD_DATA_PORT
)

	)

23 
	#ªad_kbd_°©us
(Ë
	`öb
(
KBOARD_STATUS_REG
)

	)

25 
	#wrôe_kbd_comm™d
(
cmd
Ë
	`outb
(cmd,
KBOARD_CTL_REG
)

	)

27 
	#wrôe_kbd_ouçut
(
d©a
Ë
	`outb
(d©a,
KBOARD_DATA_PORT
)

	)

	@ddex/char/kbd/five/kboard5.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/vîsi⁄.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/fs.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/i›‹t.h
>

18 
	~<asm/io.h
>

19 
	~<asm/uac˚ss.h
>

20 
	~"kbﬂrd.h
"

21 
	~<asm/úq.h
>

22 
	~<löux/waô.h
>

23 
	~<löux/öãºu±.h
>

25 
	#KB_INT
 1

	)

27 
	~<löux/cdev.h
>

28 
	~<löux/devi˚.h
>

30 
MODULE_AUTHOR
("VEDA");

31 
MODULE_DESCRIPTION
("Keyboard Device Driver - Test");

32 
MODULE_LICENSE
("GPL");

34 
kb_öô
();

35 
kb_exô
();

37 
moduÀ_öô
(
kb_öô
);

38 
moduÀ_exô
(
kb_exô
);

41 
kb_›í
(
öode
 *inode,

42 
fûe
 *file);

43 
kb_ªÀa£
(
öode
 *inode,

44 
fûe
 *file);

45 
ssize_t
 
kb_ªad
(
fûe
 *file,

46 *
buf
,

47 
size_t
 
lbuf
,

48 
loff_t
 *
µos
);

50 
úqªtu∫_t
 
kb_öãºu±
(,*);

53 
fûe_›î©i⁄s
 
	gkb_fûe_›s
;

55 
cdev
 *
	gveda_cdev
;

56 
dev_t
 
	gmydev
;

57 
	göu£
;

58 
	gch¨_devi˚_id
;

59 
	gsome_d©a
 = 100;

61 
waô_queue_hód_t
 
	gkb_queue
;

63 
	gup_code
;

65 
	gkey_codes
[10]={82,79,80,81,75,76,77,71,72,73};

68 
	gkey_ascii_codes
[10]={49,50,51,52,53,54,55,56,57,58};

70 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

71 
˛ass_sim∂e
 *
	gveda_˛ass
=
NULL
;

73 
˛ass
 *
	gveda_˛ass
=
NULL
;

76 
	$kb_›í
(
öode
 *öode, 
fûe
 *
fûp
)

78 if(
öu£
)

79  -
EBUSY
;

80 
öu£
 = 1;

82 
	}
}

84 
	$kb_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

86 
öu£
 = 0;

88 
	}
}

90 
	gev¡
;

92 
ssize_t
 
	$kb_ªad
(
fûe
 *
fûp
,*
buf
, 
size_t
 
cou¡
,

93 
loff_t
 *
f_pos
)

95 
ªt
;

96 
ev¡
=0;

97 
	`waô_evít
(
kb_queue
,
ev¡
==1);

100 
ªt
 = 
	`c›y_to_u£r
(
buf
,&
up_code
,1);

102 
	}
}

105 
	$key_code
(
sˇncode
){

106 
i
;

107 
i
=0;i<10;i++){

108 if(
key_codes
[
i
] =
sˇncode
 )

109  
i
;

112 
	}
}

115 
úqªtu∫_t
 
	$kb_öãºu±
(
úq
, *
dev_id
)

117 
sˇncode
;

118 
kc
;

119 
sˇncode
 = 
	`ªad_kbd_öput
();

120 
kc
 = 
	`key_code
(
sˇncode
);

122 if–
kc
 !=255){

123 
up_code
 =
key_ascii_codes
[
kc
];

124 
ev¡
=1;

125 
	`wake_up
(&
kb_queue
);

128 
	}
}

131 
	$kb_öô
()

133 
ªt
;

134 
öu£
 = 0;

135 
kb_fûe_›s
.
ow√r
 = 
THIS_MODULE
,

136 
kb_fûe_›s
.
ªad
 = 
kb_ªad
;

137 
kb_fûe_›s
.
›í
 = 
kb_›í
;

138 
kb_fûe_›s
.
ªÀa£
 = 
kb_ªÀa£
;

140 
ªt
 = 
	`Æloc_chrdev_ªgi⁄
(&
mydev
,0,1,"mykb");

141 
ch¨_devi˚_id
 = 
	`MAJOR
(
mydev
);

143 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

144 
veda_˛ass
 = 
	`˛ass_sim∂e_¸óã
(
THIS_MODULE
,"Veda");

145 if(
	`IS_ERR
(
veda_˛ass
)){

146 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

149 
	`˛ass_sim∂e_devi˚_add
(
veda_˛ass
,
mydev
,
NULL
,"mykb");

152 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

153 
veda_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
,"Veda");

154 if(
	`IS_ERR
(
veda_˛ass
)){

155 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

158 
	`devi˚_¸óã
(
veda_˛ass
,
NULL
,
mydev
,NULL,"mykb");

163 
veda_cdev
 = 
	`cdev_Æloc
();

165 
veda_cdev
 -> 
ow√r
 = 
THIS_MODULE
;

166 
veda_cdev
 -> 
›s
 = &
kb_fûe_›s
;

168 
ªt
 = 
	`cdev_add
(
veda_cdev
, 
mydev
, 1);

170 
	`öô_waôqueue_hód
(&
kb_queue
);

173 if–
ªt
 < 0 ) {

174 
	`¥ötk
("ErrorÑegistering device driver\n");

175  
ªt
;

179 
	`¥ötk
("\¿Devi˚ Regôîed wôh id : %d",
ch¨_devi˚_id
);

181 if(
	`ªque°_úq
(
KB_INT
,
kb_öãºu±
,
IRQF_SHARED
, "mykb",(*)&
some_d©a
)){

182 
	`¥ötk
(
KERN_ERR
 "mykb: cannotÑegister IRQ %d\n", 8);

183  -
EIO
;

185 
	`¥ötk
("\n mykb interruptÑegistered\n");

187 
	}
}

190 
	$kb_exô
()

192 
	`‰ì_úq
(
KB_INT
,&
some_d©a
);

194 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

195 
	`˛ass_sim∂e_devi˚_ªmove
(
mydev
);

196 
	`˛ass_sim∂e_de°roy
(
veda_˛ass
);

198 
	`devi˚_de°roy
(
veda_˛ass
,
mydev
);

199 
	`˛ass_de°roy
(
veda_˛ass
);

202 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

203 
	`cdev_dñ
(
veda_cdev
);

204 
	`¥ötk
("\n Module Successfully Un-registered\n");

206 
	}
}

	@ddex/char/kbd/five/testkb.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<f˙é.h
>

7 
	$maö
(){

8 
fd
;

9 
b
;

10 
no
,
i
;

11 
fd
 = 
	`›í
("/dev/mykb",
O_RDONLY
);

12 
	`¥ötf
(" fd = %d\n",
fd
);

13 
	`¥ötf
("Enter key inÇumaric keyÖad with NumLock \n");

15 
i
=0;i<20;i++){

16 
no
 = 
	`ªad
(
fd
,&
b
,1);

17 
	`¥ötf
("\¿codê%d \n",
b
);

19 
	`˛o£
(
fd
);

20 
	}
}

	@ddex/char/kbd/four/kboard.h

5 
	#KBOARD_BASE_PORT
 0x60

	)

6 
	#KBOARD_DATA_PORT
 
KBOARD_BASE_PORT


	)

7 
	#KBOARD_STATUS_REG
 
KBOARD_BASE_PORT
 + 0x4

	)

8 
	#KBOARD_CTL_REG
 
KBOARD_BASE_PORT
 + 0x4

	)

12 
	#KB_SELFTEST_CMD
 0xAA

	)

13 
	#KB_ENABLE_CMD
 0xAE

	)

14 
	#KB_DISABLE_CMD
 0xAD

	)

18 
	#KB_TEST_SUCC
 0x04

	)

21 
	#ªad_kbd_öput
(Ë
	`öb
(
KBOARD_DATA_PORT
)

	)

23 
	#ªad_kbd_°©us
(Ë
	`öb
(
KBOARD_STATUS_REG
)

	)

25 
	#wrôe_kbd_comm™d
(
cmd
Ë
	`outb
(cmd,
KBOARD_CTL_REG
)

	)

27 
	#wrôe_kbd_ouçut
(
d©a
Ë
	`outb
(d©a,
KBOARD_DATA_PORT
)

	)

	@ddex/char/kbd/four/kboard4.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/vîsi⁄.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/fs.h
>

17 
	~<löux/¶ab.h
>

18 
	~<löux/i›‹t.h
>

19 
	~<löux/vîsi⁄.h
>

20 
	~<asm/io.h
>

21 
	~<asm/uac˚ss.h
>

23 
	~<löux/waô.h
>

24 
	~<löux/öãºu±.h
>

26 
	~"kbﬂrd.h
"

27 
	#KB_INT
 1

	)

29 
	~<löux/cdev.h
>

30 
	~<löux/devi˚.h
>

33 
MODULE_AUTHOR
("VEDA");

34 
MODULE_DESCRIPTION
("Keyboard Device Driver - Test");

35 
MODULE_LICENSE
("GPL");

37 
myöô
();

38 
myexô
();

40 
moduÀ_öô
(
myöô
);

41 
moduÀ_exô
(
myexô
);

44 
kb_›í
(
öode
 *inode,

45 
fûe
 *file);

46 
kb_ªÀa£
(
öode
 *inode,

47 
fûe
 *file);

48 
ssize_t
 
kb_ªad
(
fûe
 *file,

49 *
buf
,

50 
size_t
 
lbuf
,

51 
loff_t
 *
µos
);

53 
úqªtu∫_t
 
kb_öãºu±
(,*);

56 
fûe_›î©i⁄s
 
	gkb_fûe_›s
;

58 
cdev
 *
	gveda_cdev
;

59 
dev_t
 
	gmydev
;

61 
	gch¨_devi˚_id
;

62 
	göu£
;

64 
	gsome_d©a
 = 100;

66 
waô_queue_hód_t
 
	gkb_queue
;

68 
	gup_code
;

70 
	gkey_codes
[10]={82,79,80,81,75,76,77,71,72,73};

73 
	gwãv¡
;

75 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

76 
˛ass_sim∂e
 *
	gveda_˛ass
=
NULL
;

78 
˛ass
 *
	gveda_˛ass
=
NULL
;

82 
	$kb_›í
(
öode
 *öode, 
fûe
 *
fûp
)

84 if(
öu£
)

85  -
EBUSY
;

86 
öu£
 = 1;

88 
	}
}

90 
	$kb_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

92 
öu£
 = 0;

94 
	}
}

96 
ssize_t
 
	$kb_ªad
(
fûe
 *
fûp
,*
buf
, 
size_t
 
cou¡
,

97 
loff_t
 *
f_pos
)

99 
ªt
;

100 
wãv¡
=0;

101 
	`waô_evít
(
kb_queue
,
wãv¡
==1);

103 
ªt
 = 
	`c›y_to_u£r
(
buf
,&
up_code
,1);

105 
	}
}

107 
	$key_code
(
sˇncode
){

108 
i
;

109 
i
=0;i<10;i++){

110 if(
key_codes
[
i
] =
sˇncode
 )

111  
i
;

114 
	}
}

116 
úqªtu∫_t
 
	$kb_öãºu±
(
úq
, *
dev_id
)

118 
sˇncode
;

119 
kc
;

120 
sˇncode
 = 
	`ªad_kbd_öput
();

121 
	`¥ötk
("Sˇncode:%d\n",
sˇncode
);

122 
kc
 = 
	`key_code
(
sˇncode
);

123 
	`¥ötk
("key code:%d\n",
kc
);

125 if–
kc
 !=255){

126 
up_code
 = 
kc
;

127 
	`¥ötk
("u∞code:%d\n",
up_code
);

128 
wãv¡
=1;

129 
	`wake_up
(&
kb_queue
);

132 
	}
}

134 
	$myöô
()

136 
ªt
;

137 
öu£
 = 0;

138 
ªt
 = 
	`Æloc_chrdev_ªgi⁄
(&
mydev
,0,1,"mykb");

139 
ch¨_devi˚_id
 = 
	`MAJOR
(
mydev
);

141 
kb_fûe_›s
.
ow√r
 = 
THIS_MODULE
,

142 
kb_fûe_›s
.
ªad
 = 
kb_ªad
;

143 
kb_fûe_›s
.
›í
 = 
kb_›í
;

144 
kb_fûe_›s
.
ªÀa£
 = 
kb_ªÀa£
;

148 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

149 
veda_˛ass
 = 
	`˛ass_sim∂e_¸óã
(
THIS_MODULE
,"Veda");

150 if(
	`IS_ERR
(
veda_˛ass
)){

151 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

154 
	`˛ass_sim∂e_devi˚_add
(
veda_˛ass
,
mydev
,
NULL
,"mykb");

157 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

158 
veda_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
,"Veda");

159 if(
	`IS_ERR
(
veda_˛ass
)){

160 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

163 
	`devi˚_¸óã
(
veda_˛ass
,
NULL
,
mydev
,NULL,"mykb");

167 
veda_cdev
 = 
	`cdev_Æloc
();

169 
veda_cdev
 -> 
ow√r
 = 
THIS_MODULE
;

170 
veda_cdev
 -> 
›s
 = &
kb_fûe_›s
;

172 
ªt
 = 
	`cdev_add
(
veda_cdev
, 
mydev
, 1);

173 if–
ªt
 < 0 ) {

174 
	`¥ötk
("ErrorÑegistering device driver\n");

175  
ªt
;

178 
	`öô_waôqueue_hód
(&
kb_queue
);

180 
	`¥ötk
("\¿Devi˚ Regi°îed wôh maj‹Çÿ: %d",
ch¨_devi˚_id
);

183 if(
	`ªque°_úq
(
KB_INT
,
kb_öãºu±
,
IRQF_SHARED
, "mykb",(*)&
some_d©a
)){

184 
	`¥ötk
(
KERN_ERR
 "mykb: cannotÑegister IRQ %d\n", 8);

185  -
EIO
;

187 
	`¥ötk
("\nmykb interruptÑegistered\n");

189 
	}
}

191 
	$myexô
()

193 
	`‰ì_úq
(
KB_INT
,&
some_d©a
);

194 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

195 
	`˛ass_sim∂e_devi˚_ªmove
(
mydev
);

196 
	`˛ass_sim∂e_de°roy
(
veda_˛ass
);

198 
	`devi˚_de°roy
(
veda_˛ass
,
mydev
);

199 
	`˛ass_de°roy
(
veda_˛ass
);

202 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

203 
	`cdev_dñ
(
veda_cdev
);

204 
	`¥ötk
("\n Module Successfully Un-registered\n");

205 
	}
}

	@ddex/char/kbd/four/testkb.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<f˙é.h
>

7 
	$maö
(){

8 
fd
;

9 
b
;

10 
no
,
i
;

11 
fd
 = 
	`›í
("/dev/mykb",
O_RDONLY
);

12 
	`¥ötf
(" fd = %d\n",
fd
);

13 
i
=0;i<20;i++){

14 
no
 = 
	`ªad
(
fd
,&
b
,1);

15 
	`¥ötf
("codê%d \n",
b
);

16 
	`gëch¨
();

18 
	`˛o£
(
fd
);

19 
	}
}

	@ddex/char/kbd/one/kboard1.c

10 
	~<löux/kî√l.h
>

11 
	~<löux/moduÀ.h
>

12 
	~<löux/vîsi⁄.h
>

13 
	~<löux/fs.h
>

14 
	~<asm/uac˚ss.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/sched.h
>

18 
	~<löux/waô.h
>

19 
	~<asm/¥o˚ss‹.h
>

20 
	~<löux/cdev.h
>

21 
	~<löux/devi˚.h
>

22 
	~<löux/£rio.h
>

23 
	~<löux/waô.h
>

24 
	~<löux/úq.h
>

25 
	~<löux/vîsi⁄.h
>

26 
	~<asm/io.h
>

29 
	#KB_INT
 1

	)

31 
DECLARE_WAIT_QUEUE_HEAD
(
kb_queue
);

33 
MODULE_AUTHOR
("VEDA");

34 
MODULE_DESCRIPTION
("Keyboard Device Driver - Test");

35 
MODULE_LICENSE
("GPL");

37 
öô_kb
();

38 
exô_kb
();

40 
moduÀ_öô
(
öô_kb
);

41 
moduÀ_exô
(
exô_kb
);

44 
kb_›í
(
öode
 *inode,

45 
fûe
 *file);

46 
kb_ªÀa£
(
öode
 *inode,

47 
fûe
 *file);

48 
kb_ªad
(
fûe
 *file,

49 *
buf
,

50 
size_t
 
lbuf
,

51 
loff_t
 *
µos
);

53 
úqªtu∫_t
 
kb_öãºu±
(,*);

56 
fûe_›î©i⁄s
 
	gkb_fûe_›s
;

58 
	gkb_id
;

59 
cdev
 *
	gveda_cdev
;

60 
dev_t
 
	gmydev
;

61 
	gsome_d©a
=100;

63 
	gwãv¡
;

65 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

66 
˛ass_sim∂e
 *
	gveda_˛ass
=
NULL
;

68 
˛ass
 *
	gveda_˛ass
=
NULL
;

73 
	$öô_kb
()

75 
ªt
;

76 
kb_fûe_›s
.
ow√r
 = 
THIS_MODULE
,

77 
kb_fûe_›s
.
ªad
 = 
kb_ªad
;

78 
kb_fûe_›s
.
›í
 = 
kb_›í
;

79 
kb_fûe_›s
.
ªÀa£
 = 
kb_ªÀa£
;

81 
ªt
=
	`Æloc_chrdev_ªgi⁄
(&
mydev
,0,1,"mykb");

83 
kb_id

	`MAJOR
(
mydev
);

87 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

88 
veda_˛ass
 = 
	`˛ass_sim∂e_¸óã
(
THIS_MODULE
,"Veda");

89 if(
	`IS_ERR
(
veda_˛ass
)){

90 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

93 
	`˛ass_sim∂e_devi˚_add
(
veda_˛ass
,
mydev
,
NULL
,"mykb");

96 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

97 
veda_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
,"Veda");

98 if(
	`IS_ERR
(
veda_˛ass
)){

99 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

102 
	`devi˚_¸óã
(
veda_˛ass
,
NULL
,
mydev
,NULL,"mykb");

105 
veda_cdev

	`cdev_Æloc
();

108 
veda_cdev
->
ow√r
=
THIS_MODULE
;

109 
veda_cdev
->
›s
&
kb_fûe_›s
;

111 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,1);

112 if–
ªt
 < 0 ) {

113 
	`¥ötk
("ErrorÑegistering device driver\n");

114  
ªt
;

116 
	`¥ötk
("Devi˚ Regi°îed wôh MAJOR NO[%d]\n",
kb_id
);

118 if(
	`ªque°_úq
(
KB_INT
,
kb_öãºu±
,
IRQF_SHARED
, "mykb",(*)&
some_d©a
)){

119 
	`¥ötk
(
KERN_ERR
 "mykb: cannotÑegister IRQ %d\n", 1);

120  -
EIO
;

122 
	`¥ötk
("mykb interruptÑegistered\n");

125 
	}
}

127 
	$exô_kb
()

129 
	`‰ì_úq
(
KB_INT
,&
some_d©a
);

131 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

132 
	`˛ass_sim∂e_devi˚_ªmove
(
mydev
);

133 
	`˛ass_sim∂e_de°roy
(
veda_˛ass
);

135 
	`devi˚_de°roy
(
veda_˛ass
,
mydev
);

136 
	`˛ass_de°roy
(
veda_˛ass
);

139 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

140 
	`cdev_dñ
(
veda_cdev
);

141 
	`¥ötk
("\n ModuleÑemoved");

142 
	}
}

144 
	#SUCCESS
 0

	)

145 
	$kb_›í
(
öode
 *inode,

146 
fûe
 *file)

148 
cou¡î
 = 0;

149 
cou¡î
++;

150 
	`¥ötk
("Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

151 
	`¥ötk
("Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n", 
cuºít
->
pid
 );

152  
SUCCESS
;

153 
	}
}

155 
	$kb_ªÀa£
(
öode
 *inode,

156 
fûe
 *file)

158  
SUCCESS
;

159 
	}
}

161 
	$kb_ªad
(
fûe
 *file,

162 *
buf
,

163 
size_t
 
lbuf
,

164 
loff_t
 *
µos
)

167 
	}
}

169 
úqªtu∫_t
 
	$kb_öãºu±
(
úq
, *
dev_id
)

171 
	`¥ötk
("\n kb interrupt has occurrured\n");

173 
	}
}

	@ddex/char/kbd/one/kboard1.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

23 
MODULE_INFO
(
§cvîsi⁄
, "6468A36575D93AAFC1CB90F");

	@ddex/char/kbd/three/kboard.h

5 
	#KBOARD_BASE_PORT
 0x60

	)

6 
	#KBOARD_DATA_PORT
 
KBOARD_BASE_PORT


	)

7 
	#KBOARD_STATUS_REG
 
KBOARD_BASE_PORT
 + 0x4

	)

8 
	#KBOARD_CTL_REG
 
KBOARD_BASE_PORT
 + 0x4

	)

12 
	#KB_SELFTEST_CMD
 0xAA

	)

13 
	#KB_ENABLE_CMD
 0xAE

	)

14 
	#KB_DISABLE_CMD
 0xAD

	)

18 
	#KB_TEST_SUCC
 0x04

	)

21 
	#ªad_kbd_öput
(Ë
	`öb
(
KBOARD_DATA_PORT
)

	)

23 
	#ªad_kbd_°©us
(Ë
	`öb
(
KBOARD_STATUS_REG
)

	)

25 
	#wrôe_kbd_comm™d
(
cmd
Ë
	`outb
(cmd,
KBOARD_CTL_REG
)

	)

27 
	#wrôe_kbd_ouçut
(
d©a
Ë
	`outb
(d©a,
KBOARD_DATA_PORT
)

	)

	@ddex/char/kbd/three/kboard3.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/vîsi⁄.h
>

14 
	~<löux/fs.h
>

15 
	~<asm/uac˚ss.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/öô.h
>

18 
	~<löux/sched.h
>

19 
	~<löux/waô.h
>

20 
	~<asm/¥o˚ss‹.h
>

21 
	~<löux/cdev.h
>

22 
	~<löux/devi˚.h
>

23 
	~<löux/£rio.h
>

24 
	~<löux/waô.h
>

25 
	~<löux/úq.h
>

26 
	~<löux/vîsi⁄.h
>

27 
	~<asm/io.h
>

28 
	~"kbﬂrd.h
"

30 
	#KB_INT
 1

	)

33 
MODULE_AUTHOR
("VEDA");

34 
MODULE_DESCRIPTION
("Keyboard Device Driver - Test");

35 
MODULE_LICENSE
("GPL");

37 
öô_kb
();

38 
exô_kb
();

40 
moduÀ_öô
(
öô_kb
);

41 
moduÀ_exô
(
exô_kb
);

44 
kb_›í
(
öode
 *inode,

45 
fûe
 *file);

46 
kb_ªÀa£
(
öode
 *inode,

47 
fûe
 *file);

48 
kb_ªad
(
fûe
 *file,

49 *
buf
,

50 
size_t
 
lbuf
,

51 
loff_t
 *
µos
);

53 
úqªtu∫_t
 
kb_öãºu±
(,*);

56 
fûe_›î©i⁄s
 
	gkb_fûe_›s
;

58 
	gkb_id
;

59 
cdev
 *
	gveda_cdev
;

60 
dev_t
 
	gmydev
;

61 
	gsome_d©a
=100;

63 
waô_queue_hód_t
 
	gmykb_queue
;

64 
	gwãv¡
;

65 
	gupcode
;

67 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

68 
˛ass_sim∂e
 *
	gveda_˛ass
=
NULL
;

70 
˛ass
 *
	gveda_˛ass
=
NULL
;

73 
	$öô_kb
()

75 
ªt
;

76 
kb_fûe_›s
.
ow√r
 = 
THIS_MODULE
,

77 
kb_fûe_›s
.
ªad
 = 
kb_ªad
;

78 
kb_fûe_›s
.
›í
 = 
kb_›í
;

79 
kb_fûe_›s
.
ªÀa£
 = 
kb_ªÀa£
;

84 
ªt
=
	`Æloc_chrdev_ªgi⁄
(&
mydev
,0,1,"mykb");

86 
kb_id

	`MAJOR
(
mydev
);

90 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

91 
veda_˛ass
 = 
	`˛ass_sim∂e_¸óã
(
THIS_MODULE
,"Veda");

92 if(
	`IS_ERR
(
veda_˛ass
)){

93 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

96 
	`˛ass_sim∂e_devi˚_add
(
veda_˛ass
,
mydev
,
NULL
,"mykb");

99 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

100 
veda_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
,"Veda");

101 if(
	`IS_ERR
(
veda_˛ass
)){

102 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

105 
	`devi˚_¸óã
(
veda_˛ass
,
NULL
,
mydev
,NULL,"mykb");

109 
veda_cdev

	`cdev_Æloc
();

112 
veda_cdev
->
ow√r
=
THIS_MODULE
;

113 
veda_cdev
->
›s
&
kb_fûe_›s
;

115 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,1);

116 if–
ªt
 < 0 ) {

117 
	`¥ötk
("ErrorÑegistering device driver\n");

118  
ªt
;

120 
	`¥ötk
("Devi˚ Regi°îed wôh MAJOR NO[%d]\n",
kb_id
);

122 if(
	`ªque°_úq
(
KB_INT
,
kb_öãºu±
,
IRQF_SHARED
, "mykb",(*)&
some_d©a
)){

123 
	`¥ötk
(
KERN_ERR
 "mykb: cannotÑegister IRQ %d\n", 8);

124  -
EIO
;

126 
	`öô_waôqueue_hód
–&
mykb_queue
 );

128 
	`¥ötk
("mykb interruptÑegistered\n");

131 
	}
}

133 
	$exô_kb
()

135 
	`‰ì_úq
(
KB_INT
,&
some_d©a
);

137 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

138 
	`˛ass_sim∂e_devi˚_ªmove
(
mydev
);

139 
	`˛ass_sim∂e_de°roy
(
veda_˛ass
);

141 
	`devi˚_de°roy
(
veda_˛ass
,
mydev
);

142 
	`˛ass_de°roy
(
veda_˛ass
);

145 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

146 
	`cdev_dñ
(
veda_cdev
);

147 
	`¥ötk
("\n ModuleÑemoved");

148 
	}
}

150 
	#SUCCESS
 0

	)

152 
	$kb_›í
(
öode
 *inode,

153 
fûe
 *file)

155 
cou¡î
 = 0;

156 
cou¡î
++;

157 
	`¥ötk
("Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

158 
	`¥ötk
("Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n", 
cuºít
->
pid
 );

159  
SUCCESS
;

160 
	}
}

162 
	$kb_ªÀa£
(
öode
 *inode,

163 
fûe
 *file)

165  
SUCCESS
;

166 
	}
}

168 
	$kb_ªad
(
fûe
 *file,

169 *
buf
,

170 
size_t
 
lbuf
,

171 
loff_t
 *
µos
)

173 
ªt
;

174 
wãv¡
=0;

175 
	`waô_evít_öãºu±ibÀ
(
mykb_queue
,
wãv¡
==1);

177 
ªt
=
	`c›y_to_u£r
(
buf
,&
upcode
,1);

181 
	}
}

183 
úqªtu∫_t
 
	$kb_öãºu±
(
úq
, *
dev_id
)

185 
sˇncode
;

186 
sˇncode
 = 
	`ªad_kbd_öput
();

187 
	`¥ötk
("sˇncodê%d\n",
sˇncode
);

188 
upcode
=
sˇncode
;

189 
wãv¡
=1;

190 
	`wake_up_öãºu±ibÀ
(&
mykb_queue
);

192 
	}
}

	@ddex/char/kbd/three/testkb.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<f˙é.h
>

7 
	$maö
(){

8 
fd
;

9 
b
;

10 
no
,
i
;

11 
fd
 = 
	`›í
("/dev/mykb",
O_RDONLY
);

12 
	`¥ötf
(" fd = %d\n",
fd
);

13 
i
=0;i<20;i++){

14 
no
 = 
	`ªad
(
fd
,&
b
,1);

15 
	`¥ötf
("codê%d \n",
b
);

17 
	`˛o£
(
fd
);

18 
	}
}

	@ddex/char/kbd/two/kboard.h

5 
	#KBOARD_BASE_PORT
 0x60

	)

6 
	#KBOARD_DATA_PORT
 
KBOARD_BASE_PORT


	)

7 
	#KBOARD_STATUS_REG
 
KBOARD_BASE_PORT
 + 0x4

	)

8 
	#KBOARD_CTL_REG
 
KBOARD_BASE_PORT
 + 0x4

	)

12 
	#KB_SELFTEST_CMD
 0xAA

	)

13 
	#KB_ENABLE_CMD
 0xAE

	)

14 
	#KB_DISABLE_CMD
 0xAD

	)

18 
	#KB_TEST_SUCC
 0x04

	)

21 
	#ªad_kbd_öput
(Ë
	`öb
(
KBOARD_DATA_PORT
)

	)

23 
	#ªad_kbd_°©us
(Ë
	`öb
(
KBOARD_STATUS_REG
)

	)

25 
	#wrôe_kbd_comm™d
(
cmd
Ë
	`outb
(cmd,
KBOARD_CTL_REG
)

	)

27 
	#wrôe_kbd_ouçut
(
d©a
Ë
	`outb
(d©a,
KBOARD_DATA_PORT
)

	)

	@ddex/char/kbd/two/kboard2.c

10 
	~<löux/moduÀ.h
>

11 
	~<löux/vîsi⁄.h
>

12 
	~<löux/fs.h
>

13 
	~<asm/uac˚ss.h
>

14 
	~<löux/¶ab.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/sched.h
>

17 
	~<löux/waô.h
>

18 
	~<asm/¥o˚ss‹.h
>

19 
	~<löux/cdev.h
>

20 
	~<löux/devi˚.h
>

21 
	~<löux/£rio.h
>

22 
	~<löux/waô.h
>

23 
	~<löux/úq.h
>

24 
	~<löux/vîsi⁄.h
>

25 
	~<asm/io.h
>

26 
	~"kbﬂrd.h
"

28 
	#KB_INT
 1

	)

30 
DECLARE_WAIT_QUEUE_HEAD
(
kb_queue
);

32 
MODULE_AUTHOR
("VEDA");

33 
MODULE_DESCRIPTION
("Keyboard Device Driver - Test");

34 
MODULE_LICENSE
("GPL");

36 
öô_kb
();

37 
exô_kb
();

39 
moduÀ_öô
(
öô_kb
);

40 
moduÀ_exô
(
exô_kb
);

43 
kb_›í
(
öode
 *inode,

44 
fûe
 *file);

45 
kb_ªÀa£
(
öode
 *inode,

46 
fûe
 *file);

47 
kb_ªad
(
fûe
 *file,

48 *
buf
,

49 
size_t
 
lbuf
,

50 
loff_t
 *
µos
);

52 
úqªtu∫_t
 
kb_öãºu±
(,*);

55 
fûe_›î©i⁄s
 
	gkb_fûe_›s
;

57 
	gkb_id
;

58 
cdev
 *
	gveda_cdev
;

59 
dev_t
 
	gmydev
;

60 
	gsome_d©a
=100;

62 
	gwãv¡
;

64 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

65 
˛ass_sim∂e
 *
	gveda_˛ass
=
NULL
;

67 
˛ass
 *
	gveda_˛ass
=
NULL
;

71 
	$öô_kb
()

73 
ªt
;

74 
kb_fûe_›s
.
ow√r
 = 
THIS_MODULE
,

75 
kb_fûe_›s
.
ªad
 = 
kb_ªad
;

76 
kb_fûe_›s
.
›í
 = 
kb_›í
;

77 
kb_fûe_›s
.
ªÀa£
 = 
kb_ªÀa£
;

82 
ªt
=
	`Æloc_chrdev_ªgi⁄
(&
mydev
,0,1,"mykb");

84 
kb_id

	`MAJOR
(
mydev
);

88 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

89 
veda_˛ass
 = 
	`˛ass_sim∂e_¸óã
(
THIS_MODULE
,"Veda");

90 if(
	`IS_ERR
(
veda_˛ass
)){

91 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

94 
	`˛ass_sim∂e_devi˚_add
(
veda_˛ass
,
mydev
,
NULL
,"mykb");

97 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

98 
veda_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
,"Veda");

99 if(
	`IS_ERR
(
veda_˛ass
)){

100 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

103 
	`devi˚_¸óã
(
veda_˛ass
,
NULL
,
mydev
,NULL,"mykb");

106 
veda_cdev

	`cdev_Æloc
();

109 
veda_cdev
->
ow√r
=
THIS_MODULE
;

110 
veda_cdev
->
›s
&
kb_fûe_›s
;

112 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,1);

113 if–
ªt
 < 0 ) {

114 
	`¥ötk
("ErrorÑegistering device driver\n");

115  
ªt
;

117 
	`¥ötk
("Devi˚ Regi°îed wôh MAJOR NO[%d]\n",
kb_id
);

119 if(
	`ªque°_úq
(
KB_INT
,
kb_öãºu±
,
IRQF_SHARED
, "mykb",(*)&
some_d©a
)){

120 
	`¥ötk
(
KERN_ERR
 "mykb: cannotÑegister IRQ %d\n", 8);

121  -
EIO
;

123 
	`¥ötk
("mykb interruptÑegistered\n");

126 
	}
}

128 
	$exô_kb
()

130 
	`‰ì_úq
(
KB_INT
,&
some_d©a
);

132 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

133 
	`˛ass_sim∂e_devi˚_ªmove
(
mydev
);

134 
	`˛ass_sim∂e_de°roy
(
veda_˛ass
);

136 
	`devi˚_de°roy
(
veda_˛ass
,
mydev
);

137 
	`˛ass_de°roy
(
veda_˛ass
);

140 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

141 
	`cdev_dñ
(
veda_cdev
);

142 
	`¥ötk
("\n ModuleÑemoved");

143 
	}
}

145 
	#SUCCESS
 0

	)

146 
	$kb_›í
(
öode
 *inode,

147 
fûe
 *file)

149 
cou¡î
 = 0;

150 
cou¡î
++;

151 
	`¥ötk
("Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

152 
	`¥ötk
("Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n", 
cuºít
->
pid
 );

153  
SUCCESS
;

154 
	}
}

156 
	$kb_ªÀa£
(
öode
 *inode,

157 
fûe
 *file)

159  
SUCCESS
;

160 
	}
}

162 
	$kb_ªad
(
fûe
 *file,

163 *
buf
,

164 
size_t
 
lbuf
,

165 
loff_t
 *
µos
)

168 
	}
}

170 
úqªtu∫_t
 
	$kb_öãºu±
(
úq
, *
dev_id
)

172 
sˇncode
;

173 
sˇncode
 = 
	`ªad_kbd_öput
();

174 
	`¥ötk
("sˇncodê%d\n",
sˇncode
);

176 
	}
}

	@ddex/char/part1/char_driver_dynamic.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

10 
	#MAJORNO
 300

	)

11 
	#MINORNO
 0

	)

12 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

13 
	#MAX_LENGTH
 4000

	)

14 
	#SUCCESS
 0

	)

16 *
	gch¨_devi˚_buf
;

17 
cdev
 *
	gveda_cdev
;

18 
dev_t
 
	gmydev
;

19 
	gcou¡
=1;

37 
	$ch¨_dev_›í
(
öode
 *inode,

38 
fûe
 *file)

40 
cou¡î
 = 0;

41 
cou¡î
++;

42 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

43 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

44 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

45 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

46  
SUCCESS
;

47 
	}
}

60 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

61 
fûe
 *file)

63  
SUCCESS
;

64 
	}
}

87 
	$ch¨_dev_ªad
(
fûe
 *file,

88 *
buf
,

89 
size_t
 
lbuf
,

90 
loff_t
 *
µos
)

92 
maxbyãs
;

93 
byãs_to_do
;

94 
nbyãs
;

96 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

98 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

99 
byãs_to_do
 = 
maxbyãs
;

101 if–
byãs_to_do
 == 0 ) {

102 
	`¥ötk
("ReachedÉnd of device\n");

103  -
ENOSPC
;

106 
nbyãs
 = 
byãs_to_do
 -

107 
	`c›y_to_u£r
–
buf
,

108 
ch¨_devi˚_buf
 + *
µos
,

109 
byãs_to_do
 );

111 *
µos
 +
nbyãs
;

112  
nbyãs
;

113 
	}
}

136 
	$ch¨_dev_wrôe
(
fûe
 *file,

137 c⁄° *
buf
,

138 
size_t
 
lbuf
,

139 
loff_t
 *
µos
)

141 
nbyãs
;

142 
byãs_to_do
;

143 
maxbyãs
;

145 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

147 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

148 
byãs_to_do
 = 
maxbyãs
;

150 if–
byãs_to_do
 == 0 ) {

151 
	`¥ötk
("ReachedÉnd of device\n");

152  -
ENOSPC
;

155 
nbyãs
 = 
byãs_to_do
 -

156 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

157 
buf
,

158 
byãs_to_do
 );

159 *
µos
 +
nbyãs
;

160  
nbyãs
;

161 
	}
}

181 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

183 
loff_t
 
ã°pos
;

184 
‹ig
) {

187 
ã°pos
 = 
off£t
;

190 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

193 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

196  -
EINVAL
;

199 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

200 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

201 
fûe
->
f_pos
 = 
ã°pos
;

202 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

203  
ã°pos
;

204 
	}
}

207 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

208 .
ow√r
 = 
THIS_MODULE
,

209 .
	gªad
 = 
ch¨_dev_ªad
,

210 .
	gwrôe
 = 
ch¨_dev_wrôe
,

211 .
	g›í
 = 
ch¨_dev_›í
,

212 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

213 .
	gŒ£ek
 = 
ch¨_dev_l£ek


216 
__öô
 
	$ch¨_dev_öô
()

218 
ªt
;

220 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

221 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

225 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

226 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

227 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

230 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

232 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

233 if–
ªt
 < 0 ) {

234 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

235 
	`cdev_dñ
 (
veda_cdev
);

236 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

239 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

240 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

242 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

244 
	}
}

246 
__exô
 
	$ch¨_dev_exô
()

249 
	`cdev_dñ
(
veda_cdev
);

250 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

251 
	`k‰ì
(
ch¨_devi˚_buf
);

252 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

253 
	}
}

254 
moduÀ_öô
(
ch¨_dev_öô
);

255 
moduÀ_exô
(
ch¨_dev_exô
);

257 
MODULE_AUTHOR
("VEDA");

258 
MODULE_DESCRIPTION
("Character Device Driver - Test");

259 
MODULE_LICENSE
("GPL");

	@ddex/char/part1/char_driver_skel.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/¶ab.h
>

8 
	#MAJORNO
 300

	)

9 
	#MINORNO
 0

	)

10 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

11 
	#MAX_LENGTH
 4000

	)

12 
	#SUCCESS
 0

	)

14 
	gch¨_devi˚_buf
[
MAX_LENGTH
];

15 
cdev
 *
	gveda_cdev
;

16 
dev_t
 
	gmydev
;

17 
	gcou¡
=1,
	göu£
=0;

20 
	$ch¨_dev_›í
(
öode
 *inode,

21 
fûe
 *file)

23 if(
öu£
)

25 
	`¥ötk
(
KERN_INFO
 "\nDevi˚ busy %s\n",
CHAR_DEV_NAME
);

26  -
EBUSY
;

28 
öu£
=1;

29  
SUCCESS
;

31 
	}
}

33 
	$ch¨_dev_ªÀa£
(
öode
 *öode, 
fûe
 *file)

35 
öu£
=0;

36  
SUCCESS
;

37 
	}
}

39 
	$ch¨_dev_ªad
(
fûe
 *fûe, *
buf
,
size_t
 
lbuf
,
loff_t
 *
µos
)

41 
nbyãs
 = 
lbuf
 - 
	`c›y_to_u£r
 (
buf
, 
ch¨_devi˚_buf
 + *
µos
,Übuf);

42 *
µos
 +
nbyãs
;

43 
	`¥ötk
 (
KERN_INFO
 "\¿READINGÇbyãs=%d,Öos=%d\n", 
nbyãs
,()*
µos
);

45  
nbyãs
;

47 
	}
}

49 
	$ch¨_dev_wrôe
(
fûe
 *fûe, c⁄° *
buf
, 
size_t
 
lbuf
, 
loff_t
 *
µos
)

51 
nbyãs
 = 
lbuf
 - 
	`c›y_‰om_u£r
 (
ch¨_devi˚_buf
 + *
µos
, 
buf
,Übuf);

52 *
µos
 +
nbyãs
;

53 
	`¥ötk
 (
KERN_INFO
 "\¿WRITING fun˘i⁄,Çbyãs=%d,Öos=%d\n", 
nbyãs
,()*
µos
);

55  
nbyãs
;

57 
	}
}

59 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

60 .
ow√r
 = 
THIS_MODULE
,

61 .
	gªad
 = 
ch¨_dev_ªad
,

62 .
	gwrôe
 = 
ch¨_dev_wrôe
,

63 .
	g›í
 = 
ch¨_dev_›í
,

64 .
	gªÀa£
 = 
ch¨_dev_ªÀa£


67 
__öô
 
	$ch¨_dev_öô
()

69 
ªt
;

70 
mydev
 = 
	`MKDEV
(
MAJORNO
,
MINORNO
);

71 
	`ªgi°î_chrdev_ªgi⁄
(
mydev
,
cou¡
,
CHAR_DEV_NAME
);

73 
veda_cdev

	`cdev_Æloc
();

74 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

76 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

78 if–
ªt
 < 0 ) {

79 
	`¥ötk
("ErrorÑegistering device driver\n");

80  
ªt
;

82 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed%s\n",
CHAR_DEV_NAME
);

84 
	`mem£t
(
ch¨_devi˚_buf
,'\0',
MAX_LENGTH
);

86 
	}
}

88 
__exô
 
	$ch¨_dev_exô
()

91 
	`cdev_dñ
(
veda_cdev
);

92 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

93 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

94 
	}
}

96 
moduÀ_öô
(
ch¨_dev_öô
);

97 
moduÀ_exô
(
ch¨_dev_exô
);

99 
MODULE_AUTHOR
("VEDA");

100 
MODULE_DESCRIPTION
("Character Device Driver - Test");

101 
MODULE_LICENSE
("GPL");

	@ddex/char/part1/test_chrdev.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<î∫o.h
>

19 
	$maö
()

21 
fd
, 
i
;

22 
ssize_t
 
ªt
;

23 
my_buf
[4000];

26 
i
=0; i<4000; i++Ë
my_buf
[i] = '*';

29 
	`¥ötf
("[%d] - O≥nög devi˚ veda_chr_drivî\n", 
	`gëpid
() );

30 
fd
 = 
	`›í
–"/dev/veda_cdrv", 
O_RDWR
 );

31 
	`¥ötf
("PID [%d]\n", 
	`gëpid
());

32 
	`gëch¨
();

35 
ªt
 = 
	`wrôe
–
fd
, 
my_buf
, 4000 );

36 
	`l£ek
(
fd
,10,
SEEK_SET
);

37 
ªt

	`ªad
(
fd
,
my_buf
,3000);

38 
	`˛o£
(
fd
);

39 
	}
}

	@ddex/char/part2/char_driver_udev.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

11 
	#MAJORNO
 300

	)

12 
	#MINORNO
 0

	)

13 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

14 
	#MAX_LENGTH
 4000

	)

15 
	#SUCCESS
 0

	)

17 *
	gch¨_devi˚_buf
;

18 
cdev
 *
	gveda_cdev
;

19 
dev_t
 
	gmydev
;

20 
	gcou¡
=1;

21 
˛ass
 *
	gveda_˛ass
;

38 
	$ch¨_dev_›í
(
öode
 *inode,

39 
fûe
 *file)

41 
cou¡î
 = 0;

42 
cou¡î
++;

43 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

44 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

45 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

46 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

47  
SUCCESS
;

48 
	}
}

61 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

62 
fûe
 *file)

64  
SUCCESS
;

65 
	}
}

80 
	$ch¨_dev_ªad
(
fûe
 *file,

81 *
buf
,

82 
size_t
 
lbuf
,

83 
loff_t
 *
µos
)

85 
maxbyãs
;

86 
byãs_to_do
;

87 
nbyãs
;

89 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

91 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

92 
byãs_to_do
 = 
maxbyãs
;

94 if–
byãs_to_do
 == 0 ) {

95 
	`¥ötk
("ReachedÉnd of device\n");

96  -
ENOSPC
;

99 
nbyãs
 = 
byãs_to_do
 -

100 
	`c›y_to_u£r
–
buf
,

101 
ch¨_devi˚_buf
 + *
µos
,

102 
byãs_to_do
 );

104 *
µos
 +
nbyãs
;

105  
nbyãs
;

106 
	}
}

121 
	$ch¨_dev_wrôe
(
fûe
 *file,

122 c⁄° *
buf
,

123 
size_t
 
lbuf
,

124 
loff_t
 *
µos
)

126 
nbyãs
;

127 
byãs_to_do
;

128 
maxbyãs
;

130 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

132 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

133 
byãs_to_do
 = 
maxbyãs
;

135 if–
byãs_to_do
 == 0 ) {

136 
	`¥ötk
("ReachedÉnd of device\n");

137  -
ENOSPC
;

140 
nbyãs
 = 
byãs_to_do
 -

141 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

142 
buf
,

143 
byãs_to_do
 );

144 *
µos
 +
nbyãs
;

145  
nbyãs
;

146 
	}
}

166 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

168 
loff_t
 
ã°pos
;

169 
‹ig
) {

172 
ã°pos
 = 
off£t
;

175 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

178 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

181  -
EINVAL
;

184 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

185 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

186 
fûe
->
f_pos
 = 
ã°pos
;

187 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

188  
ã°pos
;

189 
	}
}

192 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

193 .
ow√r
 = 
THIS_MODULE
,

194 .
	gªad
 = 
ch¨_dev_ªad
,

195 .
	gwrôe
 = 
ch¨_dev_wrôe
,

196 .
	g›í
 = 
ch¨_dev_›í
,

197 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

198 .
	gŒ£ek
 = 
ch¨_dev_l£ek


201 
__öô
 
	$ch¨_dev_öô
()

203 
ªt
;

205 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

206 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

210 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

211 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

212 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

215 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

217 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

218 if–
ªt
 < 0 ) {

219 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

220 
	`cdev_dñ
 (
veda_cdev
);

221 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

225 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

226 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

228 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

229 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

231 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

233 
	}
}

235 
__exô
 
	$ch¨_dev_exô
()

237 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

238 
	`˛ass_de°roy
 (
veda_˛ass
);

239 
	`cdev_dñ
(
veda_cdev
);

240 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

241 
	`k‰ì
(
ch¨_devi˚_buf
);

242 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

243 
	}
}

244 
moduÀ_öô
(
ch¨_dev_öô
);

245 
moduÀ_exô
(
ch¨_dev_exô
);

247 
MODULE_AUTHOR
("VEDA");

248 
MODULE_DESCRIPTION
("Character Device Driver - Test");

249 
MODULE_LICENSE
("GPL");

	@ddex/char/part2/test_chrdev.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<î∫o.h
>

19 
	$maö
()

21 
fd
, 
i
;

22 
ssize_t
 
ªt
;

23 
my_buf
[4000];

26 
i
=0; i<4000; i++Ë
my_buf
[i] = '*';

29 
	`¥ötf
("[%d] - O≥nög devi˚ veda_chr_drivî\n", 
	`gëpid
() );

30 
fd
 = 
	`›í
–"/dev/veda_cdrv", 
O_RDWR
 );

31 
	`¥ötf
("PID [%d]\n", 
	`gëpid
());

32 
	`gëch¨
();

35 
ªt
 = 
	`wrôe
–
fd
, 
my_buf
, 4000 );

36 
	`˛o£
(
fd
);

37 
	}
}

	@ddex/char/part3/char_driver_ioctl.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~"veda_ch¨_devi˚.h
"

12 
	#MAJORNO
 300

	)

13 
	#MINORNO
 0

	)

14 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

15 
	#MAX_LENGTH
 
Àngth


	)

16 
	#SUCCESS
 0

	)

18 *
	gch¨_devi˚_buf
;

19 
cdev
 *
	gveda_cdev
;

20 
	gÀngth
 = 4000;

21 
dev_t
 
	gmydev
;

22 
	gcou¡
=1;

23 
˛ass
 *
	gveda_˛ass
;

40 
	$ch¨_dev_›í
(
öode
 *inode,

41 
fûe
 *file)

43 
cou¡î
 = 0;

44 
cou¡î
++;

45 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

46 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

47 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

48 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

49  
SUCCESS
;

50 
	}
}

63 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

64 
fûe
 *file)

66  
SUCCESS
;

67 
	}
}

82 
	$ch¨_dev_ªad
(
fûe
 *file,

83 *
buf
,

84 
size_t
 
lbuf
,

85 
loff_t
 *
µos
)

87 
maxbyãs
;

88 
byãs_to_do
;

89 
nbyãs
;

91 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

93 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

94 
byãs_to_do
 = 
maxbyãs
;

96 if–
byãs_to_do
 == 0 ) {

97 
	`¥ötk
("ReachedÉnd of device\n");

98  -
ENOSPC
;

101 
nbyãs
 = 
byãs_to_do
 -

102 
	`c›y_to_u£r
–
buf
,

103 
ch¨_devi˚_buf
 + *
µos
,

104 
byãs_to_do
 );

106 *
µos
 +
nbyãs
;

107  
nbyãs
;

108 
	}
}

123 
	$ch¨_dev_wrôe
(
fûe
 *file,

124 c⁄° *
buf
,

125 
size_t
 
lbuf
,

126 
loff_t
 *
µos
)

128 
nbyãs
;

129 
byãs_to_do
;

130 
maxbyãs
;

132 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

134 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

135 
byãs_to_do
 = 
maxbyãs
;

137 if–
byãs_to_do
 == 0 ) {

138 
	`¥ötk
("ReachedÉnd of device\n");

139  -
ENOSPC
;

142 
nbyãs
 = 
byãs_to_do
 -

143 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

144 
buf
,

145 
byãs_to_do
 );

146 *
µos
 +
nbyãs
;

147  
nbyãs
;

148 
	}
}

168 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

170 
loff_t
 
ã°pos
;

171 
‹ig
) {

174 
ã°pos
 = 
off£t
;

177 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

180 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

183  -
EINVAL
;

186 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

187 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

188 
fûe
->
f_pos
 = 
ã°pos
;

189 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

190  
ã°pos
;

191 
	}
}

199 
	$ch¨_dev_io˘l
(
öode
 *inode,

200 
fûe
 *
fûp
,

201 
cmd
,

202 
¨g
)

206 
i
, 
size
;

207 *
√w_buf
;

208 
c
;

209 
ªtbyãs
;

210 if–
	`_IOC_TYPE
(
cmd
Ë!
VEDA_MAGIC
 )  -
ENOTTY
;

211 if–
	`_IOC_NR
(
cmd
Ë> 
VEDA_MAX_CMDS
 )  -
ENOTTY
;

213 if–
	`_IOC_DIR
(
cmd
Ë& 
_IOC_READ
 )

214 if–!
	`ac˚ss_ok
(
VERIFY_WRITE
, (*)
¨g
, 
	`_IOC_SIZE
(
cmd
) ) )

215  -
EFAULT
;

216 if–
	`_IOC_DIR
(
cmd
Ë& 
_IOC_WRITE
 )

217 if–!
	`ac˚ss_ok
(
VERIFY_READ
, (*)
¨g
, 
	`_IOC_SIZE
(
cmd
) ) )

218  -
EFAULT
;

223 
cmd
) {

225 
VEDA_FILL_ZERO
:

226 
i
=0; i<
MAX_LENGTH
; i++Ë
ch¨_devi˚_buf
[i] = 0;

229 
VEDA_FILL_CHAR
:

230 
ªtbyãs
 = 
	`c›y_‰om_u£r
–&
c
, (*)
¨g
, () );

231 
i
=0; i<
MAX_LENGTH
; i++Ë
ch¨_devi˚_buf
[i] = 
c
;

234 
VEDA_SET_SIZE
:

235 
ªtbyãs
=
	`c›y_‰om_u£r
–&
size
, (*)
¨g
,

237 
√w_buf
 = (*)
	`kmÆloc
–
size
*(),

238 
GFP_KERNEL
 );

239 if–!
√w_buf
 )  -
ENOSPC
;

240 
	`k‰ì
–
ch¨_devi˚_buf
 );

241 
ch¨_devi˚_buf
 = (*)
√w_buf
;

242 
MAX_LENGTH
 = 
size
;

243 
i
=0; i<
MAX_LENGTH
; i++Ë
ch¨_devi˚_buf
[i] = 0;

244 
fûp
->
f_pos
 = 0;

247 
VEDA_GET_SIZE
:

248 
size
 = 
MAX_LENGTH
;

249 
ªtbyãs
=
	`c›y_to_u£r
–(*)
¨g
, &
size
 , () );

254  
SUCCESS
;

255 
	}
}

258 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

259 .
ow√r
 = 
THIS_MODULE
,

260 .
	gio˘l
 = 
ch¨_dev_io˘l
,

261 .
	gªad
 = 
ch¨_dev_ªad
,

262 .
	gwrôe
 = 
ch¨_dev_wrôe
,

263 .
	g›í
 = 
ch¨_dev_›í
,

264 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

265 .
	gŒ£ek
 = 
ch¨_dev_l£ek


268 
__öô
 
	$ch¨_dev_öô
()

270 
ªt
;

272 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

273 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

277 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

278 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

279 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

282 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

284 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

285 if–
ªt
 < 0 ) {

286 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

287 
	`cdev_dñ
 (
veda_cdev
);

288 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

292 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

293 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

295 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

296 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

298 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

300 
	}
}

302 
__exô
 
	$ch¨_dev_exô
()

304 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

305 
	`˛ass_de°roy
 (
veda_˛ass
);

306 
	`cdev_dñ
(
veda_cdev
);

307 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

308 
	`k‰ì
(
ch¨_devi˚_buf
);

309 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

310 
	}
}

311 
moduÀ_öô
(
ch¨_dev_öô
);

312 
moduÀ_exô
(
ch¨_dev_exô
);

314 
MODULE_AUTHOR
("VEDA");

315 
MODULE_DESCRIPTION
("Character Device Driver - Test");

316 
MODULE_LICENSE
("GPL");

	@ddex/char/part3/test_char_driver_ioctl.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~<sys/ty≥s.h
>

13 
	~"veda_ch¨_devi˚.h
"

20 
	$maö
()

22 
fd
, 
i
;

23 
my_buf
[4000];

25 
size
;

26 
c
;

29 
i
=0; i<4000; i++Ë
my_buf
[i] = '*';

32 
	`¥ötf
("[%d] - O≥nög devi˚ veda_cdrv\n", 
	`gëpid
() );

33 
fd
 = 
	`›í
–"/dev/veda_cdrv", 
O_RDWR
 );

34 if–
fd
 < 0 ) {

35 
	`¥ötf
("\n\nDevice couldÇot be opened\n\n");

38 
	`¥ötf
("Devi˚ o≥√d wôh ID [%d]\n", 
fd
);

41 
	`wrôe
–
fd
, 
my_buf
, 4000 );

44 
	`bzîo
(
my_buf
, 4000);

47 
	`l£ek
–
fd
, 20, 
SEEK_SET
 );

48 
	`ªad
–
fd
, 
my_buf
, 70 );

49 
	`¥ötf
("IÑódÅhi†‰omÅhêdevi˚\n%s\n", 
my_buf
);

52 
	`bzîo
(
my_buf
, 4000);

55 
	`wrôe
–
fd
, "Veda Solutions", 14);

58 
	`l£ek
–
fd
, 60, 
SEEK_SET
 );

61 
	`ªad
–
fd
, 
my_buf
, 70 );

62 
	`¥ötf
("IÑódÅhi†‰omÅhêdevi˚\n%s\n", 
my_buf
);

68 
	`l£ek
–
fd
, 0, 
SEEK_SET
 );

70 
	`io˘l
–
fd
, 
VEDA_GET_SIZE
, &
size
 );

71 
	`¥ötf
("Pª£¡ sizêo‡thêbuf„∏i†%d\n", 
size
);

72 
size
 = 4096;

73 
	`¥ötf
("Setting size of bufferÅo 4096\n");

74 if–
	`io˘l
–
fd
, 
VEDA_SET_SIZE
, &
size
 ) < 0 )

75 
	`¥ötf
("ioctl failed\n");

76 
	`io˘l
–
fd
, 
VEDA_GET_SIZE
, &
size
 );

77 
	`¥ötf
("New sizêo‡thêbuf„∏i†%d\n", 
size
);

81 
	`bzîo
–
my_buf
, 4000 );

82 
	`ªad
–
fd
, 
my_buf
, 70 );

83 
	`¥ötf
("Cuºíàc⁄ã¡s\n%s\nFûlög ='s\n", 
my_buf
);

84 
c
 = '=';

85 
	`io˘l
(
fd
, 
VEDA_FILL_CHAR
, &
c
);

86 
	`bzîo
–
my_buf
, 4000 );

87 
	`ªad
–
fd
, 
my_buf
, 70 );

88 
	`¥ötf
("New c⁄ã¡s\n%s\n", 
my_buf
);

91 
	`˛o£
(
fd
);

94 
	`exô
(0);

95 
	}
}

	@ddex/char/part3/veda_char_device.h

1 #i‚de‡
_VEDA_CHAR_DEVICE_H_


2 
	#_VEDA_CHAR_DEVICE_H_


	)

4 
	~<asm/io˘l.h
>

19 
	#VEDA_MAGIC
 'L'

	)

42 
	#VEDA_FILL_ZERO
 
	`_IO
–
VEDA_MAGIC
, 1 )

	)

52 
	#VEDA_FILL_CHAR
 
	`_IOW
–
VEDA_MAGIC
, 2, )

	)

56 
	#VEDA_SET_SIZE
 
	`_IOW
–
VEDA_MAGIC
, 3, 
uöt
 )

	)

59 
	#VEDA_GET_SIZE
 
	`_IOR
–
VEDA_MAGIC
, 4, 
uöt
 )

	)

61 
	#VEDA_MAX_CMDS
 4

	)

	@ddex/char/part4/chr_drv_complete.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~<löux/com∂ëi⁄.h
>

11 
	~"veda_ch¨_devi˚.h
"

13 
	#MAJORNO
 300

	)

14 
	#MINORNO
 0

	)

15 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

16 
	#MAX_LENGTH
 4000

	)

17 
	#SUCCESS
 0

	)

19 *
	gch¨_devi˚_buf
;

20 
cdev
 *
	gveda_cdev
;

21 
dev_t
 
	gmydev
;

22 
	gcou¡
=1;

23 
˛ass
 *
	gveda_˛ass
;

25 
DECLARE_COMPLETION
 (
my_waô
);

27 
	$ch¨_dev_›í
(
öode
 *inode,

28 
fûe
 *file)

30 
cou¡î
 = 0;

31 
cou¡î
++;

32 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

33 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

34 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

35 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

36  
SUCCESS
;

37 
	}
}

39 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

40 
fûe
 *file)

42  
SUCCESS
;

43 
	}
}

45 
	$ch¨_dev_ªad
(
fûe
 *file,

46 *
buf
,

47 
size_t
 
lbuf
,

48 
loff_t
 *
µos
)

50 
maxbyãs
;

51 
byãs_to_do
;

52 
nbyãs
;

54 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

56 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

57 
byãs_to_do
 = 
maxbyãs
;

59 if–
byãs_to_do
 == 0 ) {

60 
	`¥ötk
("ReachedÉnd of device\n");

61  -
ENOSPC
;

64 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËgoögÅÿ¶ìp\n", 
cuºít
->
pid
,cuºít->
comm
);

65 
	`waô_f‹_com∂ëi⁄
 (&
my_waô
);

66 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËªsumög\n", 
cuºít
->
pid
,cuºít->
comm
);

69 
nbyãs
 = 
byãs_to_do
 -

70 
	`c›y_to_u£r
–
buf
,

71 
ch¨_devi˚_buf
 + *
µos
,

72 
byãs_to_do
 );

74 *
µos
 +
nbyãs
;

75  
nbyãs
;

76 
	}
}

79 
	$ch¨_dev_wrôe
(
fûe
 *file,

80 c⁄° *
buf
,

81 
size_t
 
lbuf
,

82 
loff_t
 *
µos
)

84 
nbyãs
;

85 
byãs_to_do
;

86 
maxbyãs
;

88 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

90 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

91 
byãs_to_do
 = 
maxbyãs
;

93 if–
byãs_to_do
 == 0 ) {

94 
	`¥ötk
("ReachedÉnd of device\n");

95  -
ENOSPC
;

98 
nbyãs
 = 
byãs_to_do
 -

99 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

100 
buf
,

101 
byãs_to_do
 );

102 *
µos
 +
nbyãs
;

104 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËwakêu∞ªadîs...\n",
cuºít
->
pid
, cuºít->
comm
);

105 
	`com∂ëe
 (&
my_waô
);

107  
nbyãs
;

108 
	}
}

110 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

112 
loff_t
 
ã°pos
;

113 
‹ig
) {

116 
ã°pos
 = 
off£t
;

119 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

122 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

125  -
EINVAL
;

128 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

129 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

130 
fûe
->
f_pos
 = 
ã°pos
;

131 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

132  
ã°pos
;

133 
	}
}

135 
my_d©a
 
	gmy_d©a
 = {

136 .
i
 = -100,

137 .
	gx
 = 100,

138 .
	gs
 = "Linux Kernel",

142 
	$chrdev_u∆ocked_io˘l
 (
fûe
 *
Â
, 
cmd
, 
¨g
)

144 
size
, 
rc
, 
dúe˘i⁄
;

145 
__u£r
 *
iﬂrgp
 = (__u£∏*)
¨g
;

147 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
VEDA_MAGIC
) {

148 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

149  -
EINVAL
;

152 
dúe˘i⁄
 = 
	`_IOC_DIR
 (
cmd
);

153 
size
 = 
	`_IOC_SIZE
 (
cmd
);

155 
dúe˘i⁄
) {

157 
_IOC_WRITE
:

158 
	`¥ötk
(
KERN_INFO
 "Ñódög = %d byã†‰om u£r-•a˚ánd wrôögÅÿdevi˚\n",
size
);

159 
rc
 = 
	`c›y_‰om_u£r
 (&
my_d©a
, 
iﬂrgp
, 
size
);

160 
	`¥ötk
(
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

161 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

162  
rc
;

165 
_IOC_READ
:

166 
	`¥ötk
 (
KERN_INFO
 "Ñódög devi˚ánd wrôög = %d byã†tÿu£r-•a˚\n", 
size
);

167 
	`¥ötk
 (
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

168 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

169 
rc
 = 
	`c›y_to_u£r
 (
iﬂrgp
, &
my_d©a
, 
size
);

170  
rc
;

174 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

175  -
EINVAL
;

177 
	}
}

181 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

182 .
Œ£ek
 = 
ch¨_dev_l£ek
,

183 .
	gªad
 = 
ch¨_dev_ªad
,

184 .
	gwrôe
 = 
ch¨_dev_wrôe
,

185 .
	gu∆ocked_io˘l
 = 
chrdev_u∆ocked_io˘l
,

186 .
	g›í
 = 
ch¨_dev_›í
,

187 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

190 
__öô
 
	$ch¨_dev_öô
()

192 
ªt
;

194 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

195 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

199 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

200 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

201 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

204 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

206 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

207 if–
ªt
 < 0 ) {

208 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

209 
	`cdev_dñ
 (
veda_cdev
);

210 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

214 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

215 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

217 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

218 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

220 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

222 
	}
}

224 
__exô
 
	$ch¨_dev_exô
()

226 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

227 
	`˛ass_de°roy
 (
veda_˛ass
);

228 
	`cdev_dñ
(
veda_cdev
);

229 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

230 
	`k‰ì
(
ch¨_devi˚_buf
);

231 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

232 
	}
}

233 
moduÀ_öô
(
ch¨_dev_öô
);

234 
moduÀ_exô
(
ch¨_dev_exô
);

236 
MODULE_AUTHOR
("VEDA");

237 
MODULE_DESCRIPTION
("Character Device Driver - Test");

238 
MODULE_LICENSE
("GPL");

	@ddex/char/part4/chr_drv_killable.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~<löux/waô.h
>

11 
	~"veda_ch¨_devi˚.h
"

13 
	#MAJORNO
 300

	)

14 
	#MINORNO
 0

	)

15 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

16 
	#MAX_LENGTH
 4000

	)

17 
	#SUCCESS
 0

	)

19 *
	gch¨_devi˚_buf
;

20 
cdev
 *
	gveda_cdev
;

21 
dev_t
 
	gmydev
;

22 
	gcou¡
=1;

23 
˛ass
 *
	gveda_˛ass
;

25 
DECLARE_WAIT_QUEUE_HEAD
(
mywq
);

26 
©omic_t
 
	gd©a_ªady
;

28 
	$ch¨_dev_›í
(
öode
 *inode,

29 
fûe
 *file)

31 
cou¡î
 = 0;

32 
cou¡î
++;

33 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

34 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

35 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

36 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

37  
SUCCESS
;

38 
	}
}

40 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

41 
fûe
 *file)

43  
SUCCESS
;

44 
	}
}

46 
	$ch¨_dev_ªad
(
fûe
 *file,

47 *
buf
,

48 
size_t
 
lbuf
,

49 
loff_t
 *
µos
)

51 
maxbyãs
;

52 
byãs_to_do
;

53 
nbyãs
;

55 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

57 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

58 
byãs_to_do
 = 
maxbyãs
;

60 if–
byãs_to_do
 == 0 ) {

61 
	`¥ötk
("ReachedÉnd of device\n");

62  -
ENOSPC
;

65 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËgoögÅÿ¶ìp\n", 
cuºít
->
pid
,cuºít->
comm
);

66 
	`waô_evít_kûœbÀ
 (
mywq
, (
	`©omic_ªad
 (&
d©a_ªady
)));

67 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËªsumög\n", 
cuºít
->
pid
,cuºít->
comm
);

68 
	`©omic_£t
 (&
d©a_ªady
, 0);

71 
nbyãs
 = 
byãs_to_do
 -

72 
	`c›y_to_u£r
–
buf
,

73 
ch¨_devi˚_buf
 + *
µos
,

74 
byãs_to_do
 );

76 *
µos
 +
nbyãs
;

77  
nbyãs
;

78 
	}
}

81 
	$ch¨_dev_wrôe
(
fûe
 *file,

82 c⁄° *
buf
,

83 
size_t
 
lbuf
,

84 
loff_t
 *
µos
)

86 
nbyãs
;

87 
byãs_to_do
;

88 
maxbyãs
;

90 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

92 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

93 
byãs_to_do
 = 
maxbyãs
;

95 if–
byãs_to_do
 == 0 ) {

96 
	`¥ötk
("ReachedÉnd of device\n");

97  -
ENOSPC
;

100 
nbyãs
 = 
byãs_to_do
 -

101 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

102 
buf
,

103 
byãs_to_do
 );

104 *
µos
 +
nbyãs
;

106 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËwakêu∞ªadîs...\n",
cuºít
->
pid
, cuºít->
comm
);

107 
	`©omic_£t
 (&
d©a_ªady
, 1);

108 
	`wake_up_öãºu±ibÀ
 (&
mywq
);

110  
nbyãs
;

111 
	}
}

113 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

115 
loff_t
 
ã°pos
;

116 
‹ig
) {

119 
ã°pos
 = 
off£t
;

122 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

125 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

128  -
EINVAL
;

131 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

132 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

133 
fûe
->
f_pos
 = 
ã°pos
;

134 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

135  
ã°pos
;

136 
	}
}

138 
my_d©a
 
	gmy_d©a
 = {

139 .
i
 = -100,

140 .
	gx
 = 100,

141 .
	gs
 = "Linux Kernel",

145 
	$chrdev_u∆ocked_io˘l
 (
fûe
 *
Â
, 
cmd
, 
¨g
)

147 
size
, 
rc
, 
dúe˘i⁄
;

148 
__u£r
 *
iﬂrgp
 = (__u£∏*)
¨g
;

150 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
VEDA_MAGIC
) {

151 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

152  -
EINVAL
;

155 
dúe˘i⁄
 = 
	`_IOC_DIR
 (
cmd
);

156 
size
 = 
	`_IOC_SIZE
 (
cmd
);

158 
dúe˘i⁄
) {

160 
_IOC_WRITE
:

161 
	`¥ötk
(
KERN_INFO
 "Ñódög = %d byã†‰om u£r-•a˚ánd wrôögÅÿdevi˚\n",
size
);

162 
rc
 = 
	`c›y_‰om_u£r
 (&
my_d©a
, 
iﬂrgp
, 
size
);

163 
	`¥ötk
(
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

164 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

165  
rc
;

168 
_IOC_READ
:

169 
	`¥ötk
 (
KERN_INFO
 "Ñódög devi˚ánd wrôög = %d byã†tÿu£r-•a˚\n", 
size
);

170 
	`¥ötk
 (
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

171 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

172 
rc
 = 
	`c›y_to_u£r
 (
iﬂrgp
, &
my_d©a
, 
size
);

173  
rc
;

177 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

178  -
EINVAL
;

180 
	}
}

184 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

185 .
Œ£ek
 = 
ch¨_dev_l£ek
,

186 .
	gªad
 = 
ch¨_dev_ªad
,

187 .
	gwrôe
 = 
ch¨_dev_wrôe
,

188 .
	gu∆ocked_io˘l
 = 
chrdev_u∆ocked_io˘l
,

189 .
	g›í
 = 
ch¨_dev_›í
,

190 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

193 
__öô
 
	$ch¨_dev_öô
()

195 
ªt
;

197 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

198 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

202 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

203 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

204 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

207 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

209 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

210 if–
ªt
 < 0 ) {

211 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

212 
	`cdev_dñ
 (
veda_cdev
);

213 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

217 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

218 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

220 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

221 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

223 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

225 
	}
}

227 
__exô
 
	$ch¨_dev_exô
()

229 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

230 
	`˛ass_de°roy
 (
veda_˛ass
);

231 
	`cdev_dñ
(
veda_cdev
);

232 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

233 
	`k‰ì
(
ch¨_devi˚_buf
);

234 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

235 
	}
}

236 
moduÀ_öô
(
ch¨_dev_öô
);

237 
moduÀ_exô
(
ch¨_dev_exô
);

239 
MODULE_AUTHOR
("VEDA");

240 
MODULE_DESCRIPTION
("Character Device Driver - Test");

241 
MODULE_LICENSE
("GPL");

	@ddex/char/part4/chr_drv_sema.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~<löux/vîsi⁄.h
>

11 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,27)

12 
	~<asm/£m≠h‹e.h
>

14 
	~<löux/£m≠h‹e.h
>

17 
	~"veda_ch¨_devi˚.h
"

19 
	#MAJORNO
 300

	)

20 
	#MINORNO
 0

	)

21 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

22 
	#MAX_LENGTH
 4000

	)

23 
	#SUCCESS
 0

	)

25 *
	gch¨_devi˚_buf
;

26 
cdev
 *
	gveda_cdev
;

27 
dev_t
 
	gmydev
;

28 
	gcou¡
=1;

29 
˛ass
 *
	gveda_˛ass
;

31 
£m≠h‹e
 
	gmy£m
;

33 
	$ch¨_dev_›í
(
öode
 *inode,

34 
fûe
 *file)

36 
cou¡î
 = 0;

37 
cou¡î
++;

38 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

39 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

40 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

41 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

42  
SUCCESS
;

43 
	}
}

45 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

46 
fûe
 *file)

48  
SUCCESS
;

49 
	}
}

51 
	$ch¨_dev_ªad
(
fûe
 *file,

52 *
buf
,

53 
size_t
 
lbuf
,

54 
loff_t
 *
µos
)

56 
maxbyãs
;

57 
byãs_to_do
;

58 
nbyãs
;

60 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

62 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

63 
byãs_to_do
 = 
maxbyãs
;

65 if–
byãs_to_do
 == 0 ) {

66 
	`¥ötk
("ReachedÉnd of device\n");

67  -
ENOSPC
;

70 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËgoögÅÿ¶ìp\n", 
cuºít
->
pid
,cuºít->
comm
);

72 i‡(
	`down_öãºu±ibÀ
 (&
my£m
)) {

73 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%òwokí u∞byá sig«l\n", 
cuºít
->
pid
);

74  -
ERESTARTSYS
;

77 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËªsumög\n", 
cuºít
->
pid
,cuºít->
comm
);

80 
nbyãs
 = 
byãs_to_do
 -

81 
	`c›y_to_u£r
–
buf
,

82 
ch¨_devi˚_buf
 + *
µos
,

83 
byãs_to_do
 );

85 *
µos
 +
nbyãs
;

86  
nbyãs
;

87 
	}
}

90 
	$ch¨_dev_wrôe
(
fûe
 *file,

91 c⁄° *
buf
,

92 
size_t
 
lbuf
,

93 
loff_t
 *
µos
)

95 
nbyãs
;

96 
byãs_to_do
;

97 
maxbyãs
;

99 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

101 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

102 
byãs_to_do
 = 
maxbyãs
;

104 if–
byãs_to_do
 == 0 ) {

105 
	`¥ötk
("ReachedÉnd of device\n");

106  -
ENOSPC
;

109 
nbyãs
 = 
byãs_to_do
 -

110 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

111 
buf
,

112 
byãs_to_do
 );

113 *
µos
 +
nbyãs
;

115 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËwakêu∞ªadîs...\n",
cuºít
->
pid
, cuºít->
comm
);

116 
	`up
 (&
my£m
);

117  
nbyãs
;

118 
	}
}

120 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

122 
loff_t
 
ã°pos
;

123 
‹ig
) {

126 
ã°pos
 = 
off£t
;

129 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

132 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

135  -
EINVAL
;

138 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

139 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

140 
fûe
->
f_pos
 = 
ã°pos
;

141 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

142  
ã°pos
;

143 
	}
}

145 
my_d©a
 
	gmy_d©a
 = {

146 .
i
 = -100,

147 .
	gx
 = 100,

148 .
	gs
 = "Linux Kernel",

152 
	$chrdev_u∆ocked_io˘l
 (
fûe
 *
Â
, 
cmd
, 
¨g
)

154 
size
, 
rc
, 
dúe˘i⁄
;

155 
__u£r
 *
iﬂrgp
 = (__u£∏*)
¨g
;

157 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
VEDA_MAGIC
) {

158 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

159  -
EINVAL
;

162 
dúe˘i⁄
 = 
	`_IOC_DIR
 (
cmd
);

163 
size
 = 
	`_IOC_SIZE
 (
cmd
);

165 
dúe˘i⁄
) {

167 
_IOC_WRITE
:

168 
	`¥ötk
(
KERN_INFO
 "Ñódög = %d byã†‰om u£r-•a˚ánd wrôögÅÿdevi˚\n",
size
);

169 
rc
 = 
	`c›y_‰om_u£r
 (&
my_d©a
, 
iﬂrgp
, 
size
);

170 
	`¥ötk
(
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

171 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

172  
rc
;

175 
_IOC_READ
:

176 
	`¥ötk
 (
KERN_INFO
 "Ñódög devi˚ánd wrôög = %d byã†tÿu£r-•a˚\n", 
size
);

177 
	`¥ötk
 (
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

178 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

179 
rc
 = 
	`c›y_to_u£r
 (
iﬂrgp
, &
my_d©a
, 
size
);

180  
rc
;

184 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

185  -
EINVAL
;

187 
	}
}

191 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

192 .
Œ£ek
 = 
ch¨_dev_l£ek
,

193 .
	gªad
 = 
ch¨_dev_ªad
,

194 .
	gwrôe
 = 
ch¨_dev_wrôe
,

195 .
	gu∆ocked_io˘l
 = 
chrdev_u∆ocked_io˘l
,

196 .
	g›í
 = 
ch¨_dev_›í
,

197 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

200 
__öô
 
	$ch¨_dev_öô
()

202 
ªt
;

204 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

205 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

209 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

210 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

211 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

214 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

216 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

217 if–
ªt
 < 0 ) {

218 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

219 
	`cdev_dñ
 (
veda_cdev
);

220 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

224 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

225 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

227 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

228 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

229 
	`öô_MUTEX_LOCKED
(&
my£m
);

231 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

233 
	}
}

235 
__exô
 
	$ch¨_dev_exô
()

237 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

238 
	`˛ass_de°roy
 (
veda_˛ass
);

239 
	`cdev_dñ
(
veda_cdev
);

240 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

241 
	`k‰ì
(
ch¨_devi˚_buf
);

242 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

243 
	}
}

244 
moduÀ_öô
(
ch¨_dev_öô
);

245 
moduÀ_exô
(
ch¨_dev_exô
);

247 
MODULE_AUTHOR
("VEDA");

248 
MODULE_DESCRIPTION
("Character Device Driver - Test");

249 
MODULE_LICENSE
("GPL");

	@ddex/char/part4/chr_drv_wait_event.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~<löux/waô.h
>

11 
	~"veda_ch¨_devi˚.h
"

13 
	#MAJORNO
 300

	)

14 
	#MINORNO
 0

	)

15 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

16 
	#MAX_LENGTH
 4000

	)

17 
	#SUCCESS
 0

	)

19 *
	gch¨_devi˚_buf
;

20 
cdev
 *
	gveda_cdev
;

21 
dev_t
 
	gmydev
;

22 
	gcou¡
=1;

23 
˛ass
 *
	gveda_˛ass
;

25 
DECLARE_WAIT_QUEUE_HEAD
(
mywq
);

26 
©omic_t
 
	gd©a_ªady
;

28 
	$ch¨_dev_›í
(
öode
 *inode,

29 
fûe
 *file)

31 
cou¡î
 = 0;

32 
cou¡î
++;

33 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

34 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

35 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

36 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

37  
SUCCESS
;

38 
	}
}

40 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

41 
fûe
 *file)

43  
SUCCESS
;

44 
	}
}

46 
	$ch¨_dev_ªad
(
fûe
 *file,

47 *
buf
,

48 
size_t
 
lbuf
,

49 
loff_t
 *
µos
)

51 
maxbyãs
;

52 
byãs_to_do
;

53 
nbyãs
;

55 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

57 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

58 
byãs_to_do
 = 
maxbyãs
;

60 if–
byãs_to_do
 == 0 ) {

61 
	`¥ötk
("ReachedÉnd of device\n");

62  -
ENOSPC
;

65 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËgoögÅÿ¶ìp\n", 
cuºít
->
pid
,cuºít->
comm
);

66 
	`waô_evít_öãºu±ibÀ
 (
mywq
, (
	`©omic_ªad
 (&
d©a_ªady
)));

67 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËªsumög\n", 
cuºít
->
pid
,cuºít->
comm
);

68 
	`©omic_£t
 (&
d©a_ªady
, 0);

71 
nbyãs
 = 
byãs_to_do
 -

72 
	`c›y_to_u£r
–
buf
,

73 
ch¨_devi˚_buf
 + *
µos
,

74 
byãs_to_do
 );

76 *
µos
 +
nbyãs
;

77  
nbyãs
;

78 
	}
}

81 
	$ch¨_dev_wrôe
(
fûe
 *file,

82 c⁄° *
buf
,

83 
size_t
 
lbuf
,

84 
loff_t
 *
µos
)

86 
nbyãs
;

87 
byãs_to_do
;

88 
maxbyãs
;

90 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

92 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

93 
byãs_to_do
 = 
maxbyãs
;

95 if–
byãs_to_do
 == 0 ) {

96 
	`¥ötk
("ReachedÉnd of device\n");

97  -
ENOSPC
;

100 
nbyãs
 = 
byãs_to_do
 -

101 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

102 
buf
,

103 
byãs_to_do
 );

104 *
µos
 +
nbyãs
;

106 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËwakêu∞ªadîs...\n",
cuºít
->
pid
, cuºít->
comm
);

107 
	`©omic_£t
 (&
d©a_ªady
, 1);

108 
	`wake_up_öãºu±ibÀ
 (&
mywq
);

110  
nbyãs
;

111 
	}
}

113 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

115 
loff_t
 
ã°pos
;

116 
‹ig
) {

119 
ã°pos
 = 
off£t
;

122 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

125 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

128  -
EINVAL
;

131 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

132 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

133 
fûe
->
f_pos
 = 
ã°pos
;

134 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

135  
ã°pos
;

136 
	}
}

138 
my_d©a
 
	gmy_d©a
 = {

139 .
i
 = -100,

140 .
	gx
 = 100,

141 .
	gs
 = "Linux Kernel",

145 
	$chrdev_u∆ocked_io˘l
 (
fûe
 *
Â
, 
cmd
, 
¨g
)

147 
size
, 
rc
, 
dúe˘i⁄
;

148 
__u£r
 *
iﬂrgp
 = (__u£∏*)
¨g
;

150 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
VEDA_MAGIC
) {

151 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

152  -
EINVAL
;

155 
dúe˘i⁄
 = 
	`_IOC_DIR
 (
cmd
);

156 
size
 = 
	`_IOC_SIZE
 (
cmd
);

158 
dúe˘i⁄
) {

160 
_IOC_WRITE
:

161 
	`¥ötk
(
KERN_INFO
 "Ñódög = %d byã†‰om u£r-•a˚ánd wrôögÅÿdevi˚\n",
size
);

162 
rc
 = 
	`c›y_‰om_u£r
 (&
my_d©a
, 
iﬂrgp
, 
size
);

163 
	`¥ötk
(
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

164 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

165  
rc
;

168 
_IOC_READ
:

169 
	`¥ötk
 (
KERN_INFO
 "Ñódög devi˚ánd wrôög = %d byã†tÿu£r-•a˚\n", 
size
);

170 
	`¥ötk
 (
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

171 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

172 
rc
 = 
	`c›y_to_u£r
 (
iﬂrgp
, &
my_d©a
, 
size
);

173  
rc
;

177 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

178  -
EINVAL
;

180 
	}
}

184 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

185 .
Œ£ek
 = 
ch¨_dev_l£ek
,

186 .
	gªad
 = 
ch¨_dev_ªad
,

187 .
	gwrôe
 = 
ch¨_dev_wrôe
,

188 .
	gu∆ocked_io˘l
 = 
chrdev_u∆ocked_io˘l
,

189 .
	g›í
 = 
ch¨_dev_›í
,

190 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

193 
__öô
 
	$ch¨_dev_öô
()

195 
ªt
;

197 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

198 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

202 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

203 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

204 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

207 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

209 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

210 if–
ªt
 < 0 ) {

211 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

212 
	`cdev_dñ
 (
veda_cdev
);

213 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

217 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

218 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

220 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

221 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

223 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

225 
	}
}

227 
__exô
 
	$ch¨_dev_exô
()

229 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

230 
	`˛ass_de°roy
 (
veda_˛ass
);

231 
	`cdev_dñ
(
veda_cdev
);

232 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

233 
	`k‰ì
(
ch¨_devi˚_buf
);

234 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

235 
	}
}

236 
moduÀ_öô
(
ch¨_dev_öô
);

237 
moduÀ_exô
(
ch¨_dev_exô
);

239 
MODULE_AUTHOR
("VEDA");

240 
MODULE_DESCRIPTION
("Character Device Driver - Test");

241 
MODULE_LICENSE
("GPL");

	@ddex/char/part4/chr_drv_waitexcl.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~<löux/waô.h
>

11 
	~"veda_ch¨_devi˚.h
"

13 
	#MAJORNO
 300

	)

14 
	#MINORNO
 0

	)

15 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

16 
	#MAX_LENGTH
 4000

	)

17 
	#SUCCESS
 0

	)

19 *
	gch¨_devi˚_buf
;

20 
cdev
 *
	gveda_cdev
;

21 
dev_t
 
	gmydev
;

22 
	gcou¡
=1;

23 
˛ass
 *
	gveda_˛ass
;

25 
DECLARE_WAIT_QUEUE_HEAD
(
mywq
);

26 
©omic_t
 
	gd©a_ªady
,
	gn¶ì≥rs
;

27 
•ölock_t
 
	gn¶ì≥rs_lock
;

29 
	$ch¨_dev_›í
(
öode
 *inode,

30 
fûe
 *file)

32 
cou¡î
 = 0;

33 
cou¡î
++;

34 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

35 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

36 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

37 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

38  
SUCCESS
;

39 
	}
}

41 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

42 
fûe
 *file)

44  
SUCCESS
;

45 
	}
}

47 
	$ch¨_dev_ªad
(
fûe
 *file,

48 *
buf
,

49 
size_t
 
lbuf
,

50 
loff_t
 *
µos
)

52 
maxbyãs
;

53 
byãs_to_do
;

54 
nbyãs
;

56 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

58 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

59 
byãs_to_do
 = 
maxbyãs
;

61 if–
byãs_to_do
 == 0 ) {

62 
	`¥ötk
("ReachedÉnd of device\n");

63  -
ENOSPC
;

66 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËgoögÅÿ¶ìp\n", 
cuºít
->
pid
,cuºít->
comm
);

67 
	`©omic_öc
(&
n¶ì≥rs
);

68 
	`waô_evít_öãºu±ibÀ_ex˛usive
(
mywq
, (
	`©omic_ªad
 (&
d©a_ªady
)));

69 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËªsumög\n", 
cuºít
->
pid
,cuºít->
comm
);

73 
	`•ö_lock
 (&
n¶ì≥rs_lock
);

74 i‡(
	`©omic_dec_™d_ã°
 (&
n¶ì≥rs
))

75 
	`©omic_£t
 (&
d©a_ªady
, 0);

76 
	`•ö_u∆ock
 (&
n¶ì≥rs_lock
);

78 
nbyãs
 = 
byãs_to_do
 -

79 
	`c›y_to_u£r
–
buf
,

80 
ch¨_devi˚_buf
 + *
µos
,

81 
byãs_to_do
 );

83 *
µos
 +
nbyãs
;

84  
nbyãs
;

85 
	}
}

88 
	$ch¨_dev_wrôe
(
fûe
 *file,

89 c⁄° *
buf
,

90 
size_t
 
lbuf
,

91 
loff_t
 *
µos
)

93 
nbyãs
;

94 
byãs_to_do
;

95 
maxbyãs
;

97 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

99 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

100 
byãs_to_do
 = 
maxbyãs
;

102 if–
byãs_to_do
 == 0 ) {

103 
	`¥ötk
("ReachedÉnd of device\n");

104  -
ENOSPC
;

107 
nbyãs
 = 
byãs_to_do
 -

108 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

109 
buf
,

110 
byãs_to_do
 );

111 *
µos
 +
nbyãs
;

113 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËwakêu∞ªadîs...\n",
cuºít
->
pid
, cuºít->
comm
);

114 
	`wake_up_öãºu±ibÀ
 (&
mywq
);

115 
	`©omic_£t
 (&
d©a_ªady
, 1);

116  
nbyãs
;

117 
	}
}

119 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

121 
loff_t
 
ã°pos
;

122 
‹ig
) {

125 
ã°pos
 = 
off£t
;

128 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

131 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

134  -
EINVAL
;

137 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

138 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

139 
fûe
->
f_pos
 = 
ã°pos
;

140 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

141  
ã°pos
;

142 
	}
}

144 
my_d©a
 
	gmy_d©a
 = {

145 .
i
 = -100,

146 .
	gx
 = 100,

147 .
	gs
 = "Linux Kernel",

151 
	$chrdev_u∆ocked_io˘l
 (
fûe
 *
Â
, 
cmd
, 
¨g
)

153 
size
, 
rc
, 
dúe˘i⁄
;

154 
__u£r
 *
iﬂrgp
 = (__u£∏*)
¨g
;

156 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
VEDA_MAGIC
) {

157 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

158  -
EINVAL
;

161 
dúe˘i⁄
 = 
	`_IOC_DIR
 (
cmd
);

162 
size
 = 
	`_IOC_SIZE
 (
cmd
);

164 
dúe˘i⁄
) {

166 
_IOC_WRITE
:

167 
	`¥ötk
(
KERN_INFO
 "Ñódög = %d byã†‰om u£r-•a˚ánd wrôögÅÿdevi˚\n",
size
);

168 
rc
 = 
	`c›y_‰om_u£r
 (&
my_d©a
, 
iﬂrgp
, 
size
);

169 
	`¥ötk
(
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

170 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

171  
rc
;

174 
_IOC_READ
:

175 
	`¥ötk
 (
KERN_INFO
 "Ñódög devi˚ánd wrôög = %d byã†tÿu£r-•a˚\n", 
size
);

176 
	`¥ötk
 (
KERN_INFO
 " my_data.i = %d\n (int)my_data.x = %ld\n my_data.s = %s\n",

177 
my_d©a
.
i
, my_d©a.
x
, my_d©a.
s
);

178 
rc
 = 
	`c›y_to_u£r
 (
iﬂrgp
, &
my_d©a
, 
size
);

179  
rc
;

183 
	`¥ötk
 (
KERN_INFO
 " gŸ invÆid ca£, CMD=%d\n", 
cmd
);

184  -
EINVAL
;

186 
	}
}

190 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

191 .
Œ£ek
 = 
ch¨_dev_l£ek
,

192 .
	gªad
 = 
ch¨_dev_ªad
,

193 .
	gwrôe
 = 
ch¨_dev_wrôe
,

194 .
	gu∆ocked_io˘l
 = 
chrdev_u∆ocked_io˘l
,

195 .
	g›í
 = 
ch¨_dev_›í
,

196 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

199 
__öô
 
	$ch¨_dev_öô
()

201 
ªt
;

203 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

204 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

208 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

209 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

210 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

213 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

215 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

216 if–
ªt
 < 0 ) {

217 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

218 
	`cdev_dñ
 (
veda_cdev
);

219 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

223 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

224 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

226 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

227 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

229 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

231 
	}
}

233 
__exô
 
	$ch¨_dev_exô
()

235 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

236 
	`˛ass_de°roy
 (
veda_˛ass
);

237 
	`cdev_dñ
(
veda_cdev
);

238 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

239 
	`k‰ì
(
ch¨_devi˚_buf
);

240 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

241 
	}
}

242 
moduÀ_öô
(
ch¨_dev_öô
);

243 
moduÀ_exô
(
ch¨_dev_exô
);

245 
MODULE_AUTHOR
("VEDA");

246 
MODULE_DESCRIPTION
("Character Device Driver - Test");

247 
MODULE_LICENSE
("GPL");

	@ddex/char/part4/reader1.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~<sys/ty≥s.h
>

13 
	~"veda_ch¨_devi˚.h
"

14 
	$maö
()

16 
fd
, 
i
,
ªt
;

17 
my_buf
[4000];

19 
	`bzîo
(
my_buf
, 4000);

22 
	`¥ötf
("[%d] - O≥nög devi˚ veda_cdrv\n", 
	`gëpid
() );

23 
fd
 = 
	`›í
–"/dev/veda_cdrv", 
O_RDONLY
 );

24 
	`≥º‹
("fd ");

25 if–
fd
 < 0 ) {

26 
	`¥ötf
("Device couldÇot be opened\n");

29 
	`¥ötf
("Devi˚ o≥√d wôh ID [%d]\n", 
fd
);

33 
	`¥ötf
("TryingÅoÑead fromÅhe device\n\n");

34 i‡((
ªt
 = 
	`ªad
–
fd
, 
my_buf
, 40 )) < 0)

36 
	`≥º‹
("\nRead ");

37 
	`exô
(1);

40 
	`¥ötf
("Ród [%s]\n", 
my_buf
);

44 
	`˛o£
(
fd
);

48 
	}
}

	@ddex/char/part4/veda_char_device.h

1 #i‚de‡
_VEDA_CHAR_DEVICE_H_


2 
	#_VEDA_CHAR_DEVICE_H_


	)

4 
	~<asm/io˘l.h
>

6 
	smy_d©a


8 
	mi
;

9 
	mx
;

10 
	ms
[256];

14 
	#VEDA_MAGIC
 'L'

	)

	@ddex/char/part4/writer.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<f˙é.h
>

5 
	~<°rög.h
>

6 
	~<°dlib.h
>

7 
	~<sys/ty≥s.h
>

9 
	~"veda_ch¨_devi˚.h
"

11 
	$maö
()

13 
fd
, 
i
;

14 
my_mesßge
[40];

15 
size
;

17 
	`°r˝y
(
my_mesßge
, "Veda Solutions : welcomeÅoÜinux world");

20 
	`¥ötf
("[%d] - O≥nög devi˚ veda_cdrv\n", 
	`gëpid
() );

21 
fd
 = 
	`›í
–"/dev/veda_cdrv", 
O_RDWR
 );

22 if–
fd
 < 0 ) {

23 
	`¥ötf
("Device couldÇot be opened\n");

26 
	`¥ötf
("Devi˚ o≥√d wôh ID [%d]\n", 
fd
);

28 
	`¥ötf
("Wrôög [%s]\n", 
my_mesßge
 );

30 
size
 = ()
	`wrôe
–
fd
, 
my_mesßge
, 
	`°æí
(my_message) );

31 
	`¥ötf
("Byã†wrôã¿%d\n", 
size
);

32 
	`bzîo
–
my_mesßge
, 20 );

37 
	`˛o£
(
fd
);

40 
	`exô
(0);

41 
	}
}

	@ddex/char/part5/hrexamp.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/timî.h
>

3 
	~<löux/öô.h
>

4 
	~<löux/vîsi⁄.h
>

5 
	~<löux/ktime.h
>

6 
	~<löux/hπimî.h
>

8 
	skt_d©a


10 
hπimî
 
	mtimî
;

11 
ktime_t
 
	m≥riod
;

12 } *
	gd©a
;

14 
hπimî_ª°¨t
 
	$ktfun
 (
hπimî
 *
v¨
)

16 
ktime_t
 
now
 = 
v¨
->
ba£
->
	`gë_time
 ();

17 
	`¥ötk
 (
KERN_INFO
 "timîÑu¬ögáàjiffõs=%ld\n", 
jiffõs
);

18 
	`hπimî_f‹w¨d
 (
v¨
, 
now
, 
d©a
->
≥riod
);

20  
HRTIMER_RESTART
;

21 
	}
}

22 
__öô
 
	$my_öô
 ()

24 
d©a
 = 
	`kmÆloc
 ( (*d©a), 
GFP_KERNEL
);

25 
d©a
->
≥riod
 = 
	`ktime_£t
 (1, 0);

26 
	`hπimî_öô
 (&
d©a
->
timî
, 
CLOCK_REALTIME
, 
HRTIMER_MODE_REL
);

27 
d©a
->
timî
.
fun˘i⁄
 = 
ktfun
;

28 
	`hπimî_°¨t
 (&
d©a
->
timî
, d©a->
≥riod
, 
HRTIMER_MODE_REL
);

31 
	}
}

32 
__exô
 
	$my_exô
 ()

34 
	`hπimî_ˇn˚l
 (&
d©a
->
timî
);

35 
	`k‰ì
 (
d©a
);

36 
	}
}

38 
moduÀ_öô
 (
my_öô
);

39 
moduÀ_exô
 (
my_exô
);

40 
MODULE_LICENSE
 ("GPL");

	@ddex/char/part5/interrupt.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/öô.h
>

3 
	~<löux/öãºu±.h
>

5 
	#SHARED_IRQ
 19

	)

6 
	gúq
 = 
SHARED_IRQ
, 
	gmy_dev_id
, 
	gúq_cou¡î
 = 0;

7 
moduÀ_∑øm
 (
úq
, , 
S_IRUGO
);

9 
úqªtu∫_t
 
	$my_öãºu±
 (
úq
, *
dev_id
)

11 
úq_cou¡î
++;

12 
	`¥ötk
 (
KERN_INFO
 "I¿thêISR: cou¡î = %d\n", 
úq_cou¡î
);

13  
IRQ_NONE
;

14 
	}
}

16 
__öô
 
	$my_öô
 ()

18 i‡(
	`ªque°_úq
(
úq
, 
my_öãºu±
, 
IRQF_SHARED
, "my_öãºu±", &
my_dev_id
))

20 
	`¥ötk
 (
KERN_INFO
 "SuccessfullyÜoading ISR handler\n");

22 
	}
}

24 
__exô
 
	$my_exô
 ()

26 
	`synchr⁄ize_úq
 (
úq
);

27 
	`‰ì_úq
 (
úq
, &
my_dev_id
);

28 
	`¥ötk
 (
KERN_INFO
 "Successfully unloading \n");

29 
	}
}

31 
moduÀ_öô
 (
my_öô
);

32 
moduÀ_exô
 (
my_exô
);

34 
MODULE_AUTHOR
 ("Team veda");

35 
MODULE_DESCRIPTION
 ("Interrupt Handler Test");

36 
MODULE_LICENSE
 ("GPL");

	@ddex/char/part5/inttest.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/öô.h
>

3 
	~<löux/öãºu±.h
>

5 
	#SHARED_IRQ
 19

	)

6 
	gúq
 = 
SHARED_IRQ
, 
	gmy_dev_id
, 
	gúq_cou¡î
 = 0;

7 
moduÀ_∑øm
 (
úq
, , 
S_IRUGO
);

9 
úqªtu∫_t
 
	$my_öãºu±
 (
úq
, *
dev_id
)

11 
úq_cou¡î
++;

12 
	`¥ötk
 (
KERN_INFO
 "I¿thêISR: cou¡î = %d\n", 
úq_cou¡î
);

13  
IRQ_NONE
;

14 
	}
}

16 
__öô
 
	$my_öô
 ()

18 i‡(
	`ªque°_úq
(
úq
, 
my_öãºu±
, 
IRQF_SHARED
, "my_öãºu±", &
my_dev_id
))

20 
	`¥ötk
 (
KERN_INFO
 "SuccessfullyÜoading ISR handler\n");

22 
	}
}

24 
__exô
 
	$my_exô
 ()

26 
	`synchr⁄ize_úq
 (
úq
);

27 
	`‰ì_úq
 (
úq
, &
my_dev_id
);

28 
	`¥ötk
 (
KERN_INFO
 "Successfully unloading \n");

29 
	}
}

31 
moduÀ_öô
 (
my_öô
);

32 
moduÀ_exô
 (
my_exô
);

34 
MODULE_AUTHOR
 ("Team veda");

35 
MODULE_DESCRIPTION
 ("Interrupt Handler Test");

36 
MODULE_LICENSE
 ("GPL");

	@ddex/char/part5/mytasklet.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/sched.h
>

3 
	~<löux/öãºu±.h
>

4 
	~<löux/¶ab.h
>

5 
	~<löux/öô.h
>

7 
t_fun
 (
t_¨g
);

9 
	ssimp


11 
	mi
;

12 
	mj
;

13 } 
	gt_d©a
;

15 
DECLARE_TASKLET
 (
t_«me
, 
t_fun
, ()&
t_d©a
);

17 
__öô
 
	$my_öô
 ()

19 
	`¥ötk
 (
KERN_INFO
 "\nHello: init_moduleÜoadedátáddress 0x%p\n",

20 
öô_moduÀ
);

21 
t_d©a
.
i
 = 100;

22 
t_d©a
.
j
 = 200;

23 
	`¥ötk
 (
KERN_INFO
 " schedulög myÅaskÀt, jiffõs%ld \n", 
jiffõs
);

24 
	`èskÀt_scheduÀ
 (&
t_«me
);

26 
	}
}

28 
__exô
 
	$my_exô
 ()

30 
	`¥ötk
 (
KERN_INFO
 "\nHello: cleanup_moduleÜoadedátáddress 0x%p\n",

31 
˛ónup_moduÀ
);

32 
	}
}

34 
	$t_fun
 (
t_¨g
)

36 
simp
 *
d©um
;

37 
d©um
 = (
simp
 *)
t_¨g
;

38 
	`¥ötk
 (
KERN_INFO
 "EnteringÅ_fun, datum->i = %d, jiffies = %ld\n",

39 
d©um
->
i
, 
jiffõs
);

40 
	`¥ötk
 (
KERN_INFO
 "EnteringÅ_fun, datum->j = %d, jiffies = %ld\n",

41 
d©um
->
j
, 
jiffõs
);

42 
	}
}

44 
moduÀ_öô
 (
my_öô
);

45 
moduÀ_exô
 (
my_exô
);

	@ddex/char/part5/timer.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/öô.h
>

3 
	~<löux/î∫o.h
>

4 
	~<löux/ty≥s.h
>

5 
	~<löux/timî.h
>

6 
	~<löux/sched.h
>

9 
timî_li°
 
	gmy_timî
;

11 
	$my_timî_fun˘i⁄
 (
±r
)

13 
	`¥ötk
 (
KERN_INFO
 "I¿my_timî_fun, jiffõ†%ld\n", 
jiffõs
);

14 
	`¥ötk
 (
KERN_INFO
 "cuºíàèskÖid i†%d\n",()
cuºít
->
pid
);

15 
	`¥ötk
 (
KERN_INFO
 "my d©®is: %d\n", ()
±r
);

16 
	}
}

18 
__öô
 
	$myöô
()

20 
Àn
 = 100;

21 
	`öô_timî
 (&
my_timî
);

22 
my_timî
.
fun˘i⁄
 = 
my_timî_fun˘i⁄
;

23 
my_timî
.
expúes
 = 
jiffõs
 + 
HZ
;

24 
my_timî
.
d©a
 = 
Àn
;

25 
	`¥ötk
 (
KERN_INFO
 "AddögÅimîáàjiffõ†%ld\n", 
jiffõs
);

26 
	`add_timî
 (&
my_timî
);

29 
	}
}

31 
__exô
 
	$myexô
()

33 
	`¥ötk
 (
KERN_INFO
 "DñëedÅime,∏r¯%d\n", 
	`dñ_timî_sync
 (&
my_timî
));

34 
	`¥ötk
(
KERN_INFO
 "\n moduleÑemoved \n");

35 
	}
}

36 
moduÀ_öô
(
myöô
);

37 
moduÀ_exô
(
myexô
);

39 
MODULE_AUTHOR
("VEDA");

40 
MODULE_DESCRIPTION
("Timer - Test");

41 
MODULE_LICENSE
("GPL");

	@ddex/char/part5/wrkqueue.c

15 
	~<löux/kî√l.h
>

16 
	~<löux/öô.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/w‹kqueue.h
>

19 
	~<löux/sched.h
>

21 
	#DELAY
 100

	)

22 
wq_öô
();

23 
wq_exô
();

24 
wq_func
(*);

27 
MODULE_LICENSE
("GPL");

28 
moduÀ_öô
(
wq_öô
);

29 
moduÀ_exô
(
wq_exô
);

31 
	gcou¡î
;

33 
DECLARE_WORK
(
wq
,(
w‹k_func_t
)
wq_func
);

36 
	$wq_func
(*
¨g
)

38 
	`¥ötk
("%ld %d %†\n", 
jiffõs
,
cou¡î
++,
cuºít
->
comm
);

39 if–
cou¡î
 < 1000 )

40 
	`scheduÀ_w‹k
(&
wq
);

41 
	}
}

43 
	$wq_öô
()

45 
	`¥ötk
("\nModule Inserted\n");

47 
	`scheduÀ_w‹k
(&
wq
);

50 
	`¥ötk
("cuºíàcou¡î %ld\n",
jiffõs
);

52 
	`¥ötk
("cuºíàcou¡î %ld\n",
jiffõs
);

54 
	}
}

56 
	$wq_exô
()

58 
	`¥ötk
("\nModule Removed");

59 
	}
}

	@ddex/char/part6/chr_drv_async.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

11 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

12 
	#MAX_LENGTH
 4000

	)

13 
	#SUCCESS
 0

	)

15 *
	gch¨_devi˚_buf
;

16 
cdev
 *
	gveda_cdev
;

17 
dev_t
 
	gmydev
;

18 
	gcou¡
=1;

19 
˛ass
 *
	gveda_˛ass
;

21 
Ásync_°ru˘
 *
	gasync_°ru˘
;

23 
	$ch¨_dev_›í
(
öode
 *inode,

24 
fûe
 *file)

26 
cou¡î
 = 0;

27 
cou¡î
++;

28 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

29 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

30 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

31 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

32  
SUCCESS
;

33 
	}
}

35 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

36 
fûe
 *file)

38  
SUCCESS
;

39 
	}
}

42 
	$ch¨_dev_ªad
(
fûe
 *file,

43 *
buf
,

44 
size_t
 
lbuf
,

45 
loff_t
 *
µos
)

47 
maxbyãs
;

48 
byãs_to_do
;

49 
nbyãs
;

51 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

53 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

54 
byãs_to_do
 = 
maxbyãs
;

56 if–
byãs_to_do
 == 0 ) {

57 
	`¥ötk
("ReachedÉnd of device\n");

58  -
ENOSPC
;

61 
nbyãs
 = 
byãs_to_do
 -

62 
	`c›y_to_u£r
–
buf
,

63 
ch¨_devi˚_buf
 + *
µos
,

64 
byãs_to_do
 );

66 *
µos
 +
nbyãs
;

67  
nbyãs
;

68 
	}
}

70 
	$ch¨_dev_wrôe
(
fûe
 *file,

71 c⁄° *
buf
,

72 
size_t
 
lbuf
,

73 
loff_t
 *
µos
)

75 
nbyãs
;

76 
byãs_to_do
;

77 
maxbyãs
;

79 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

81 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

82 
byãs_to_do
 = 
maxbyãs
;

84 if–
byãs_to_do
 == 0 ) {

85 
	`¥ötk
("ReachedÉnd of device\n");

86  -
ENOSPC
;

89 
nbyãs
 = 
byãs_to_do
 -

90 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

91 
buf
,

92 
byãs_to_do
 );

95 if–
async_°ru˘
 ) {

96 
	`¥ötk
("Sending SIGIO");

97 
	`kûl_Ásync
(&
async_°ru˘
, 
SIGIO
, 
POLL_IN
);

100 *
µos
 +
nbyãs
;

101  
nbyãs
;

102 
	}
}

105 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

107 
loff_t
 
ã°pos
;

108 
‹ig
) {

111 
ã°pos
 = 
off£t
;

114 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

117 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

120  -
EINVAL
;

123 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

124 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

125 
fûe
->
f_pos
 = 
ã°pos
;

126 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

127  
ã°pos
;

128 
	}
}

130 
	$ch¨_dev_Ásync
(
fd
,

131 
fûe
 *
fûp
,

132 
mode
)

134 
	`¥ötk
("Calling fasync in driver");

135  
	`Ásync_hñ≥r
(
fd
, 
fûp
, 
mode
, &
async_°ru˘
);

136 
	}
}

139 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

140 .
ow√r
 = 
THIS_MODULE
,

141 .
	gªad
 = 
ch¨_dev_ªad
,

142 .
	gwrôe
 = 
ch¨_dev_wrôe
,

143 .
	g›í
 = 
ch¨_dev_›í
,

144 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

145 .
	gŒ£ek
 = 
ch¨_dev_l£ek
,

146 .
	gÁsync
 = 
ch¨_dev_Ásync


149 
__öô
 
	$ch¨_dev_öô
()

151 
ªt
;

153 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

154 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

158 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

159 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

160 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

163 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

165 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

166 if–
ªt
 < 0 ) {

167 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

168 
	`cdev_dñ
 (
veda_cdev
);

169 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

173 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

174 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

176 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

177 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

179 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

181 
	}
}

183 
__exô
 
	$ch¨_dev_exô
()

185 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

186 
	`˛ass_de°roy
 (
veda_˛ass
);

187 
	`cdev_dñ
(
veda_cdev
);

188 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

189 
	`k‰ì
(
ch¨_devi˚_buf
);

190 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

191 
	}
}

192 
moduÀ_öô
(
ch¨_dev_öô
);

193 
moduÀ_exô
(
ch¨_dev_exô
);

195 
MODULE_AUTHOR
("VEDA");

196 
MODULE_DESCRIPTION
("Character Device Driver - Test");

197 
MODULE_LICENSE
("GPL");

	@ddex/char/part6/chr_drv_poll.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/fs.h
>

3 
	~<asm/uac˚ss.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/cdev.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/î∫o.h
>

8 
	~<asm/cuºít.h
>

9 
	~<löux/devi˚.h
>

10 
	~<löux/waô.h
>

11 
	~<löux/pﬁl.h
>

13 
	#CHAR_DEV_NAME
 "veda_cdrv"

	)

14 
	#MAX_LENGTH
 4000

	)

15 
	#SUCCESS
 0

	)

17 *
	gch¨_devi˚_buf
;

18 
cdev
 *
	gveda_cdev
;

19 
dev_t
 
	gmydev
;

20 
	gcou¡
=1;

21 
˛ass
 *
	gveda_˛ass
;

23 
DECLARE_WAIT_QUEUE_HEAD
(
mywq
);

24 
©omic_t
 
	gd©a_ªady
;

26 
	$ch¨_dev_›í
(
öode
 *inode,

27 
fûe
 *file)

29 
cou¡î
 = 0;

30 
cou¡î
++;

31 
	`¥ötk
(
KERN_INFO
 "Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

32 
	`¥ötk
 (
KERN_INFO
 " MAJORÇumbî = %d, MINORÇumbî = %d\n",
	`imaj‹
 (
öode
), 
	`imö‹
 (inode));

33 
	`¥ötk
(
KERN_INFO
 "Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n",
cuºít
->
pid
 );

34 
	`¥ötk
 (
KERN_INFO
 "ªf=%d\n", 
	`moduÀ_ªfcou¡
(
THIS_MODULE
));

35  
SUCCESS
;

36 
	}
}

38 
	$ch¨_dev_ªÀa£
(
öode
 *inode,

39 
fûe
 *file)

41  
SUCCESS
;

42 
	}
}

44 
	$ch¨_dev_ªad
(
fûe
 *file,

45 *
buf
,

46 
size_t
 
lbuf
,

47 
loff_t
 *
µos
)

49 
maxbyãs
;

50 
byãs_to_do
;

51 
nbyãs
;

53 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

55 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

56 
byãs_to_do
 = 
maxbyãs
;

58 if–
byãs_to_do
 == 0 ) {

59 
	`¥ötk
("ReachedÉnd of device\n");

60  -
ENOSPC
;

63 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËgoögÅÿ¶ìp\n", 
cuºít
->
pid
,cuºít->
comm
);

64 
	`waô_evít_öãºu±ibÀ
 (
mywq
, (
	`©omic_ªad
 (&
d©a_ªady
)));

65 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËªsumög\n", 
cuºít
->
pid
,cuºít->
comm
);

66 
	`©omic_£t
 (&
d©a_ªady
, 0);

69 
nbyãs
 = 
byãs_to_do
 -

70 
	`c›y_to_u£r
–
buf
,

71 
ch¨_devi˚_buf
 + *
µos
,

72 
byãs_to_do
 );

74 *
µos
 +
nbyãs
;

75  
nbyãs
;

76 
	}
}

79 
	$ch¨_dev_wrôe
(
fûe
 *file,

80 c⁄° *
buf
,

81 
size_t
 
lbuf
,

82 
loff_t
 *
µos
)

84 
nbyãs
;

85 
byãs_to_do
;

86 
maxbyãs
;

88 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

90 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

91 
byãs_to_do
 = 
maxbyãs
;

93 if–
byãs_to_do
 == 0 ) {

94 
	`¥ötk
("ReachedÉnd of device\n");

95  -
ENOSPC
;

98 
nbyãs
 = 
byãs_to_do
 -

99 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

100 
buf
,

101 
byãs_to_do
 );

102 *
µos
 +
nbyãs
;

104 
	`¥ötk
 (
KERN_INFO
 "¥o˚s†%ò(%sËwakêu∞ªadîs...\n",
cuºít
->
pid
, cuºít->
comm
);

105 
	`©omic_£t
 (&
d©a_ªady
, 1);

106 
	`wake_up_öãºu±ibÀ
 (&
mywq
);

108  
nbyãs
;

109 
	}
}

111 
	$ch¨_dev_pﬁl
 (
fûe
 *fûe, 
pﬁl_èbÀ
 * 
waô
)

113 
	`pﬁl_waô
 (
fûe
, &
mywq
, 
waô
);

114 
	`¥ötk
 (
KERN_INFO
 "I¿pﬁ»© jiffõs=%ld\n", 
jiffõs
);

115 i‡(
	`©omic_ªad
 (&
d©a_ªady
))

116  
POLLIN
 | 
POLLRDNORM
;

118 
	}
}

121 
loff_t
 
	$ch¨_dev_l£ek
 (
fûe
 *fûe, 
loff_t
 
off£t
, 
‹ig
)

123 
loff_t
 
ã°pos
;

124 
‹ig
) {

127 
ã°pos
 = 
off£t
;

130 
ã°pos
 = 
fûe
->
f_pos
 + 
off£t
;

133 
ã°pos
 = 
MAX_LENGTH
 + 
off£t
;

136  -
EINVAL
;

139 
ã°pos
 =Åe°po†< 
MAX_LENGTH
 ?Åestpos : MAX_LENGTH;

140 
ã°pos
 =Åestpos >= 0 ?Åestpos : 0;

141 
fûe
->
f_pos
 = 
ã°pos
;

142 
	`¥ötk
 (
KERN_INFO
 "SìkögÅÿpos=%ld\n", ()
ã°pos
);

143  
ã°pos
;

144 
	}
}

146 
fûe_›î©i⁄s
 
	gch¨_dev_f›s
 = {

147 .
ow√r
 = 
THIS_MODULE
,

148 .
	gªad
 = 
ch¨_dev_ªad
,

149 .
	gwrôe
 = 
ch¨_dev_wrôe
,

150 .
	g›í
 = 
ch¨_dev_›í
,

151 .
	gªÀa£
 = 
ch¨_dev_ªÀa£
,

152 .
	gŒ£ek
 = 
ch¨_dev_l£ek
,

153 .
	gpﬁl
 = 
ch¨_dev_pﬁl


156 
__öô
 
	$ch¨_dev_öô
()

158 
ªt
;

160 i‡(
	`Æloc_chrdev_ªgi⁄
 (&
mydev
, 0, 
cou¡
, 
CHAR_DEV_NAME
) < 0) {

161 
	`¥ötk
 (
KERN_ERR
 "failedÅoÑeserve major/minorÑange\n");

165 i‡(!(
veda_cdev
 = 
	`cdev_Æloc
 ())) {

166 
	`¥ötk
 (
KERN_ERR
 "cdev_alloc() failed\n");

167 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

170 
	`cdev_öô
(
veda_cdev
,&
ch¨_dev_f›s
);

172 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,
cou¡
);

173 if–
ªt
 < 0 ) {

174 
	`¥ötk
(
KERN_INFO
 "ErrorÑegistering device driver\n");

175 
	`cdev_dñ
 (
veda_cdev
);

176 
	`uƒegi°î_chrdev_ªgi⁄
 (
mydev
, 
cou¡
);

180 
veda_˛ass
 = 
	`˛ass_¸óã
 (
THIS_MODULE
, "VIRTUAL");

181 
	`devi˚_¸óã
 (
veda_˛ass
, 
NULL
, 
mydev
, NULL, "%s", "veda_cdrv");

183 
	`¥ötk
(
KERN_INFO
"\nDevi˚ Regi°îed: %s\n",
CHAR_DEV_NAME
);

184 
	`¥ötk
 (
KERN_INFO
 "Maj‹Çumbî = %d, Mö‹Çumbî = %d\n", 
	`MAJOR
 (
mydev
),
	`MINOR
 (mydev));

186 
ch¨_devi˚_buf
 =(*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

188 
	}
}

190 
__exô
 
	$ch¨_dev_exô
()

192 
	`devi˚_de°roy
 (
veda_˛ass
, 
mydev
);

193 
	`˛ass_de°roy
 (
veda_˛ass
);

194 
	`cdev_dñ
(
veda_cdev
);

195 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

196 
	`k‰ì
(
ch¨_devi˚_buf
);

197 
	`¥ötk
(
KERN_INFO
 "\n Driver unregistered \n");

198 
	}
}

199 
moduÀ_öô
(
ch¨_dev_öô
);

200 
moduÀ_exô
(
ch¨_dev_exô
);

202 
MODULE_AUTHOR
("VEDA");

203 
MODULE_DESCRIPTION
("Character Device Driver - Test");

204 
MODULE_LICENSE
("GPL");

	@ddex/char/part6/polltest.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<f˙é.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<pﬁl.h
>

9 
	$maö
 (
¨gc
, *
¨gv
[])

11 
pﬁlfd
 
fds
[1];

12 
timeout
 = 10000;

13 
fd
, 
rc
, 
nbyãs
 = 32;

14 *
buf„r
, *
fûíame
 = "/dev/veda_cdrv";

16 
buf„r
 = 
	`mÆloc
 (
nbyãs
);

18 
fd
 = 
	`›í
 (
fûíame
, 
O_RDONLY
);

19 
	`¥ötf
 ("›íed fûe: %s, wôh fûêdes¸ùt‹ = %d\n", 
fûíame
, 
fd
);

21 
fds
[0].
fd
 = fd;

22 
fds
[0].
evíts
 = 
POLLIN
;

26 i‡((
rc
 = 
	`pﬁl
 (
fds
, 1, 
timeout
)) < 0) {

27 
	`≥º‹
 ("Failure inÖoll\n");

28 
	`exô
 (
EXIT_FAILURE
);

31 i‡(
rc
 > 0) {

33 
	`¥ötf
 ("Öﬁ»ªtu∫†%d,Ñevít†0x%03x", 
rc
, 
fds
[0].
ªvíts
);

35 i‡(
fds
[0].
ªvíts
 & 
POLLIN
) {

36 
rc
 = 
	`ªad
 (
fd
, 
buf„r
, 
nbyãs
);

37 
	`¥ötf
 ("ªadög %d byãs:%s\n", 
rc
, 
buf„r
);

39 
	`¥ötf
 ("POLLINÇot set!\n");

43 
	`¥ötf
 ("pollÅimed out in %d milliseconds on %s.\n",

44 
timeout
, 
fûíame
);

47 
	`˛o£
 (
fd
);

48 
	`exô
 (
EXIT_SUCCESS
);

49 
	}
}

	@ddex/char/part6/reader.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sig«l.h
>

14 
	gfd
;

15 
	gmy_buf
[4000];

18 
	$h™dÀr
(
sig
)

20 
	`¥ötf
("Got SIGIO\n");

22 
	`¥ötf
("TryingÅoÑead fromÅhe device\n");

23 
	`ªad
–
fd
, 
my_buf
, 20 );

24 
	`¥ötf
("Ród [%s]\n", 
my_buf
);

25 
	}
}

27 
	$maö
()

29 
i
, 
oÊags
;

30 
cmd
[250];

32 
	`bzîo
(
my_buf
, 4000);

35 
	`¥ötf
("[%d] - O≥nög devi˚ veda_cdrv\n", 
	`gëpid
() );

36 
fd
 = 
	`›í
–"/dev/veda_cdrv", 
O_RDWR
 );

37 if–
fd
 < 0 ) {

38 
	`¥ötf
("Device couldÇot be opened\n");

41 
	`¥ötf
("Devi˚ o≥√d wôh ID [%d]\n", 
fd
);

43 
	`f˙é
(
fd
, 
F_SETOWN
, 
	`gëpid
());

44 
oÊags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

45 
	`f˙é
(
fd
, 
F_SETFL
, 
oÊags
|
FASYNC
);

46 
	`sig«l
(
SIGIO
, 
h™dÀr
);

48 
	`¥ötf
("I willÇow behaveÜikeá shell\n");

50 
	`bzîo
(
cmd
, 350);

51 
	`¥ötf
("\nEnter Command: ");

52 
	`gës
–
cmd
 );

53 if–!
	`°rcmp
("exô", 
cmd
) ) ;

54 
	`sy°em
–
cmd
 );

56 
	`¥ötf
("Bye\n");

59 
	`˛o£
(
fd
);

62 
	`exô
(0);

63 
	}
}

	@ddex/char/part6/sample.c

1 
	gINIT_WORK


	@ddex/char/part6/writer.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<f˙é.h
>

5 
	~<°rög.h
>

6 
	~<°dlib.h
>

7 
	~<sys/ty≥s.h
>

11 
	$maö
()

13 
fd
, 
i
;

14 
my_mesßge
[22];

15 
size
;

17 
	`°r˝y
(
my_mesßge
, "Veda Solutions");

20 
	`¥ötf
("[%d] - O≥nög devi˚ veda_cdrv\n", 
	`gëpid
() );

21 
fd
 = 
	`›í
–"/dev/veda_cdrv", 
O_RDWR
 );

22 if–
fd
 < 0 ) {

23 
	`¥ötf
("Device couldÇot be opened\n");

26 
	`¥ötf
("Devi˚ o≥√d wôh ID [%d]\n", 
fd
);

29 
	`¥ötf
("Sizêo‡thêdevi˚ = %d\n", 
size
);

31 
	`¥ötf
("Wrôög [%s]\n", 
my_mesßge
 );

33 
size
 = ()
	`wrôe
–
fd
, 
my_mesßge
, 
	`°æí
(my_message) );

34 
	`¥ötf
("Byã†wrôã¿%d\n", 
size
);

35 
	`bzîo
–
my_mesßge
, 20 );

36 
	`ªad
–
fd
, 
my_mesßge
, 20 );

37 
	`¥ötf
("Wrôã¿[%s] \n", 
my_mesßge
 );

40 
	`˛o£
(
fd
);

43 
	`exô
(0);

44 
	}
}

	@ddex/char/part7/char_driver_aio.c

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/fs.h
>

14 
	~<asm/uac˚ss.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/sched.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/cdev.h
>

19 
	~<löux/aio.h
>

20 
	~<löux/devi˚.h
>

21 
	~<löux/vîsi⁄.h
>

30 
öô_ch¨_devi˚
();

31 
exô_ch¨_devi˚
();

33 
moduÀ_öô
(
öô_ch¨_devi˚
);

34 
moduÀ_exô
(
exô_ch¨_devi˚
);

49 
ch¨_devi˚_›í
(
öode
 *inode,

50 
fûe
 *file);

51 
ch¨_devi˚_ªÀa£
(
öode
 *inode,

52 
fûe
 *file);

53 
ch¨_devi˚_ªad
(
fûe
 *file,

54 *
buf
,

55 
size_t
 
lbuf
,

56 
loff_t
 *
µos
);

57 
ch¨_devi˚_wrôe
(
fûe
 *file,

58 c⁄° *
buf
,

59 
size_t
 
lbuf
,

60 
loff_t
 *
µos
);

61 
loff_t
 
ch¨_devi˚_l£ek
(
fûe
 *file,

62 
loff_t
 
off£t
,

63 
‹ig
);

64 
ssize_t
 
ch¨_devi˚_aio_ªad
(
kiocb
 *
iocb
, c⁄° 
iovec
 *
buf
,
cou¡
,
loff_t
 
pos
);

66 
ssize_t
 
ch¨_devi˚_aio_wrôe
(
kiocb
 *
iocb
, c⁄° 
iovec
 *
buf
,
cou¡
, 
loff_t
 
pos
);

69 
fûe_›î©i⁄s
 
	gch¨_devi˚_fûe_›s
;

86 
	gch¨_devi˚_id
;

87 
	#CHAR_DEVICE_NAME
 "veda_cdrv"

	)

88 
	#MAX_LENGTH
 4000

	)

89 
	gch¨_devi˚_buf
[
MAX_LENGTH
];

90 
cdev
 *
	gveda_cdev
;

91 
dev_t
 
	gmydev
;

93 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

94 
˛ass_sim∂e
 *
	gveda_˛ass
=
NULL
;

96 
˛ass
 *
	gveda_˛ass
=
NULL
;

99 
	$öô_ch¨_devi˚
()

101 
i
,
ªt
;

102 
ch¨_devi˚_fûe_›s
.
ow√r
 = 
THIS_MODULE
;

103 
ch¨_devi˚_fûe_›s
.
ªad
 = 
ch¨_devi˚_ªad
;

104 
ch¨_devi˚_fûe_›s
.
wrôe
 = 
ch¨_devi˚_wrôe
;

105 
ch¨_devi˚_fûe_›s
.
›í
 = 
ch¨_devi˚_›í
;

106 
ch¨_devi˚_fûe_›s
.
ªÀa£
 = 
ch¨_devi˚_ªÀa£
;

107 
ch¨_devi˚_fûe_›s
.
Œ£ek
 = 
ch¨_devi˚_l£ek
;

108 
ch¨_devi˚_fûe_›s
.
aio_ªad
 = 
ch¨_devi˚_aio_ªad
;

109 
ch¨_devi˚_fûe_›s
.
aio_wrôe
 = 
ch¨_devi˚_aio_wrôe
;

111 
ªt
=
	`Æloc_chrdev_ªgi⁄
(&
mydev
,0,1,"veda_cdrv");

113 
ch¨_devi˚_id

	`MAJOR
(
mydev
);

116 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

117 
veda_˛ass
 = 
	`˛ass_sim∂e_¸óã
(
THIS_MODULE
,"Veda");

118 if(
	`IS_ERR
(
veda_˛ass
)){

119 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

122 
	`˛ass_sim∂e_devi˚_add
(
veda_˛ass
,
mydev
,
NULL
,"veda_cdrv");

125 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

126 
veda_˛ass
=
	`˛ass_¸óã
(
THIS_MODULE
,"Veda");

128 if(
	`IS_ERR
(
veda_˛ass
)){

129 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

132 
	`devi˚_¸óã
(
veda_˛ass
,
NULL
,
mydev
,NULL,"veda_cdrv");

137 
veda_cdev

	`cdev_Æloc
();

139 
veda_cdev
->
ow√r
=
THIS_MODULE
;

140 
veda_cdev
->
›s
&
ch¨_devi˚_fûe_›s
;

143 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,1);

146 if–
ªt
 < 0 ) {

147 
	`¥ötk
("ErrorÑegistering device driver\n");

148  
ªt
;

150 
	`¥ötk
("Devi˚ Regi°îed wôh MAJOR NO[%d]\n",
ch¨_devi˚_id
);

152 
i
=0; i<
MAX_LENGTH
; i++Ë
ch¨_devi˚_buf
[i] = 0;

153 
ch¨_devi˚_buf
[
MAX_LENGTH
] = '\0';

155 
	}
}

160 
	$exô_ch¨_devi˚
()

162 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

163 
	`˛ass_sim∂e_devi˚_ªmove
(
mydev
);

164 
	`˛ass_sim∂e_de°roy
(
veda_˛ass
);

166 
	`devi˚_de°roy
(
veda_˛ass
,
mydev
);

167 
	`˛ass_de°roy
(
veda_˛ass
);

169 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

170 
	`cdev_dñ
(
veda_cdev
);

171 
	`¥ötk
("\nModule Successfully Removed\n");

172 
	}
}

174 
	#SUCCESS
 0

	)

190 
	$ch¨_devi˚_›í
(
öode
 *inode,

191 
fûe
 *file)

193 
cou¡î
 = 0;

194 
cou¡î
++;

195 
	`¥ötk
("Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

196 
	`¥ötk
("Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n", 
cuºít
->
pid
 );

197  
SUCCESS
;

198 
	}
}

211 
	$ch¨_devi˚_ªÀa£
(
öode
 *inode,

212 
fûe
 *file)

214  
SUCCESS
;

215 
	}
}

228 
	$ch¨_devi˚_ªad
(
fûe
 *file,

229 *
buf
,

230 
size_t
 
lbuf
,

231 
loff_t
 *
µos
)

233 
maxbyãs
;

234 
byãs_to_do
;

235 
nbyãs
;

237 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

239 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

240 
byãs_to_do
 = 
maxbyãs
;

242 if–
byãs_to_do
 == 0 ) {

243 
	`¥ötk
("ReachedÉnd of device\n");

244  -
ENOSPC
;

247 
nbyãs
 = 
byãs_to_do
 -

248 
	`c›y_to_u£r
–
buf
,

249 
ch¨_devi˚_buf
 + *
µos
,

250 
byãs_to_do
 );

251 *
µos
 +
nbyãs
;

252  
nbyãs
;

253 
	}
}

266 
	$ch¨_devi˚_wrôe
(
fûe
 *file,

267 c⁄° *
buf
,

268 
size_t
 
lbuf
,

269 
loff_t
 *
µos
)

271 
nbyãs
;

272 
byãs_to_do
;

273 
maxbyãs
;

275 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

277 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

278 
byãs_to_do
 = 
maxbyãs
;

280 if–
byãs_to_do
 == 0 ) {

281 
	`¥ötk
("ReachedÉnd of device\n");

282  -
ENOSPC
;

285 
nbyãs
 = 
byãs_to_do
 -

286 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

287 
buf
,

288 
byãs_to_do
 );

289 *
µos
 +
nbyãs
;

290  
nbyãs
;

291 
	}
}

309 
loff_t
 
	$ch¨_devi˚_l£ek
(
fûe
 *file,

310 
loff_t
 
off£t
,

311 
‹ig
)

313 
loff_t
 
√w_pos
=0;

314  
‹ig
 )

317 
√w_pos
 = 
off£t
;

320 
√w_pos
 = 
fûe
->
f_pos
 + 
off£t
;

323 
√w_pos
 = 
MAX_LENGTH
 - 
off£t
;

326 if–
√w_pos
 > 
MAX_LENGTH
 )Çew_pos = MAX_LENGTH;

327 if–
√w_pos
 < 0 )Çew_pos = 0;

328 
fûe
->
f_pos
 = 
√w_pos
;

329  
√w_pos
;

330 
	}
}

335 
	sasync_w‹k
 {

336 
kiocb
 *
	miocb
;

337 
	mªsu…
;

338 
w‹k_°ru˘
 
	mw‹k
;

344 
	$ch¨_devi˚_do_de„ºed_›
(*
p
)

346 
async_w‹k
 *
°uff
 = (async_w‹k *Ë
p
;

347 
	`aio_com∂ëe
(
°uff
->
iocb
, stuff->
ªsu…
, 0);

348 
	`k‰ì
(
°uff
);

349 
	}
}

350 
	$ch¨_devi˚_de„r_›
(
wrôe
, 
kiocb
 *
iocb
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 
pos
)

352 
async_w‹k
 *
°uff
;

353 
ªsu…
;

355 i‡(
wrôe
)

356 
ªsu…
 = 
	`ch¨_devi˚_wrôe
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

358 
ªsu…
 = 
	`ch¨_devi˚_ªad
(
iocb
->
ki_fûp
, 
buf
, 
cou¡
, &
pos
);

361 i‡(
	`is_sync_kiocb
(
iocb
))

362  
ªsu…
;

365 
°uff
 = 
	`kmÆloc
 ( (*°uff), 
GFP_KERNEL
);

366 i‡(
°uff
 =
NULL
)

367  
ªsu…
;

368 
°uff
->
iocb
 = iocb;

369 
°uff
->
ªsu…
 =Ñesult;

370 
	`INIT_WORK
(&
°uff
->
w‹k
, (
w‹k_func_t
)
ch¨_devi˚_do_de„ºed_›
);

371 
	`scheduÀ_dñayed_w‹k
((
dñayed_w‹k
 *)&
°uff
->
w‹k
, 
HZ
/100);

372  -
EIOCBQUEUED
;

373 
	}
}

375 
ssize_t
 
	$ch¨_devi˚_aio_ªad
(
kiocb
 *
iocb
, c⁄° 
iovec
 *
buf
, 
cou¡
,
loff_t
 
pos
)

377  
	`ch¨_devi˚_de„r_›
(0, 
iocb
, (*)
buf
, 
cou¡
, 
pos
);

378 
	}
}

380 
ssize_t
 
	$ch¨_devi˚_aio_wrôe
(
kiocb
 *
iocb
,c⁄° 
iovec
 *
buf
,
cou¡
, 
loff_t
 
pos
)

382  
	`ch¨_devi˚_de„r_›
(1, 
iocb
, (*Ë
buf
, 
cou¡
, 
pos
);

383 
	}
}

384 
MODULE_AUTHOR
("VEDA");

385 
MODULE_DESCRIPTION
("Character Device Driver - Test");

386 
MODULE_LICENSE
("GPL");

	@ddex/char/part7/test_char_driver.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<î∫o.h
>

13 
	~<aio.h
>

21 
	$maö
()

23 
fd
;

24 
buf
[20];

25 
aiocb
 *
async_iocb
;

26 if((
fd
 = 
	`›í
("/dev/veda_cdrv",
O_RDONLY
)) < 0)

28 
	`≥º‹
("\n fd status: ");

29 
	`exô
(0);

31 
async_iocb
 = (
aiocb
 *)
	`mÆloc
((aiocb));

32 
async_iocb
->
aio_fûdes
=
fd
;

33 
async_iocb
->
aio_buf
=&
buf
;

34 
async_iocb
->
aio_nbyãs
=20;

35 
	`aio_ªad
(
async_iocb
);

36 
	`¶ìp
(1);

37 
	`wrôe
(1,
buf
,
	`°æí
(buf));

38 
	`¥ötf
("\nbuf„∏%†\¿",
buf
);

39 
	`˛o£
(
fd
);

40 
	}
}

	@ddex/char/part8/char_driver_mmap.c

9 
	~<löux/moduÀ.h
>

10 
	~<löux/fs.h
>

11 
	~<asm/uac˚ss.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/sched.h
>

14 
	~<löux/ty≥s.h
>

15 
	~<löux/cdev.h
>

16 
	~<löux/devi˚.h
>

17 
	~<löux/vîsi⁄.h
>

19 
	~<löux/mm.h
>

20 
	~<löux/highmem.h
>

28 
öô_ch¨_devi˚
();

29 
exô_ch¨_devi˚
();

31 
moduÀ_öô
(
öô_ch¨_devi˚
);

32 
moduÀ_exô
(
exô_ch¨_devi˚
);

47 
ch¨_devi˚_›í
(
öode
 *inode,

48 
fûe
 *file);

49 
ch¨_devi˚_ªÀa£
(
öode
 *inode,

50 
fûe
 *file);

51 
ch¨_devi˚_ªad
(
fûe
 *file,

52 *
buf
,

53 
size_t
 
lbuf
,

54 
loff_t
 *
µos
);

55 
ch¨_devi˚_wrôe
(
fûe
 *file,

56 c⁄° *
buf
,

57 
size_t
 
lbuf
,

58 
loff_t
 *
µos
);

59 
loff_t
 
ch¨_devi˚_l£ek
(
fûe
 *file,

60 
loff_t
 
off£t
,

61 
‹ig
);

63 
ch¨_devi˚_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
);

66 
fûe_›î©i⁄s
 
	gch¨_devi˚_fûe_›s
;

83 
	gch¨_devi˚_id
;

84 
	#CHAR_DEVICE_NAME
 "veda_cdrv"

	)

85 
	#MAX_LENGTH
 4096

	)

86 *
	gch¨_devi˚_buf
;

87 
cdev
 *
	gveda_cdev
;

88 
dev_t
 
	gmydev
;

89 
	gaddr
;

91 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

92 
˛ass_sim∂e
 *
	gveda_˛ass
=
NULL
;

94 
˛ass
 *
	gveda_˛ass
=
NULL
;

97 
	$öô_ch¨_devi˚
()

99 
ªt
;

100 
ch¨_devi˚_fûe_›s
.
ow√r
 = 
THIS_MODULE
;

101 
ch¨_devi˚_fûe_›s
.
ªad
 = 
ch¨_devi˚_ªad
;

102 
ch¨_devi˚_fûe_›s
.
wrôe
 = 
ch¨_devi˚_wrôe
;

103 
ch¨_devi˚_fûe_›s
.
›í
 = 
ch¨_devi˚_›í
;

104 
ch¨_devi˚_fûe_›s
.
ªÀa£
 = 
ch¨_devi˚_ªÀa£
;

105 
ch¨_devi˚_fûe_›s
.
Œ£ek
 = 
ch¨_devi˚_l£ek
;

106 
ch¨_devi˚_fûe_›s
.
mm≠
 = 
ch¨_devi˚_mm≠
;

108 
ªt
=
	`Æloc_chrdev_ªgi⁄
(&
mydev
,0,1,"veda_cdrv");

109 
ch¨_devi˚_buf
 = (*)
	`kmÆloc
(
MAX_LENGTH
,
GFP_KERNEL
);

111 
ch¨_devi˚_id

	`MAJOR
(
mydev
);

116 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

117 
veda_˛ass
 = 
	`˛ass_sim∂e_¸óã
(
THIS_MODULE
,"Veda");

118 if(
	`IS_ERR
(
veda_˛ass
)){

119 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

122 
	`˛ass_sim∂e_devi˚_add
(
veda_˛ass
,
mydev
,
NULL
,"veda_cdrv");

125 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

126 
veda_˛ass
=
	`˛ass_¸óã
(
THIS_MODULE
,"Veda");

128 if(
	`IS_ERR
(
veda_˛ass
)){

129 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

132 
	`devi˚_¸óã
(
veda_˛ass
,
NULL
,
mydev
,NULL,"veda_cdrv");

136 
veda_cdev

	`cdev_Æloc
();

138 
veda_cdev
->
ow√r
=
THIS_MODULE
;

139 
veda_cdev
->
›s
&
ch¨_devi˚_fûe_›s
;

142 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,1);

145 if–
ªt
 < 0 ) {

146 
	`¥ötk
("ErrorÑegistering device driver\n");

147  
ªt
;

149 
	`¥ötk
("Devi˚ Regi°îed wôh MAJOR NO[%d]\n",
ch¨_devi˚_id
);

150 
	`mem£t
(
ch¨_devi˚_buf
,'V',
MAX_LENGTH
);

155 
	}
}

160 
	$exô_ch¨_devi˚
()

163 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

164 
	`˛ass_sim∂e_devi˚_ªmove
(
mydev
);

165 
	`˛ass_sim∂e_de°roy
(
veda_˛ass
);

167 
	`devi˚_de°roy
(
veda_˛ass
,
mydev
);

168 
	`˛ass_de°roy
(
veda_˛ass
);

171 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

172 
	`cdev_dñ
(
veda_cdev
);

173 
	`¥ötk
("\n Module Successfully Un-Registered\n");

174 
	}
}

176 
	#SUCCESS
 0

	)

192 
	$ch¨_devi˚_›í
(
öode
 *inode,

193 
fûe
 *file)

195 
cou¡î
 = 0;

196 
cou¡î
++;

197 
	`¥ötk
("Numbî o‡time†›í(Ëwa†ˇŒed: %d\n", 
cou¡î
);

198 
	`¥ötk
("Pro˚s†id o‡thêcuºíà¥o˚ss: %d\n", 
cuºít
->
pid
 );

199  
SUCCESS
;

200 
	}
}

213 
	$ch¨_devi˚_ªÀa£
(
öode
 *inode,

214 
fûe
 *file)

216  
SUCCESS
;

217 
	}
}

230 
	$ch¨_devi˚_ªad
(
fûe
 *file,

231 *
buf
,

232 
size_t
 
lbuf
,

233 
loff_t
 *
µos
)

235 
maxbyãs
;

236 
byãs_to_do
;

237 
nbyãs
;

239 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

241 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

242 
byãs_to_do
 = 
maxbyãs
;

244 if–
byãs_to_do
 == 0 ) {

245 
	`¥ötk
("ReachedÉnd of device\n");

246  -
ENOSPC
;

249 
nbyãs
 = 
byãs_to_do
 -

250 
	`c›y_to_u£r
–
buf
,

251 
ch¨_devi˚_buf
 + *
µos
,

252 
byãs_to_do
 );

253 *
µos
 +
nbyãs
;

254  
nbyãs
;

255 
	}
}

268 
	$ch¨_devi˚_wrôe
(
fûe
 *file,

269 c⁄° *
buf
,

270 
size_t
 
lbuf
,

271 
loff_t
 *
µos
)

273 
nbyãs
;

274 
byãs_to_do
;

275 
maxbyãs
;

277 
maxbyãs
 = 
MAX_LENGTH
 - *
µos
;

279 if–
maxbyãs
 > 
lbuf
 ) 
byãs_to_do
 =Übuf;

280 
byãs_to_do
 = 
maxbyãs
;

282 if–
byãs_to_do
 == 0 ) {

283 
	`¥ötk
("ReachedÉnd of device\n");

284  -
ENOSPC
;

287 
nbyãs
 = 
byãs_to_do
 -

288 
	`c›y_‰om_u£r
–
ch¨_devi˚_buf
 + *
µos
,

289 
buf
,

290 
byãs_to_do
 );

291 *
µos
 +
nbyãs
;

292  
nbyãs
;

293 
	}
}

311 
loff_t
 
	$ch¨_devi˚_l£ek
(
fûe
 *file,

312 
loff_t
 
off£t
,

313 
‹ig
)

315 
loff_t
 
√w_pos
=0;

316  
‹ig
 )

319 
√w_pos
 = 
off£t
;

322 
√w_pos
 = 
fûe
->
f_pos
 + 
off£t
;

325 
√w_pos
 = 
MAX_LENGTH
 - 
off£t
;

328 if–
√w_pos
 > 
MAX_LENGTH
 )Çew_pos = MAX_LENGTH;

329 if–
√w_pos
 < 0 )Çew_pos = 0;

330 
fûe
->
f_pos
 = 
√w_pos
;

331  
√w_pos
;

332 
	}
}

334 
	$ch¨_vm_›í
(
vm_¨ó_°ru˘
 *
vma
)

337 
	}
}

338 
	$ch¨_vm_˛o£
(
vm_¨ó_°ru˘
 *
vma
)

340 
	`CÀ¨PageRe£rved
(
	`vút_to_∑ge
(
addr
));

341 
	}
}

344 
vm_›î©i⁄s_°ru˘
 
	gch¨_vm_›s
 ={

345 
›í
:
ch¨_vm_›í
,

346 
˛o£
:
ch¨_vm_˛o£
,

364 
	$ch¨_devi˚_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

366 
vma
->
vm_›s
 = &
ch¨_vm_›s
;

367 
addr
 = ()
ch¨_devi˚_buf
;

368 
	`SëPageRe£rved
(
	`vút_to_∑ge
(
addr
));

369 
addr
 = 
	`__∑
(addr);

370 i‡(
	`ªm≠_p‚_ønge
(
vma
, vma->
vm_°¨t
,
addr
 >> 
PAGE_SHIFT
,
	`PAGE_ALIGN
(
MAX_LENGTH
),vma->
vm_∑ge_¥Ÿ
))

371  -
EAGAIN
;

372  
SUCCESS
;

373 
	}
}

375 
MODULE_AUTHOR
("VEDA");

376 
MODULE_DESCRIPTION
("Character Device Driver - Test");

377 
MODULE_LICENSE
("GPL");

	@ddex/char/part8/mmap.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

13 
	$maö
(){

14 
fd
,
i
;

15 *
fûed©a

NULL
,*
ãmp
;

16 
fd
 = 
	`›í
("/dev/veda_cdrv",
O_RDONLY
);

17 
fûed©a
 = (*Ë
	`mm≠
((*)0,20,
PROT_READ
|
PROT_WRITE
,\

18 
MAP_PRIVATE
,
fd
,0);

19 
	`≥º‹
("\n MMAP STATUS: ");

20 
	`wrôe
(1,(*)
fûed©a
,
	`°æí
((*)filedata));

22 if(
fûed©a
 =
NULL
){

23 
	`≥º‹
("Maping Failed");

24 
	`exô
(1);

28 
ãmp
 = 
fûed©a
;

29 
	`wrôe
(1,
fûed©a
,
	`°æí
(filedata));

32 
i
 = 
	`munm≠
(
ãmp
,100);

33 if–
i
 != 0)

34 
	`¥ötf
(" failedÅo unmap\n");

35 
	}
}

	@ddex/char/part8/test_mmap.c

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	#MAX_LENGTH
 4096

	)

14 
	$maö
(){

15 
fd
,
i
;

16 *
d©a

NULL
,*
ãmp
;

17 *
ãmp_buf
;

18 
fd
 = 
	`›í
("/dev/veda_cdrv",
O_RDONLY
);

19 
	`gëch¨
();

20 
d©a
 = (*Ë
	`mm≠
(0,4096,
PROT_READ
|
PROT_WRITE
,
MAP_PRIVATE
,
fd
,0);

21 
	`≥º‹
("\n MMAP STATUS: ");

22 
	`gëch¨
();

23 
ãmp_buf
 = 
d©a
;

24 
	`wrôe
(1,
d©a
,4096);

25 
	`mem£t
(
ãmp_buf
,'v',
MAX_LENGTH
);

26 
	`msync
(
ãmp_buf
,
MAX_LENGTH
,
MS_SYNC
);

27 
	`wrôe
(1,
d©a
,4096);

28 
	`munm≠
(
d©a
,4096);

29 
	}
}

	@ddex/char/part8/vram.c

24 
	~<löux/moduÀ.h
>

25 
	~<löux/pci.h
>

27 
	#VENDOR_ID
 0x5333

28 
	#DEVICE_ID
 0x8904

29 

	)

30 
	gmod«me
[] = "vram";

31 
	gmy_maj‹
 = 0;

32 
	gfb_ba£
;

33 
	gfb_size
;

35 
loff_t
 
	$my_Œ£ek
–
fûe
 *fûe, 
loff_t
 
pos
, 
whí˚
 )

37 
loff_t
 
√wpos
 = -1;

39  
whí˚
 )

41 0: 
√wpos
 = 
pos
; ;

42 1: 
√wpos
 = 
fûe
->
f_pos
 + 
pos
; ;

43 2: 
√wpos
 = 
fb_size
 + 
pos
; ;

46 i‡(–
√wpos
 < 0 )||–√wpo†> 
fb_size
 )Ë -
EINVAL
;

47 
fûe
->
f_pos
 = 
√wpos
;

48  
√wpos
;

49 
	}
}

51 
ssize_t


52 
	$my_wrôe
–
fûe
 *fûe, c⁄° *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
 )

54 
phys_addªss
 = 
fb_ba£
 + *
pos
;

55 
∑ge_numbî
 = 
phys_addªss
 / 
PAGE_SIZE
;

56 
∑ge_ödít
 = 
phys_addªss
 % 
PAGE_SIZE
;

57 
whîe
;

58 *
vaddr
;

61 i‡–*
pos
 >
fb_size
 )  0;

64 i‡–
∑ge_ödít
 + 
cou¡
 > 
PAGE_SIZE
 ) count = PAGE_SIZE -Öage_indent;

67 
whîe
 = 
∑ge_numbî
 * 
PAGE_SIZE
;

68 
vaddr
 = 
	`i‹em≠
–
whîe
, 
PAGE_SIZE
 );

71 
	`mem˝y_toio
–
vaddr
 + 
∑ge_ödít
, 
buf
, 
cou¡
 );

72 
	`iounm≠
–
vaddr
 );

75 *
pos
 +
cou¡
;

76  
cou¡
;

77 
	}
}

79 
ssize_t


80 
	$my_ªad
–
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
 )

82 
phys_addªss
 = 
fb_ba£
 + *
pos
;

83 
∑ge_numbî
 = 
phys_addªss
 / 
PAGE_SIZE
;

84 
∑ge_ödít
 = 
phys_addªss
 % 
PAGE_SIZE
;

85 
whîe
;

86 *
vaddr
;

89 i‡–*
pos
 >
fb_size
 )

93 i‡–
∑ge_ödít
 + 
cou¡
 > 
PAGE_SIZE
 )

94 
cou¡
 = 
PAGE_SIZE
 - 
∑ge_ödít
;

97 
whîe
 = 
∑ge_numbî
 * 
PAGE_SIZE
;

98 
vaddr
 = 
	`i‹em≠
–
whîe
, 
PAGE_SIZE
 );

101 
	`mem˝y_‰omio
–
buf
, 
vaddr
 + 
∑ge_ödít
, 
cou¡
 );

102 
	`iounm≠
–
vaddr
 );

105 *
pos
 +
cou¡
;

106  
cou¡
;

107 
	}
}

109 
fûe_›î©i⁄s


110 
	gmy_f›s
 = {

111 
ow√r
: 
THIS_MODULE
,

112 
Œ£ek
: 
my_Œ£ek
,

113 
wrôe
: 
my_wrôe
,

114 
ªad
: 
my_ªad
,

118 
	$öô_moduÀ
( )

120 
pci_dev
 *
devp
 = 
NULL
;

122 
	`¥ötk
–"<1>\nIn°Ælög \'%s\' moduÀ ", 
mod«me
 );

123 
	`¥ötk
–"(maj‹=%dË\n", 
my_maj‹
 );

126 
devp
 = 
	`pci_föd_devi˚
–
VENDOR_ID
, 
DEVICE_ID
, devp );

127 i‡–!
devp
 )  -
ENODEV
;

130 
fb_ba£
 = 
	`pci_ªsour˚_°¨t
–
devp
, 0 );

131 
fb_size
 = 
	`pci_ªsour˚_Àn
–
devp
, 0 );

132 
	`¥ötk
( "<1>áddress-range of frame-buffer: " );

133 
	`¥ötk
–"%08lX-%08lX ", 
fb_ba£
, fb_ba£+
fb_size
 );

134 
	`¥ötk
–"(%lu MBË\n", 
fb_size
 >> 20 );

136  
	`ªgi°î_chrdev
–
my_maj‹
, 
mod«me
, &
my_f›s
 );

137 
	}
}

140 
	$˛ónup_moduÀ
( )

142 
	`uƒegi°î_chrdev
–
my_maj‹
, 
mod«me
 );

143 
	`¥ötk
–"<1>Removög \'%s\' moduÀ\n", 
mod«me
 );

144 
	}
}

146 
MODULE_LICENSE
("GPL");

	@ddex/char/part8/vramdraw.cpp

10 
	~<°dio.h
>

11 
	~<f˙é.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

15 
	#HMAX
 1280

	)

16 
	#VMAX
 1024

	)

17 
	gdev«me
[] = "/dev/vram";

19 
	$maö
( )

25 
fd
 = 
	`›í
–
dev«me
, 
O_RDWR
 );

26 i‡–
fd
 < 0 ) { 
	`≥º‹
–
dev«me
 ); 
	`exô
(1); }

27 
	`gëch¨
();

31 
y
 = 0; y < 
VMAX
; y++)

33 
sˇ∆öe
[ 
HMAX
 ];

34 
	`l£ek
–
fd
, 
y
*
HMAX
*4, 
SEEK_SET
 );

35 
	`ªad
–
fd
, 
sˇ∆öe
, ( scanline ) );

36 
x
 = 0; x < 
HMAX
; x++)

38 
cﬁ‹
 = 
sˇ∆öe
[
x
] & 0x00FFFFFF;

39 
cﬁ‹
 = (color >> 4)|(color << 8);

41 
sˇ∆öe
[
x
] = 
cﬁ‹
 & 0x00FFFFFF;

43 
	`l£ek
–
fd
, 
y
*
HMAX
*4, 
SEEK_SET
 );

44 
	`wrôe
–
fd
, 
sˇ∆öe
, ( scanline ) );

46 
	`gëch¨
();

49 
	`˛o£
–
fd
 );

50 
	`sy°em
( "/sbin/rmmod vram" );

51 
	}
}

	@ddex/char/part8/vramm.c

27 
	~<löux/moduÀ.h
>

28 
	~<löux/pci.h
>

30 
	#VENDOR_ID
 0x8086

31 
	#DEVICE_ID
 0x2562

32 

	)

33 
	gmod«me
[] = "vramm";

34 
	gmy_maj‹
 = 0;

35 
	gfb_ba£
;

36 
	gfb_size
;

38 
loff_t
 
	$my_Œ£ek
–
fûe
 *fûe, 
loff_t
 
pos
, 
whí˚
 )

40 
loff_t
 
√wpos
 = -1;

42  
whí˚
 )

44 0: 
√wpos
 = 
pos
; ;

45 1: 
√wpos
 = 
fûe
->
f_pos
 + 
pos
; ;

46 2: 
√wpos
 = 
fb_size
 + 
pos
; ;

49 i‡(–
√wpos
 < 0 )||–√wpo†> 
fb_size
 )Ë -
EINVAL
;

50 
fûe
->
f_pos
 = 
√wpos
;

51  
√wpos
;

52 
	}
}

54 
ssize_t


55 
	$my_wrôe
–
fûe
 *fûe, c⁄° *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
 )

57 
phys_addªss
 = 
fb_ba£
 + *
pos
;

58 
∑ge_numbî
 = 
phys_addªss
 / 
PAGE_SIZE
;

59 
∑ge_ödít
 = 
phys_addªss
 % 
PAGE_SIZE
;

60 
whîe
;

61 *
vaddr
;

64 i‡–*
pos
 >
fb_size
 )  0;

67 i‡–
∑ge_ödít
 + 
cou¡
 > 
PAGE_SIZE
 ) count = PAGE_SIZE -Öage_indent;

70 
whîe
 = 
∑ge_numbî
 * 
PAGE_SIZE
;

71 
vaddr
 = 
	`i‹em≠
–
whîe
, 
PAGE_SIZE
 );

74 
	`mem˝y_toio
–
vaddr
 + 
∑ge_ödít
, 
buf
, 
cou¡
 );

75 
	`iounm≠
–
vaddr
 );

78 *
pos
 +
cou¡
;

79  
cou¡
;

80 
	}
}

82 
ssize_t


83 
	$my_ªad
–
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
 )

85 
phys_addªss
 = 
fb_ba£
 + *
pos
;

86 
∑ge_numbî
 = 
phys_addªss
 / 
PAGE_SIZE
;

87 
∑ge_ödít
 = 
phys_addªss
 % 
PAGE_SIZE
;

88 
whîe
;

89 *
vaddr
;

92 i‡–*
pos
 >
fb_size
 )  0;

95 i‡–
∑ge_ödít
 + 
cou¡
 > 
PAGE_SIZE
 ) count = PAGE_SIZE -Öage_indent;

98 
whîe
 = 
∑ge_numbî
 * 
PAGE_SIZE
;

99 
vaddr
 = 
	`i‹em≠
–
whîe
, 
PAGE_SIZE
 );

102 
	`mem˝y_‰omio
–
buf
, 
vaddr
 + 
∑ge_ödít
, 
cou¡
 );

103 
	`iounm≠
–
vaddr
 );

106 *
pos
 +
cou¡
;

107  
cou¡
;

108 
	}
}

110 
	$my_mm≠
–
fûe
 *fûe, 
vm_¨ó_°ru˘
 *
vma
 )

112 
ªgi⁄_‹igö
 = 
vma
->
vm_pgoff
 * 
PAGE_SIZE
;

113 
ªgi⁄_Àngth
 = 
vma
->
vm_íd
 - vma->
vm_°¨t
;

114 
physiˇl_addr
 = 
fb_ba£
 + 
ªgi⁄_‹igö
;

115 
u£r_vúèddr
 = 
vma
->
vm_°¨t
;

118 i‡–
ªgi⁄_‹igö
 + 
ªgi⁄_Àngth
 > 
fb_size
 )

119  -
EINVAL
;

122 
vma
->
vm_Êags
 = 
VM_RESERVED
;

125 i‡–
	`ªm≠_p‚_ønge
–
vma
, 
u£r_vúèddr
, 
physiˇl_addr
 >> 
PAGE_SHIFT
,

126 
ªgi⁄_Àngth
, 
vma
->
vm_∑ge_¥Ÿ
 ) )

127  -
EAGAIN
;

130 
	}
}

132 
fûe_›î©i⁄s
 
	gmy_f›s
 = {

133 
ow√r
: 
THIS_MODULE
,

134 
Œ£ek
: 
my_Œ£ek
,

135 
wrôe
: 
my_wrôe
,

136 
ªad
: 
my_ªad
,

137 
mm≠
: 
my_mm≠
,

140 
	$öô_moduÀ
( )

142 
pci_dev
 *
devp
 = 
NULL
;

144 
	`¥ötk
–"<1>\nIn°Ælög \'%s\' moduÀ ", 
mod«me
 );

145 
	`¥ötk
–"(maj‹=%dË\n", 
my_maj‹
 );

148 
devp
 = 
	`pci_föd_devi˚
–
VENDOR_ID
, 
DEVICE_ID
, devp );

149 i‡–!
devp
 )  -
ENODEV
;

152 
fb_ba£
 = 
	`pci_ªsour˚_°¨t
–
devp
, 0 );

153 
fb_size
 = 
	`pci_ªsour˚_Àn
–
devp
, 0 );

154 
	`¥ötk
( "<1>áddress-range of frame-buffer: " );

155 
	`¥ötk
–"%08lX-%08lX ", 
fb_ba£
, fb_ba£+
fb_size
 );

156 
	`¥ötk
–"(%lu MBË\n", 
fb_size
 >> 20 );

158  
	`ªgi°î_chrdev
–
my_maj‹
, 
mod«me
, &
my_f›s
 );

159 
	}
}

161 
	$˛ónup_moduÀ
( )

163 
	`uƒegi°î_chrdev
–
my_maj‹
, 
mod«me
 );

164 
	`¥ötk
–"<1>Removög \'%s\' moduÀ\n", 
mod«me
 );

165 
	}
}

167 
MODULE_LICENSE
("GPL");

	@ddex/char/part8/vrammdraw.cpp

11 
	~<°dio.h
>

12 
	~<f˙é.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sys/mm™.h
>

17 
	#HMAX
 1280

18 
	#VMAX
 1024

19 
dev«me
[] = "/dev/vram";

20 

	)

21 
	$maö
( )

27 
fd
 = 
	`›í
–
dev«me
, 
O_RDWR
 );

28 i‡–
fd
 < 0 ) { 
	`≥º‹
–
dev«me
 ); 
	`exô
(1); }

29 
	`gëch¨
();

31 
size
 = 
HMAX
 * 
VMAX
 * 4;

32 
¥Ÿ
 = 
PROT_READ
 | 
PROT_WRITE
;

33 
Êag
 = 
MAP_FIXED
 | 
MAP_SHARED
;

34 *
vm
 = (*)0xA0000000;

35 i‡–
	`mm≠
–
vm
, 
size
, 
¥Ÿ
, 
Êag
, 
fd
, 0 ) =
MAP_FAILED
 )

36 { 
	`≥º‹
–"mm≠" ); 
	`exô
(1); }

37 
	`gëch¨
();

40 *
vøm
 = (*)
vm
;

41 
y
 = 0; y < 
VMAX
; y++)

42 
x
 = 0; x < 
HMAX
; x++)

44 
whîe
 = 
y
 * 
HMAX
 + 
x
;

45 
cﬁ‹
 = 
vøm
[ 
whîe
 ] & 0x00FFFFFF;

46 
cﬁ‹
 = (color >> 8)|(color << 16);

47 
vøm
[ 
whîe
 ] = 
cﬁ‹
 & 0x00FFFFFF;

51 
	`˛o£
–
fd
 );

52 
	`munm≠
–
vm
, 
size
 );

54 
	}
}

	@ddex/char/skel/lcdtest.c

7 
	~<°dio.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<f˙é.h
>

10 
	$maö
(){

11 
fd
,
n
;

12 
buf
[12]="hello world";

13 
fd
 = 
	`›í
("/dev/mylcd",
O_RDWR
);

14 
	`¥ötf
("\¿fd = %d",
fd
);

15 
	`gëch¨
();

16 
	`wrôe
(
fd
,
buf
,12);

17 
	`gëch¨
();

18 
n
=
	`ªad
(
fd
,
buf
,10);

19 
	`¥ötf
("nÿo‡byã†ªadáª %d \n",
n
);

21 
	}
}

	@ddex/char/skel/mylcd.c

6 
	~<löux/vîsi⁄.h
>

7 
	~<löux/kî√l.h
>

8 
	~<löux/fs.h
>

9 
	~<asm/uac˚ss.h
>

10 
	~<löux/öô.h
>

11 
	~<löux/cdev.h
>

12 
	~<löux/moduÀ.h
>

14 
	#LCD_MAJOR
 190

	)

16 
	göu£
 = 0;

18 
	gnbyãs
;

21 
	$mylcd_›í
(
öode
 *öode, 
fûe
 *
fûp
)

23 if(
öu£
)

24  -
EBUSY
;

25 
öu£
 = 1;

27 
	}
}

29 
	$mylcd_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

31 
öu£
 = 0;

33 
	}
}

35 
ssize_t
 
	$mylcd_wrôe
(
fûe
 *
fûp
, c⁄° *
buf
, 
size_t
 
cou¡
,

36 
loff_t
 *
f_pos
)

38 
d©a
[10];

39 
nbyãs
=
	`c›y_‰om_u£r
(
d©a
,
buf
,
cou¡
);

40 
	`¥ötk
("\¿d©®%s",
d©a
);

41  
nbyãs
;

43 
	}
}

45 
fûe_›î©i⁄s
 
	gf›s
 = {

46 
wrôe
:
mylcd_wrôe
,

47 
›í
: 
mylcd_›í
,

48 
ªÀa£
:
mylcd_ªÀa£
,

51 
	$mylcd_öô
()

53 
ªsu…
 = 0;

54 
öu£
 = 0;

55 
ªsu…
 = 
	`ªgi°î_chrdev
(
LCD_MAJOR
,"mylcd",&
f›s
);

57 
	}
}

59 
	$mylcd_exô
()

62 
	`uƒegi°î_chrdev
(
LCD_MAJOR
, "mylcd");

64 
	}
}

65 
MODULE_AUTHOR
("TEAM VEDA");

66 
MODULE_DESCRIPTION
("DUMMY LCD DEVICE MODULE");

67 
MODULE_LICENSE
("GPL");

69 
moduÀ_öô
(
mylcd_öô
);

70 
moduÀ_exô
(
mylcd_exô
);

	@ddex/char/skel/mylcd.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

27 c⁄° 
	g__moduÀ_dïíds
[]

28 
__u£d


29 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

33 
MODULE_INFO
(
§cvîsi⁄
, "3D4014D232A1F54EE61267C");

	@ddex/netdriver/RTL8139_skel.c/nicdriver.c

4 
	~<löux/moduÀ.h
>

5 
	~<löux/kî√l.h
>

6 
	~<löux/compûî.h
>

7 
	~<löux/pci.h
>

8 
	~<löux/öô.h
>

9 
	~<löux/i›‹t.h
>

10 
	~<löux/√tdevi˚.h
>

11 
	~<löux/ëhîdevi˚.h
>

12 
	~<löux/ëhtoﬁ.h
>

13 
	~<asm/io.h
>

14 
	~<asm/uac˚ss.h
>

15 
	~<asm/úq.h
>

17 
nic_öô
();

18 
nic_˛ónup
();

20 
	#RX_BUF_LEN
 8912

	)

21 
	#TX_BUF_LEN
 1600

	)

22 
pci_devi˚_id
 
	gnic_idèbÀ
[] = {

23 {0x10ec, 0x8139, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 0 },

27 
	enic_ªgi°îs
 {

28 
	mTxSètus0
 = 0x10,

29 
	mTxAddr0
 = 0x20,

30 
	mRxBuf
 = 0x30,

31 
	mChùCmd
 = 0x37,

32 
	mRxBufPå
 = 0x38,

33 
	mIMR
 = 0x3C,

34 
	mISR
 = 0x3E,

35 
	mC⁄fig3
 = 0x59,

36 
	mC⁄fig5
 = 0xD8,

38 
	eChùCmdBôs
 {

39 
	mCmdRe£t
 = 0x10,

40 
	mCmdRxEnb
 = 0x08,

41 
	mCmdTxEnb
 = 0x04,

42 
	mRxBufEm±y
 = 0x01,

45 
	eC⁄fig3Bôs
 {

46 
	mCfg3_LökUp
 = (1 << 4),

47 
	mCfg3_Magic
 = (1 << 5),

50 
	eI¡rSètusBôs
 {

51 
	mRxFIFOOvî
 = 0x40,

52 
	mRxOvîÊow
 = 0x10,

53 
	mTxEº
 = 0x08,

54 
	mTxOK
 = 0x04,

55 
	mRxEº
 = 0x02,

56 
	mRxOK
 = 0x01,

57 
	mTxSètOK
 = 0x8000,

58 
	mRxAckBôs
 = 
RxFIFOOvî
 | 
RxOvîÊow
 | 
RxOK
,

63 
	snic_¥iv©e
{

64 
pci_dev
 *
	mpdev
;

65 
__iomem
 *
	mioba£
;

66 
	mªgs_Àn
;

67 
	múq
;

68 
	mrxcou¡
;

69 
	mrxdr›ed
;

70 
	mtxcou¡
;

71 
	mtxdr›ed
;

72 
	mcur_rx
;

73 
dma_addr_t
 
	mtxbuf_dma
;

74 
dma_addr_t
 
	mrxrög_dma
;

75 *
	mrxbuf
;

76 *
	mtxbuf
;

82 
	$nic_gë_drvöfo
(
√t_devi˚
 *
dev
,
ëhtoﬁ_drvöfo
 *
öfo
)

84 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

85 
	`°r˝y
(
öfo
->
drivî
,"NIC DRIVER");

86 
	`°r˝y
(
öfo
->
vîsi⁄
, "1.0");

87 
	`°r˝y
(
öfo
->
bus_öfo
, 
	`pci_«me
(
≈
->
pdev
));

88 
öfo
->
ªgdump_Àn
 = 
≈
->
ªgs_Àn
;

89 
	}
}

92 
	$nic_gë_ªgs_Àn
(
√t_devi˚
 *
dev
)

94 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

95  
≈
->
ªgs_Àn
;

96 
	}
}

99 
	$nic_gë_ªgs
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_ªgs
 *
ªgs
, *
ªgbuf
)

101 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

103 
	`mem˝y_‰omio
(
ªgbuf
, 
≈
->
ioba£
, 
ªgs
->
Àn
);

104 
	}
}

107 
	$nic_gë_wﬁ
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

110 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

112 
u8
 
cfg3
 = 
	`ªadb
(
≈
->
ioba£
+
C⁄fig3
);

114 
wﬁ
->
suµ‹ãd
 = 
WAKE_PHY
 | 
WAKE_MAGIC


115 | 
WAKE_UCAST
 | 
WAKE_MCAST
 | 
WAKE_BCAST
;

117 
wﬁ
->
wﬁ›ts
 = 0;

119 i‡(
cfg3
 & 
Cfg3_LökUp
)

120 
wﬁ
->
wﬁ›ts
 |
WAKE_PHY
;

122 i‡(
cfg3
 & 
Cfg3_Magic
)

123 
wﬁ
->
wﬁ›ts
 |
WAKE_MAGIC
;

125 
	}
}

128 
	$nic_gë_rög∑øm
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_rög∑øm
 *
îög
){

129 
îög
->
rx_max_≥ndög
 = 
RX_BUF_LEN
 - 1;

130 
îög
->
rx_möi_max_≥ndög
 = 0;

132 
	}
}

137 
	$nic_£t_wﬁ
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

139 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

140 
u8
 
cfg3
;

142 
cfg3
 = 
	`ªadb
(
≈
->
ioba£
+
C⁄fig3
);

144 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_PHY
)

145 
cfg3
 |
Cfg3_LökUp
;

146 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_MAGIC
)

147 
cfg3
 |
Cfg3_Magic
;

149 
	`wrôeb
(
cfg3
,
≈
->
ioba£
+
C⁄fig3
);

152 
	}
}

155 
u32
 
	$nic_gë_lök
(
√t_devi˚
 *
dev
)

157  
	`√tif_ˇºõr_ok
(
dev
) ? 1 : 0;

158 
	}
}

161 
ëhtoﬁ_›s
 
	gnic_ëhtoﬁ_›s
 = {

162 .
gë_drvöfo
 = 
nic_gë_drvöfo
,

163 .
	ggë_ªgs_Àn
 = 
nic_gë_ªgs_Àn
,

164 .
	ggë_ªgs
 = 
nic_gë_ªgs
,

165 .
	ggë_wﬁ
 = 
nic_gë_wﬁ
,

166 .
	g£t_wﬁ
 = 
nic_£t_wﬁ
,

167 .
	ggë_rög∑øm
 = 
nic_gë_rög∑øm
,

168 .
	ggë_lök
 = 
nic_gë_lök
,

174 
	$nic_pﬁl
(
√t_devi˚
 *
dev
, *
budgë
)

177 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

179 
ª˚ived
 = 0;

180 *
whîe
 = 
≈
->
rxbuf
;

181 
cur_rx
 = 
≈
->cur_rx;

182 
	`¥ötk
("\nIn Poll...");

184 
	`√tif_ru¬ög
(
dev
)&&(
	`ªadb
(
≈
->
ioba£
+
ChùCmd
)&
RxBufEm±y
) == 0){

186 
u32
 
off£t
 = 
cur_rx
 % 
RX_BUF_LEN
;

187 
u32
 
rx_°©us
;

188 
u32
 
rx_size
;

189 
pkt_size
;

190 
sk_buff
 *
skb
;

193 
rx_°©us
 = *(
u32
 *Ë(
whîe
 + 
off£t
);

194 
rx_size
 = 
rx_°©us
 >> 16;

195 
pkt_size
 = 
rx_size
 - 4;

199 
skb
 = 
	`dev_Æloc_skb
 (
pkt_size
 + 2);

200 if(
skb
){

202 
skb
->
dev
 = dev;

203 
	`skb_ª£rve
 (
skb
, 2);

204 
	`mem˝y
(
skb
->
d©a
, 
whîe
 + 
off£t
+4,
pkt_size
);

206 
	`skb_put
 (
skb
, 
pkt_size
);

207 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
 (skb, 
dev
);

209 
	`√tif_ª˚ive_skb
 (
skb
);

212 
	`¥ötk
 (
KERN_WARNING
" dr›pögÖackë.%s\n",
dev
->
«me
);

213 
≈
->
rxdr›ed
++;

214 
out
;

217 
ª˚ived
++;

218 
≈
->
rxcou¡
++;

220 
cur_rx
 = (cur_rx + 
rx_size
 + 4 + 3) & ~3;

221 
	`wrôñ
(
cur_rx
,
≈
->
ioba£
+
RxBufPå
);

223 
≈
->
cur_rx
 = cur_rx;

226 
out
:

227  
ª˚ived
;

230 
	}
}

233 
	$nic_°¨t_xmô
 (
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

237 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

238 
__iomem
 *
iﬂddr
 = 
≈
->
ioba£
;

240 
Àn
 = 
skb
->len;

242 
	`¥ötk
("In start_xmit");

245 i‡(
	`likñy
(
Àn
 < 
TX_BUF_LEN
)) {

246 i‡(
Àn
 < 
ETH_ZLEN
)

247 
	`mem£t
(
≈
->
txbuf
, 0, 
ETH_ZLEN
);

248 
	`skb_c›y_™d_csum_dev
(
skb
, 
≈
->
txbuf
);

249 
	`dev_k‰ì_skb
(
skb
);

251 
	`dev_k‰ì_skb
(
skb
);

252 
≈
->
txdr›ed
++;

257 
	`wrôñ
(
	`max
(
Àn
, ()
ETH_ZLEN
),
iﬂddr
+
TxSètus0
 );

261 
	}
}

262 
úqªtu∫_t
 
	$nic_öãºu±
(
úq
, *
dev_num
,
±_ªgs
 *
ªgs
)

264 
√t_devi˚
 *
dev
 = (√t_devi˚ *)
dev_num
;

265 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

266 
u16
 
°©us
;

267 
tx°©us
;

268 
u16
 
h™dÀd
=0;

270 
	`¥ötk
("In interrupt...");

272 
°©us
 = 
	`ªadb
(
≈
->
ioba£
+
ISR
);

275 i‡(
°©us
 == 0)

276 
out
;

278 
h™dÀd
 = 1;

282 if(
°©us
 & 
RxAckBôs
){

283 i‡(
	`√tif_rx_scheduÀ_¥ï
(
dev
))

284 
	`__√tif_rx_scheduÀ
(
dev
);

288 i‡(
°©us
 & (
TxOK
 | 
TxEº
)) {

290 
tx°©us

	`ªadl
(
≈
->
ioba£
+
TxSètus0
);

291 i‡(!(
tx°©us
 & 
TxSètOK
))

292 
out
;

294 
≈
->
txcou¡
++;

295 i‡(
°©us
 & 
TxEº
)

296 
	`wrôew
 (
TxEº
,
≈
->
ioba£
+
ISR
);

300 
out
:

301  
	`IRQ_RETVAL
(
h™dÀd
);

302 
	}
}

305 
	$öô_ªgi°îs
(
√t_devi˚
 *
dev
)

307 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

309 
	`wrôñ
 (
≈
->
txbuf_dma
,Çp->
ioba£
 + 
TxAddr0
);

312 
	`wrôñ
(
≈
->
rxrög_dma
,≈->
ioba£
+
RxBuf
);

315 
	`wrôeb
(
CmdRxEnb
|
CmdTxEnb
,
≈
->
ioba£
+
ChùCmd
);

318 
	`wrôeb
(0xff,
≈
->
ioba£
+
ISR
);

320 
	`wrôeb
(0x73,
≈
->
ioba£
+
IMR
);

321 
	}
}

323 
	$nic_ª£t_chù
(
√t_devi˚
 *
dev
)

325 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

328 
	`wrôeb
(
CmdRe£t
, 
≈
->
ioba£
 + 
ChùCmd
);

331 
	`ªadb
(
≈
->
ioba£
 + 
ChùCmd
 ) & 
CmdRe£t
);

332 
	}
}

337 
	$nic_›í
(
√t_devi˚
 *
dev
)

339 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

340 
rc
;

341 
	`¥ötk
("In Open...");

344 
rc
=
	`ªque°_úq
(
≈
->
úq
,
nic_öãºu±
,
IRQF_SHARED
,
dev
->
«me
,(*)dev);

345 i‡(
rc
)

346  
rc
;

349 
≈
->
rxbuf
 = 
	`pci_Æloc_c⁄si°ít
“p->
pdev
,
RX_BUF_LEN
,&≈->
rxrög_dma
);

350 i‡(!
≈
->
rxbuf
) {

351 
	`¥ötk
(
KERN_ERR
 "CouldÇotállocate DMA memory.\n");

352  -
ENOMEM
;

356 
≈
->
txbuf
 = 
	`pci_Æloc_c⁄si°ít
“p->
pdev
,
TX_BUF_LEN
,&≈->
txbuf_dma
);

357 if(!
≈
->
txbuf
){

358 
	`¥ötk
(
KERN_ERR
 "CouldÇotállocate DMA memory.\n");

359  -
ENOMEM
;

362 
≈
->
txcou¡
=0;

363 
≈
->
rxcou¡
=0;

364 
≈
->
rxdr›ed
=0;

365 
≈
->
txdr›ed
=0;

367 
	`nic_ª£t_chù
(
dev
);

368 
	`öô_ªgi°îs
(
dev
);

371 
	`√tif_°¨t_queue
(
dev
);

374 
	}
}

377 
	$nic_˛o£
 (
√t_devi˚
 *
dev
)

379 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

380 
	`√tif_°›_queue
 (
dev
);

382 
	`pci_‰ì_c⁄si°ít
(
≈
->
pdev
, 
RX_BUF_LEN
,≈->
rxbuf
,Çp->
rxrög_dma
);

383 
	`pci_‰ì_c⁄si°ít
(
≈
->
pdev
, 
TX_BUF_LEN
,≈->
txbuf
,Çp->
txbuf_dma
);

384 
≈
->
rxbuf
 = 
NULL
;

385 
≈
->
txbuf
 = 
NULL
;

386 
	`‰ì_úq
 (
dev
->
úq
, dev);

388 
	}
}

393 
	$nic_¥obe
(
pci_dev
 *
pdev
,c⁄° 
pci_devi˚_id
 *
ids
)

395 
√t_devi˚
 *
dev
;

396 
nic_¥iv©e
 *
≈
;

397 
rc
;

398 
__iomem
 *
memio
;

399 
îr
;

400 
mmio_°¨t
, 
mmio_Àn
;

403 
rc
 = 
	`pci_íabÀ_devi˚
(
pdev
);

404 i‡(
rc
)

405 
îr_out
;

408 
mmio_°¨t
 = 
	`pci_ªsour˚_°¨t
(
pdev
, 1);

409 
mmio_Àn
 = 
	`pci_ªsour˚_Àn
(
pdev
,1);

411 
rc
 = 
	`pci_ªque°_ªgi⁄s
 (
pdev
, "nic driver");

412 i‡(
rc
)

413 
îr_out
;

416 
	`pci_£t_ma°î
(
pdev
);

419 
memio
 = 
	`pci_iom≠
(
pdev
, 1, 0);

420 i‡(
memio
 =
NULL
) {

421 
	`dev_îr
(&
pdev
->
dev
, "cannotÑemap MMIO,áborting\n");

422 
rc
 = -
EIO
;

423 
îr_out
;

428 
dev
 = 
	`Æloc_ëhîdev
((
nic_¥iv©e
));

429 i‡(!
dev
) {

430 
rc
 = -
ENOMEM
;

431 
	`¥ötk
(
KERN_ERR
 "alloc_etherdev failed\n");

432 
îr_out
;

435 
dev
->
ba£_addr
 = (Ë
memio
;

436 
≈
=
	`√tdev_¥iv
(
dev
);

437 
≈
->
pdev
 =Ödev;

438 
≈
->
ioba£
=
memio
;

439 
≈
->
ªgs_Àn
=
mmio_Àn
;

440 
≈
->
úq
=
pdev
->irq;

443 
dev
->
›í
 = 
nic_›í
;

444 
dev
->
°›
 = 
nic_˛o£
;

445 
dev
->
h¨d_°¨t_xmô
 = 
nic_°¨t_xmô
;

446 
dev
->
pﬁl
 = 
nic_pﬁl
;

447 
dev
->
ëhtoﬁ_›s
 = &
nic_ëhtoﬁ_›s
;

448 
dev
->
úq
 = 
pdev
->irq;

451 
îr
 = 
	`ªgi°î_√tdev
(
dev
);

452 i‡(
îr
) {

453 
	`¥ötk
("CannotÑegisterÇet device,áborting.\n");

454 
îr_out
;

456 
	`pci_£t_drvd©a
(
pdev
, 
dev
);

460 
îr_out
:

461  
rc
;

463 
	}
}

465 
	$nic_ªmove
(
pci_dev
 *
pdev
)

467 
√t_devi˚
 *
dev
 = 
	`pci_gë_drvd©a
 (
pdev
);

468 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

469 i‡(
dev
 !
NULL
){

470 
	`uƒegi°î_√tdev
 (
dev
);

472 i‡(
≈
->
ioba£
)

473 
	`pci_ªÀa£_ªgi⁄s
 (
pdev
);

474 
	`‰ì_√tdev
(
dev
);

475 
	`pci_£t_drvd©a
 (
pdev
, 
NULL
);

476 
	`pci_dißbÀ_devi˚
 (
pdev
);

478 
	}
}

481 
pci_drivî
 
	gnic_drivî
 = {

482 .
«me
 = "nicdriver",

483 .
	gid_èbÀ
 = 
nic_idèbÀ
,

484 .
	g¥obe
 = 
nic_¥obe
,

485 .
	gªmove
 = 
nic_ªmove
,

489 
__öô
 
	$nic_öô
()

491 
	`¥ötk
("\nRegisteringÇicdriver...");

492  
	`pci_ªgi°î_drivî
(&
nic_drivî
);

493 
	}
}

495 
__exô
 
	$nic_˛ónup
()

497 
	`pci_uƒegi°î_drivî
(&
nic_drivî
);

498 
	}
}

500 
moduÀ_öô
(
nic_öô
);

501 
moduÀ_exô
(
nic_˛ónup
);

502 
MODULE_LICENSE
("GPL");

	@ddex/netdriver/ethtool_driver/nicdriver.c

4 
	~<löux/moduÀ.h
>

5 
	~<löux/kî√l.h
>

6 
	~<löux/compûî.h
>

7 
	~<löux/pci.h
>

8 
	~<löux/öô.h
>

9 
	~<löux/i›‹t.h
>

10 
	~<löux/√tdevi˚.h
>

11 
	~<löux/ëhîdevi˚.h
>

12 
	~<löux/ëhtoﬁ.h
>

13 
	~<asm/io.h
>

14 
	~<asm/uac˚ss.h
>

15 
	~<asm/úq.h
>

17 
nic_öô
();

18 
nic_˛ónup
();

20 
	#RX_BUF_LEN
 8912

	)

21 
	#TX_BUF_LEN
 1600

	)

22 
pci_devi˚_id
 
	gnic_idèbÀ
[] = {

23 {0x10ec, 0x8139, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 0 },

27 
	enic_ªgi°îs
 {

28 
	mTxSètus0
 = 0x10,

29 
	mTxAddr0
 = 0x20,

30 
	mRxBuf
 = 0x30,

31 
	mChùCmd
 = 0x37,

32 
	mRxBufPå
 = 0x38,

33 
	mIMR
 = 0x3C,

34 
	mISR
 = 0x3E,

35 
	mC⁄fig3
 = 0x59,

36 
	mC⁄fig5
 = 0xD8,

38 
	eChùCmdBôs
 {

39 
	mCmdRe£t
 = 0x10,

40 
	mCmdRxEnb
 = 0x08,

41 
	mCmdTxEnb
 = 0x04,

42 
	mRxBufEm±y
 = 0x01,

45 
	eC⁄fig3Bôs
 {

46 
	mCfg3_LökUp
 = (1 << 4),

47 
	mCfg3_Magic
 = (1 << 5),

50 
	eI¡rSètusBôs
 {

51 
	mRxFIFOOvî
 = 0x40,

52 
	mRxOvîÊow
 = 0x10,

53 
	mTxEº
 = 0x08,

54 
	mTxOK
 = 0x04,

55 
	mRxEº
 = 0x02,

56 
	mRxOK
 = 0x01,

57 
	mTxSètOK
 = 0x8000,

58 
	mRxAckBôs
 = 
RxFIFOOvî
 | 
RxOvîÊow
 | 
RxOK
,

63 
	snic_¥iv©e
{

64 
pci_dev
 *
	mpdev
;

65 
__iomem
 *
	mioba£
;

66 
	mªgs_Àn
;

67 
	múq
;

68 
	mrxcou¡
;

69 
	mrxdr›ed
;

70 
	mtxcou¡
;

71 
	mtxdr›ed
;

72 
	mcur_rx
;

73 
dma_addr_t
 
	mtxbuf_dma
;

74 
dma_addr_t
 
	mrxrög_dma
;

75 *
	mrxbuf
;

76 *
	mtxbuf
;

82 
	$nic_gë_drvöfo
(
√t_devi˚
 *
dev
,
ëhtoﬁ_drvöfo
 *
öfo
)

84 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

85 
	`°r˝y
(
öfo
->
drivî
,"NIC DRIVER");

86 
	`°r˝y
(
öfo
->
vîsi⁄
, "1.0");

87 
	`°r˝y
(
öfo
->
bus_öfo
, 
	`pci_«me
(
≈
->
pdev
));

88 
öfo
->
ªgdump_Àn
 = 
≈
->
ªgs_Àn
;

89 
	}
}

92 
	$nic_gë_ªgs_Àn
(
√t_devi˚
 *
dev
)

94 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

95  
≈
->
ªgs_Àn
;

96 
	}
}

99 
	$nic_gë_ªgs
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_ªgs
 *
ªgs
, *
ªgbuf
)

101 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

103 
	`mem˝y_‰omio
(
ªgbuf
, 
≈
->
ioba£
, 
ªgs
->
Àn
);

104 
	}
}

107 
	$nic_gë_wﬁ
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

110 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

112 
u8
 
cfg3
 = 
	`ªadb
(
≈
->
ioba£
+
C⁄fig3
);

114 
wﬁ
->
suµ‹ãd
 = 
WAKE_PHY
 | 
WAKE_MAGIC


115 | 
WAKE_UCAST
 | 
WAKE_MCAST
 | 
WAKE_BCAST
;

117 
wﬁ
->
wﬁ›ts
 = 0;

119 i‡(
cfg3
 & 
Cfg3_LökUp
)

120 
wﬁ
->
wﬁ›ts
 |
WAKE_PHY
;

122 i‡(
cfg3
 & 
Cfg3_Magic
)

123 
wﬁ
->
wﬁ›ts
 |
WAKE_MAGIC
;

125 
	}
}

128 
	$nic_gë_rög∑øm
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_rög∑øm
 *
îög
){

129 
îög
->
rx_max_≥ndög
 = 
RX_BUF_LEN
 - 1;

130 
îög
->
rx_möi_max_≥ndög
 = 0;

132 
	}
}

137 
	$nic_£t_wﬁ
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

139 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

140 
u8
 
cfg3
;

142 
cfg3
 = 
	`ªadb
(
≈
->
ioba£
+
C⁄fig3
);

144 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_PHY
)

145 
cfg3
 |
Cfg3_LökUp
;

146 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_MAGIC
)

147 
cfg3
 |
Cfg3_Magic
;

149 
	`wrôeb
(
cfg3
,
≈
->
ioba£
+
C⁄fig3
);

152 
	}
}

155 
u32
 
	$nic_gë_lök
(
√t_devi˚
 *
dev
)

157  
	`√tif_ˇºõr_ok
(
dev
) ? 1 : 0;

158 
	}
}

161 
ëhtoﬁ_›s
 
	gnic_ëhtoﬁ_›s
 = {

162 .
gë_drvöfo
 = 
nic_gë_drvöfo
,

163 .
	ggë_ªgs_Àn
 = 
nic_gë_ªgs_Àn
,

164 .
	ggë_ªgs
 = 
nic_gë_ªgs
,

165 .
	ggë_wﬁ
 = 
nic_gë_wﬁ
,

166 .
	g£t_wﬁ
 = 
nic_£t_wﬁ
,

167 .
	ggë_rög∑øm
 = 
nic_gë_rög∑øm
,

168 .
	ggë_lök
 = 
nic_gë_lök
,

174 
	$nic_pﬁl
(
√t_devi˚
 *
dev
, *
budgë
)

177 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

179 
ª˚ived
 = 0;

180 *
whîe
 = 
≈
->
rxbuf
;

181 
cur_rx
 = 
≈
->cur_rx;

182 
	`¥ötk
("\nIn Poll...");

184 
	`√tif_ru¬ög
(
dev
)&&(
	`ªadb
(
≈
->
ioba£
+
ChùCmd
)&
RxBufEm±y
) == 0){

186 
u32
 
off£t
 = 
cur_rx
 % 
RX_BUF_LEN
;

187 
u32
 
rx_°©us
;

188 
u32
 
rx_size
;

189 
pkt_size
;

190 
sk_buff
 *
skb
;

193 
rx_°©us
 = *(
u32
 *Ë(
whîe
 + 
off£t
);

194 
rx_size
 = 
rx_°©us
 >> 16;

195 
pkt_size
 = 
rx_size
 - 4;

199 
skb
 = 
	`dev_Æloc_skb
 (
pkt_size
 + 2);

200 if(
skb
){

202 
skb
->
dev
 = dev;

203 
	`skb_ª£rve
 (
skb
, 2);

204 
	`mem˝y
(
skb
->
d©a
, 
whîe
 + 
off£t
+4,
pkt_size
);

206 
	`skb_put
 (
skb
, 
pkt_size
);

207 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
 (skb, 
dev
);

209 
	`√tif_ª˚ive_skb
 (
skb
);

212 
	`¥ötk
 (
KERN_WARNING
" dr›pögÖackë.%s\n",
dev
->
«me
);

213 
≈
->
rxdr›ed
++;

214 
out
;

217 
ª˚ived
++;

218 
≈
->
rxcou¡
++;

220 
cur_rx
 = (cur_rx + 
rx_size
 + 4 + 3) & ~3;

221 
	`wrôñ
(
cur_rx
,
≈
->
ioba£
+
RxBufPå
);

223 
≈
->
cur_rx
 = cur_rx;

226 
out
:

227  
ª˚ived
;

230 
	}
}

233 
	$nic_°¨t_xmô
 (
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

237 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

238 
__iomem
 *
iﬂddr
 = 
≈
->
ioba£
;

240 
Àn
 = 
skb
->len;

242 
	`¥ötk
("In start_xmit");

245 i‡(
	`likñy
(
Àn
 < 
TX_BUF_LEN
)) {

246 i‡(
Àn
 < 
ETH_ZLEN
)

247 
	`mem£t
(
≈
->
txbuf
, 0, 
ETH_ZLEN
);

248 
	`skb_c›y_™d_csum_dev
(
skb
, 
≈
->
txbuf
);

249 
	`dev_k‰ì_skb
(
skb
);

251 
	`dev_k‰ì_skb
(
skb
);

252 
≈
->
txdr›ed
++;

257 
	`wrôñ
(
	`max
(
Àn
, ()
ETH_ZLEN
),
iﬂddr
+
TxSètus0
 );

261 
	}
}

262 
úqªtu∫_t
 
	$nic_öãºu±
(
úq
, *
dev_num
,
±_ªgs
 *
ªgs
)

264 
√t_devi˚
 *
dev
 = (√t_devi˚ *)
dev_num
;

265 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

266 
u16
 
°©us
;

267 
tx°©us
;

268 
u16
 
h™dÀd
=0;

270 
	`¥ötk
("In interrupt...");

272 
°©us
 = 
	`ªadb
(
≈
->
ioba£
+
ISR
);

275 i‡(
°©us
 == 0)

276 
out
;

278 
h™dÀd
 = 1;

282 if(
°©us
 & 
RxAckBôs
){

283 i‡(
	`√tif_rx_scheduÀ_¥ï
(
dev
))

284 
	`__√tif_rx_scheduÀ
(
dev
);

288 i‡(
°©us
 & (
TxOK
 | 
TxEº
)) {

290 
tx°©us

	`ªadl
(
≈
->
ioba£
+
TxSètus0
);

291 i‡(!(
tx°©us
 & 
TxSètOK
))

292 
out
;

294 
≈
->
txcou¡
++;

295 i‡(
°©us
 & 
TxEº
)

296 
	`wrôew
 (
TxEº
,
≈
->
ioba£
+
ISR
);

300 
out
:

301  
	`IRQ_RETVAL
(
h™dÀd
);

302 
	}
}

305 
	$öô_ªgi°îs
(
√t_devi˚
 *
dev
)

307 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

309 
	`wrôñ
 (
≈
->
txbuf_dma
,Çp->
ioba£
 + 
TxAddr0
);

312 
	`wrôñ
(
≈
->
rxrög_dma
,≈->
ioba£
+
RxBuf
);

315 
	`wrôeb
(
CmdRxEnb
|
CmdTxEnb
,
≈
->
ioba£
+
ChùCmd
);

318 
	`wrôeb
(0xff,
≈
->
ioba£
+
ISR
);

320 
	`wrôeb
(0x73,
≈
->
ioba£
+
IMR
);

321 
	}
}

323 
	$nic_ª£t_chù
(
√t_devi˚
 *
dev
)

325 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

328 
	`wrôeb
(
CmdRe£t
, 
≈
->
ioba£
 + 
ChùCmd
);

331 
	`ªadb
(
≈
->
ioba£
 + 
ChùCmd
 ) & 
CmdRe£t
);

332 
	}
}

337 
	$nic_›í
(
√t_devi˚
 *
dev
)

339 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

340 
rc
;

341 
	`¥ötk
("In Open...");

344 
rc
=
	`ªque°_úq
(
≈
->
úq
,
nic_öãºu±
,
IRQF_SHARED
,
dev
->
«me
,(*)dev);

345 i‡(
rc
)

346  
rc
;

349 
≈
->
rxbuf
 = 
	`pci_Æloc_c⁄si°ít
“p->
pdev
,
RX_BUF_LEN
,&≈->
rxrög_dma
);

350 i‡(!
≈
->
rxbuf
) {

351 
	`¥ötk
(
KERN_ERR
 "CouldÇotállocate DMA memory.\n");

352  -
ENOMEM
;

356 
≈
->
txbuf
 = 
	`pci_Æloc_c⁄si°ít
“p->
pdev
,
TX_BUF_LEN
,&≈->
txbuf_dma
);

357 if(!
≈
->
txbuf
){

358 
	`¥ötk
(
KERN_ERR
 "CouldÇotállocate DMA memory.\n");

359  -
ENOMEM
;

362 
≈
->
txcou¡
=0;

363 
≈
->
rxcou¡
=0;

364 
≈
->
rxdr›ed
=0;

365 
≈
->
txdr›ed
=0;

367 
	`nic_ª£t_chù
(
dev
);

368 
	`öô_ªgi°îs
(
dev
);

371 
	`√tif_°¨t_queue
(
dev
);

374 
	}
}

377 
	$nic_˛o£
 (
√t_devi˚
 *
dev
)

379 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

380 
	`√tif_°›_queue
 (
dev
);

382 
	`pci_‰ì_c⁄si°ít
(
≈
->
pdev
, 
RX_BUF_LEN
,≈->
rxbuf
,Çp->
rxrög_dma
);

383 
	`pci_‰ì_c⁄si°ít
(
≈
->
pdev
, 
TX_BUF_LEN
,≈->
txbuf
,Çp->
txbuf_dma
);

384 
≈
->
rxbuf
 = 
NULL
;

385 
≈
->
txbuf
 = 
NULL
;

386 
	`‰ì_úq
 (
dev
->
úq
, dev);

388 
	}
}

393 
	$nic_¥obe
(
pci_dev
 *
pdev
,c⁄° 
pci_devi˚_id
 *
ids
)

395 
√t_devi˚
 *
dev
;

396 
nic_¥iv©e
 *
≈
;

397 
rc
;

398 
__iomem
 *
memio
;

399 
îr
;

400 
mmio_°¨t
, 
mmio_Àn
;

403 
rc
 = 
	`pci_íabÀ_devi˚
(
pdev
);

404 i‡(
rc
)

405 
îr_out
;

408 
mmio_°¨t
 = 
	`pci_ªsour˚_°¨t
(
pdev
, 1);

409 
mmio_Àn
 = 
	`pci_ªsour˚_Àn
(
pdev
,1);

411 
rc
 = 
	`pci_ªque°_ªgi⁄s
 (
pdev
, "nic driver");

412 i‡(
rc
)

413 
îr_out
;

416 
	`pci_£t_ma°î
(
pdev
);

419 
memio
 = 
	`pci_iom≠
(
pdev
, 1, 0);

420 i‡(
memio
 =
NULL
) {

421 
	`dev_îr
(&
pdev
->
dev
, "cannotÑemap MMIO,áborting\n");

422 
rc
 = -
EIO
;

423 
îr_out
;

428 
dev
 = 
	`Æloc_ëhîdev
((
nic_¥iv©e
));

429 i‡(!
dev
) {

430 
rc
 = -
ENOMEM
;

431 
	`¥ötk
(
KERN_ERR
 "alloc_etherdev failed\n");

432 
îr_out
;

435 
dev
->
ba£_addr
 = (Ë
memio
;

436 
≈
=
	`√tdev_¥iv
(
dev
);

437 
≈
->
pdev
 =Ödev;

438 
≈
->
ioba£
=
memio
;

439 
≈
->
ªgs_Àn
=
mmio_Àn
;

440 
≈
->
úq
=
pdev
->irq;

443 
dev
->
›í
 = 
nic_›í
;

444 
dev
->
°›
 = 
nic_˛o£
;

445 
dev
->
h¨d_°¨t_xmô
 = 
nic_°¨t_xmô
;

446 
dev
->
pﬁl
 = 
nic_pﬁl
;

447 
dev
->
ëhtoﬁ_›s
 = &
nic_ëhtoﬁ_›s
;

448 
dev
->
úq
 = 
pdev
->irq;

451 
îr
 = 
	`ªgi°î_√tdev
(
dev
);

452 i‡(
îr
) {

453 
	`¥ötk
("CannotÑegisterÇet device,áborting.\n");

454 
îr_out
;

456 
	`pci_£t_drvd©a
(
pdev
, 
dev
);

460 
îr_out
:

461  
rc
;

463 
	}
}

465 
	$nic_ªmove
(
pci_dev
 *
pdev
)

467 
√t_devi˚
 *
dev
 = 
	`pci_gë_drvd©a
 (
pdev
);

468 
nic_¥iv©e
 *
≈
 = 
	`√tdev_¥iv
(
dev
);

469 i‡(
dev
 !
NULL
){

470 
	`uƒegi°î_√tdev
 (
dev
);

472 i‡(
≈
->
ioba£
)

473 
	`pci_ªÀa£_ªgi⁄s
 (
pdev
);

474 
	`‰ì_√tdev
(
dev
);

475 
	`pci_£t_drvd©a
 (
pdev
, 
NULL
);

476 
	`pci_dißbÀ_devi˚
 (
pdev
);

478 
	}
}

481 
pci_drivî
 
	gnic_drivî
 = {

482 .
«me
 = "nicdriver",

483 .
	gid_èbÀ
 = 
nic_idèbÀ
,

484 .
	g¥obe
 = 
nic_¥obe
,

485 .
	gªmove
 = 
nic_ªmove
,

489 
__öô
 
	$nic_öô
()

491 
	`¥ötk
("\nRegisteringÇicdriver...");

492  
	`pci_ªgi°î_drivî
(&
nic_drivî
);

493 
	}
}

495 
__exô
 
	$nic_˛ónup
()

497 
	`pci_uƒegi°î_drivî
(&
nic_drivî
);

498 
	}
}

500 
moduÀ_öô
(
nic_öô
);

501 
moduÀ_exô
(
nic_˛ónup
);

502 
MODULE_LICENSE
("GPL");

	@ddex/usb_skel/usb-skeleton.c

16 
	~<löux/c⁄fig.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/î∫o.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/¶ab.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/kªf.h
>

23 
	~<asm/uac˚ss.h
>

24 
	~<löux/usb.h
>

28 
	#USB_SKEL_VENDOR_ID
 0x0457

	)

29 
	#USB_SKEL_PRODUCT_ID
 0x0151

	)

33 
usb_devi˚_id
 
	gskñ_èbÀ
 [] = {

34 { 
USB_DEVICE
(
USB_SKEL_VENDOR_ID
, 
USB_SKEL_PRODUCT_ID
) },

37 
MODULE_DEVICE_TABLE
 (
usb
, 
skñ_èbÀ
);

41 
	#USB_SKEL_MINOR_BASE
 192

	)

44 
	susb_skñ
 {

45 
usb_devi˚
 * 
	mudev
;

46 
usb_öãrÁ˚
 * 
	möãrÁ˚
;

47 * 
	mbulk_ö_buf„r
;

48 
size_t
 
	mbulk_ö_size
;

49 
__u8
 
	mbulk_ö_ídpoötAddr
;

50 
__u8
 
	mbulk_out_ídpoötAddr
;

51 
kªf
 
	mkªf
;

53 
	#to_skñ_dev
(
d
Ë
	`c⁄èöî_of
(d, 
usb_skñ
, 
kªf
)

	)

55 
usb_drivî
 
	gskñ_drivî
;

57 
	$skñ_dñëe
(
kªf
 *kref)

59 
usb_skñ
 *
dev
 = 
	`to_skñ_dev
(
kªf
);

61 
	`usb_put_dev
(
dev
->
udev
);

62 
	`k‰ì
 (
dev
->
bulk_ö_buf„r
);

63 
	`k‰ì
 (
dev
);

64 
	}
}

66 
	$skñ_›í
(
öode
 *öode, 
fûe
 *file)

68 
usb_skñ
 *
dev
;

69 
usb_öãrÁ˚
 *
öãrÁ˚
;

70 
submö‹
;

71 
ªtvÆ
 = 0;

73 
submö‹
 = 
	`imö‹
(
öode
);

79 
öãrÁ˚
 = 
	`usb_föd_öãrÁ˚
(&
skñ_drivî
, 
submö‹
);

81 i‡(!
öãrÁ˚
) {

82 
	`îr
 ("%s -Érror, can't find device for minor %d",

83 
__FUNCTION__
, 
submö‹
);

84 
ªtvÆ
 = -
ENODEV
;

85 
exô
;

89 
dev
 = 
	`usb_gë_ötfd©a
(
öãrÁ˚
);

90 i‡(!
dev
) {

91 
ªtvÆ
 = -
ENODEV
;

92 
exô
;

96 
	`kªf_gë
(&
dev
->
kªf
);

99 
fûe
->
¥iv©e_d©a
 = 
dev
;

101 
exô
:

102  
ªtvÆ
;

103 
	}
}

105 
	$skñ_ªÀa£
(
öode
 *öode, 
fûe
 *file)

107 
usb_skñ
 *
dev
;

109 
dev
 = (
usb_skñ
 *)
fûe
->
¥iv©e_d©a
;

110 i‡(
dev
 =
NULL
)

111  -
ENODEV
;

114 
	`kªf_put
(&
dev
->
kªf
, 
skñ_dñëe
);

116 
	}
}

118 
ssize_t
 
	$skñ_ªad
(
fûe
 *fûe, *
buf„r
, 
size_t
 
cou¡
, 
loff_t
 *
µos
)

120 
usb_skñ
 *
dev
;

121 
ªtvÆ
 = 0,
ªt
=0;

123 
dev
 = (
usb_skñ
 *)
fûe
->
¥iv©e_d©a
;

124 
	`¥ötk
("\n Read Invoked");

125 
ªt
 = 
	`c›y_to_u£r
(
buf„r
,"Hello World", 11);

129 
ªtvÆ
 = 
	`usb_bulk_msg
(
dev
->
udev
,

130 
	`usb_rcvbulkpùe
(
dev
->
udev
, dev->
bulk_ö_ídpoötAddr
),

131 
dev
->
bulk_ö_buf„r
,

132 
	`mö
(
dev
->
bulk_ö_size
, 
cou¡
),

133 &
cou¡
, 
HZ
*10);

136 i‡(!
ªtvÆ
) {

137 i‡(
	`c›y_to_u£r
(
buf„r
, 
dev
->
bulk_ö_buf„r
, 
cou¡
))

138 
ªtvÆ
 = -
EFAULT
;

140 
ªtvÆ
 = 
cou¡
;

143  
ªtvÆ
;

144 
	}
}

149 
	$skñ_wrôe_bulk_ˇŒback
(
urb
 *urb, 
±_ªgs
 *
ªgs
)

151 
usb_skñ
 *
dev
;

153 
dev
 = (
usb_skñ
 *)
urb
->
c⁄ãxt
;

156 i‡(
urb
->
°©us
 &&

157 !(
urb
->
°©us
 =-
ENOENT
 ||

158 
urb
->
°©us
 =-
ECONNRESET
 ||

159 
urb
->
°©us
 =-
ESHUTDOWN
)) {

160 
	`dbg
("%s -Çonzero write bulk statusÑeceived: %d",

161 
__FUNCTION__
, 
urb
->
°©us
);

165 
	`usb_buf„r_‰ì
(
urb
->
dev
, urb->
å™s„r_buf„r_Àngth
,

166 
urb
->
å™s„r_buf„r
, urb->
å™s„r_dma
);

167 
	}
}

169 
ssize_t
 
	$skñ_wrôe
(
fûe
 *fûe, c⁄° *
u£r_buf„r
, 
size_t
 
cou¡
, 
loff_t
 *
µos
)

171 
usb_skñ
 *
dev
;

172 
ªtvÆ
 = 0;

173 
urb
 *urb = 
NULL
;

174 *
buf
 = 
NULL
;

176 
dev
 = (
usb_skñ
 *)
fûe
->
¥iv©e_d©a
;

179 i‡(
cou¡
 == 0)

180 
exô
;

190 
urb
 = 
	`usb_Æloc_urb
(0, 
GFP_KERNEL
);

191 i‡(!
urb
) {

192 
ªtvÆ
 = -
ENOMEM
;

193 
îr‹
;

198 
buf
 = 
	`usb_buf„r_Æloc
(
dev
->
udev
, 
cou¡
, 
GFP_KERNEL
, &
urb
->
å™s„r_dma
);

199 i‡(!
buf
) {

200 
ªtvÆ
 = -
ENOMEM
;

201 
îr‹
;

204 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf„r
, 
cou¡
)) {

205 
ªtvÆ
 = -
EFAULT
;

206 
îr‹
;

210 
	`usb_fûl_bulk_urb
(
urb
, 
dev
->
udev
,

211 
	`usb_¢dbulkpùe
(
dev
->
udev
, dev->
bulk_out_ídpoötAddr
),

212 
buf
, 
cou¡
, 
skñ_wrôe_bulk_ˇŒback
, 
dev
);

216 
urb
->
å™s„r_Êags
 |
URB_NO_TRANSFER_DMA_MAP
;

219 
ªtvÆ
 = 
	`usb_submô_urb
(
urb
, 
GFP_KERNEL
);

220 i‡(
ªtvÆ
) {

221 
	`îr
("%†- faûed submôtög wrôêurb,Éº‹ %d", 
__FUNCTION__
, 
ªtvÆ
);

222 
îr‹
;

226 
	`usb_‰ì_urb
(
urb
);

228 
exô
:

229  
cou¡
;

231 
îr‹
:

232 
	`usb_buf„r_‰ì
(
dev
->
udev
, 
cou¡
, 
buf
, 
urb
->
å™s„r_dma
);

233 
	`usb_‰ì_urb
(
urb
);

234  
ªtvÆ
;

235 
	}
}

237 
fûe_›î©i⁄s
 
	gskñ_f›s
 = {

238 .
ow√r
 = 
THIS_MODULE
,

239 .
	gªad
 = 
skñ_ªad
,

240 .
	gwrôe
 = 
skñ_wrôe
,

241 .
	g›í
 = 
skñ_›í
,

242 .
	gªÀa£
 = 
skñ_ªÀa£
,

249 
usb_˛ass_drivî
 
	gskñ_˛ass
 = {

250 .
«me
 = "usb/skel%d",

251 .
	gf›s
 = &
skñ_f›s
,

252 .
	gmode
 = 
S_IFCHR
 | 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IWGRP
 | 
S_IROTH
,

253 .
	gmö‹_ba£
 = 
USB_SKEL_MINOR_BASE
,

256 
	$skñ_¥obe
(
usb_öãrÁ˚
 *
öãrÁ˚
, c⁄° 
usb_devi˚_id
 *
id
)

258 
usb_skñ
 *
dev
 = 
NULL
;

259 
usb_ho°_öãrÁ˚
 *
iÁ˚_desc
;

260 
usb_ídpoöt_des¸ùt‹
 *
ídpoöt
;

261 
size_t
 
buf„r_size
;

262 
i
;

263 
ªtvÆ
 = -
ENOMEM
;

264 
	`¥ötk
("\n USB-SKELETON PROBE ");

267 
dev
 = 
	`kmÆloc
((*dev), 
GFP_KERNEL
);

268 i‡(
dev
 =
NULL
) {

269 
	`îr
("Out of memory");

270 
îr‹
;

272 
	`mem£t
(
dev
, 0x00, (*dev));

273 
	`kªf_öô
(&
dev
->
kªf
);

276 
dev
->
udev
 = 
	`usb_gë_dev
(
	`öãrÁ˚_to_usbdev
(
öãrÁ˚
));

277 
dev
->
öãrÁ˚
 = interface;

283 
iÁ˚_desc
 = 
öãrÁ˚
->
cur_Æt£âög
;

295 
i
 = 0; i < 
iÁ˚_desc
->
desc
.
bNumEndpoöts
; ++i) {

296 
ídpoöt
 = &
iÁ˚_desc
->ídpoöt[
i
].
desc
;

298 i‡(!
dev
->
bulk_ö_ídpoötAddr
 &&

299 (
ídpoöt
->
bEndpoötAddªss
 & 
USB_DIR_IN
) &&

300 ((
ídpoöt
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
)

301 =
USB_ENDPOINT_XFER_BULK
)) {

304 
buf„r_size
 = 
	`À16_to_˝u
(
ídpoöt
->
wMaxPackëSize
);

305 
dev
->
bulk_ö_size
 = 
buf„r_size
;

306 
dev
->
bulk_ö_ídpoötAddr
 = 
ídpoöt
->
bEndpoötAddªss
;

307 
dev
->
bulk_ö_buf„r
 = 
	`kmÆloc
(
buf„r_size
, 
GFP_KERNEL
);

308 i‡(!
dev
->
bulk_ö_buf„r
) {

309 
	`îr
("CouldÇotállocate bulk_in_buffer");

310 
îr‹
;

314 i‡(!
dev
->
bulk_out_ídpoötAddr
 &&

315 !(
ídpoöt
->
bEndpoötAddªss
 & 
USB_DIR_IN
) &&

316 ((
ídpoöt
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
)

317 =
USB_ENDPOINT_XFER_BULK
)) {

319 
dev
->
bulk_out_ídpoötAddr
 = 
ídpoöt
->
bEndpoötAddªss
;

322 i‡(!(
dev
->
bulk_ö_ídpoötAddr
 && dev->
bulk_out_ídpoötAddr
)) {

323 
	`îr
("CouldÇot find both bulk-inánd bulk-outÉndpoints");

324 
îr‹
;

328 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
dev
);

331 
ªtvÆ
 = 
	`usb_ªgi°î_dev
(
öãrÁ˚
, &
skñ_˛ass
);

332 i‡(
ªtvÆ
) {

334 
	`îr
("NotábleÅo getá minor forÅhis device.");

335 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
NULL
);

336 
îr‹
;

340 
	`öfo
("USB Skñë⁄ devi˚ÇowáâachedÅÿUSBSkñ-%d", 
öãrÁ˚
->
mö‹
);

343 
îr‹
:

344 i‡(
dev
)

345 
	`kªf_put
(&
dev
->
kªf
, 
skñ_dñëe
);

346  
ªtvÆ
;

347 
	}
}

349 
	$skñ_disc⁄√˘
(
usb_öãrÁ˚
 *
öãrÁ˚
)

351 
usb_skñ
 *
dev
;

352 
mö‹
 = 
öãrÁ˚
->minor;

355 
	`lock_kî√l
();

357 
dev
 = 
	`usb_gë_ötfd©a
(
öãrÁ˚
);

358 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
NULL
);

361 
	`usb_dîegi°î_dev
(
öãrÁ˚
,&
skñ_˛ass
);

363 
	`u∆ock_kî√l
();

366 
	`kªf_put
(&
dev
->
kªf
, 
skñ_dñëe
);

368 
	`öfo
("USB Skñë⁄ #%dÇow disc⁄√˘ed", 
mö‹
);

369 
	}
}

371 
usb_drivî
 
	gskñ_drivî
 = {

372 .
ow√r
 = 
THIS_MODULE
,

373 .
	g«me
 = "skeleton",

374 .
	g¥obe
 = 
skñ_¥obe
,

375 .
	gdisc⁄√˘
 = 
skñ_disc⁄√˘
,

376 .
	gid_èbÀ
 = 
skñ_èbÀ
,

379 
__öô
 
	$usb_skñ_öô
()

381 
ªsu…
;

384 
ªsu…
 = 
	`usb_ªgi°î
(&
skñ_drivî
);

385 i‡(
ªsu…
)

386 
	`îr
("usb_ªgi°î faûed. Eº‹Çumbî %d", 
ªsu…
);

388  
ªsu…
;

389 
	}
}

391 
__exô
 
	$usb_skñ_exô
()

394 
	`usb_dîegi°î
(&
skñ_drivî
);

395 
	}
}

397 
moduÀ_öô
 (
usb_skñ_öô
);

398 
moduÀ_exô
 (
usb_skñ_exô
);

400 
MODULE_LICENSE
("GPL");

	@ddex/usb_skel/usb_test.c

1 
	~<f˙é.h
>

2 
	$maö
()

4 
fd
;

5 
buf
[10];

6 
fd
 = 
	`›í
("/dev/USBSkñ",
O_RDONLY
);

7 
	`ªad
(
fd
,
buf
,10);

8 
	`¥ötf
("\¿bu‡%s",
buf
);

9 
	}
}

	@kern-prog/Kern-Threads/mytsk.c

1 
	$maö
()

3 
	`sy°em
("echo \"Value Changed\" > /dev/pts/1");

4 
	}
}

	@kern-prog/Kern-Threads/test.c

1 
	$maö
()

3 
	`sy°em
("insmodÅhread.ko");

5 
	}
}

	@kern-prog/Kern-Threads/test_thread.c

7 
	~<löux/öô.h
>

8 
	~<löux/moduÀ.h
>

9 
	~<löux/waô.h
>

10 
	~<löux/sched.h
>

12 
myv¨
;

13 
myev¡
;

14 
waô_queue_hód_t
 
my_queue
;

16 
	$öô_moduÀ
()

18 
myv¨
=40;

19 
myev¡
=1;

20 
	`wake_up_öãºu±ibÀ
(&
my_queue
);

22 
	}
}

24 
	$˛ónup_moduÀ
()

26 
	`¥ötk
("\n Module Removed\n");

27 
	}
}

	@kern-prog/Kern-Threads/thread.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

10 #i‚de‡
MODULE


11 
	#MODULE


	)

14 
	~<löux/öô.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/sched.h
>

17 
	~<löux/fs.h
>

18 
	~<löux/waô.h
>

21 
	#PATH
 "/roŸ/mytsk"

	)

24 
mykthªad
(*);

27 
	gmyv¨
 = 50;

28 
waô_queue_hód_t
 
	gmy_queue
;

29 
	gmyev¡
=0;

30 
	$mykthªad
(*
¨g
)

33 *
¨gv
[] ={"/roŸ/mytsk",
NULL
};

34 
	`öô_waôqueue_hód
(&
my_queue
);

39 
	`d´m⁄ize
("mykthread");

42 
	`Ælow_sig«l
(
SIGKILL
);

44 
myev¡
=0;

45 
	`waô_evít_öãºu±ibÀ
(
my_queue
,
myev¡
!=0);

51 
	`ˇŒ_u£rmodehñ≥r
(
PATH
,
¨gv
,
NULL
,1);

53 
	}
}

55 
	$öô_moduÀ
()

58 
	`kî√l_thªad
(
mykthªad
,
NULL
,
CLONE_FILES
 | 
CLONE_SIGHAND
 | 
CLONE_FS
 | 
SIGCHLD
);

60 
	}
}

62 
	$˛ónup_moduÀ
()

64 
	`¥ötk
("\n Module Removed\n");

65 
	}
}

66 
EXPORT_SYMBOL
(
myev¡
);

67 
EXPORT_SYMBOL
(
myv¨
);

68 
EXPORT_SYMBOL
(
my_queue
);

	@kern-prog/Kern-rsrc/atomic.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

11 #i‚de‡
MODULE


12 
	#MODULE


	)

15 
	~<löux/kî√l.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/öô.h
>

18 
	~<asm/©omic.h
>

21 
öô_©omic
();

22 
exô_moduÀ
();

24 
moduÀ_öô
(
öô_©omic
);

25 
moduÀ_exô
(
exô_moduÀ
);

27 
	$öô_©omic
()

29 
©omic_t
 
av
 = 
	`ATOMIC_INIT
(1);

30 
	`¥ötk
("fú° vÆuêo‡av i†%d\n",
	`©omic_ªad
(&
av
));

32 
	`©omic_add
(2,&
av
);

33 
	`¥ötk
("a·îáddög 2Åÿav = %d \n",
	`©omic_ªad
(&
av
));

35 
	`©omic_sub
(2,&
av
);

36 
	`¥ötk
("a·î subåa˘ög 2 fromáv = %d \n",
	`©omic_ªad
(&
av
));

38 
	`©omic_öc
(&
av
);

39 
	`¥ötk
("a·î in¸emítögÅhêav = %d\n",
	`©omic_ªad
(&
av
));

42 
	}
}

43 
	$exô_moduÀ
()

45 
	`¥ötk
("\nModule successfully unregistered\n");

46 
	}
}

	@kern-prog/Kern-rsrc/jiff_overflow.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

15 
	$maö
()

17 
hz_vÆue
;

18 
ƒ_days
, 
max_vÆue
;

20 
	`¥ötf
("EnterÅhe value of HZ: ");

21 
	`sˇnf
("%u", &
hz_vÆue
);

23 
	`¥ötf
("VÆuêo‡HZ i† : %d\n", 
hz_vÆue
);

24 
	`¥ötf
("Number of bits in unsignedÜong jiffies : %d\n",

26 
	`mem£t
–&
max_vÆue
, 0xff, () );

27 
ƒ_days
 = 
max_vÆue
/(24ul*60ul*60ul*
hz_vÆue
);

28 
	`¥ötf
("Max vÆuêo‡thêjiffõ†cou¡î : %u\n", 
max_vÆue
);

29 
	`¥ötf
("Max day† : %u\n", 
ƒ_days
);

30 
	`¥ötf
("WOWOW!!! That isáÜongÜongÅime\n\n");

31 
	}
}

	@kern-prog/Kern-rsrc/jiffies.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

11 #i‚de‡
MODULE


12 
	#MODULE


	)

15 
	#EXPORT_SYMTAB


	)

16 
	#SUCCESS
 0

	)

18 
	~<löux/kî√l.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/jiffõs.h
>

22 
	~<asm/∑øm.h
>

25 
öô_moduÀ_jiff
();

26 
exô_moduÀ_jiff
();

28 
moduÀ_öô
(
öô_moduÀ_jiff
);

29 
moduÀ_exô
(
exô_moduÀ_jiff
);

33 
	$öô_moduÀ_jiff
()

35 
£c⁄ds_°¨ãd
, 
hours_°¨ãd
, 
mö_°¨ãd
;

37 
	`¥ötk
("Jiffõ†VÆue: INIT: %ld\n", 
jiffõs
);

38 
£c⁄ds_°¨ãd
 = 
jiffõs
/100ul;

39 
mö_°¨ãd
 = 
£c⁄ds_°¨ãd
/60;

40 
hours_°¨ãd
 = 
mö_°¨ãd
/60;

41 
	`¥ötk
("Seconds = %ld, Hours = %ld, Minutes = %ld\n",

42 
£c⁄ds_°¨ãd
, 
hours_°¨ãd
, 
mö_°¨ãd
);

43  
SUCCESS
;

44 
	}
}

47 
	$exô_moduÀ_jiff
()

49 
£c⁄ds_°¨ãd
, 
hours_°¨ãd
, 
mö_°¨ãd
;

50 
	`¥ötk
("Jiffõ†VÆue: CLEANUP: %ld\n", 
jiffõs
);

51 
£c⁄ds_°¨ãd
 = 
jiffõs
/1000ul;

52 
mö_°¨ãd
 = 
£c⁄ds_°¨ãd
/60;

53 
hours_°¨ãd
 = 
mö_°¨ãd
/60;

54 
	`¥ötk
("Seconds = %ld, Hours = %ld, Minutes = %ld\n",

55 
£c⁄ds_°¨ãd
, 
hours_°¨ãd
, 
mö_°¨ãd
);

56 
	}
}

59 
MODULE_AUTHOR
("Team Veda");

60 
MODULE_DESCRIPTION
("Example on jiffies");

61 
MODULE_LICENSE
("GPL");

	@kern-prog/Kern-rsrc/linked_list.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

11 #i‚de‡
MODULE


12 
	#MODULE


	)

15 
	#EXPORT_SYMTAB


	)

17 
	~<löux/kî√l.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/li°.h
>

21 
	~<löux/¶ab.h
>

27 
li°_hód
 
	gMY_li°
;

32 
LIST_HEAD
–
MY_li°
 );

38 
	sMY_°ru˘
 {

39 
li°_hód
 
	mMY_s_li°
;

40 
	mvÆue
;

47 
	$myöô
()

49 
MY_°ru˘
 *
ls
;

50 
i
;

52 
i
=0; i<20; i++) {

53 
ls
 = (
MY_°ru˘
*)
	`kmÆloc
(–MY_°ru˘ ),
GFP_KERNEL
 );

54 
	`¥ötk
("%dÅhÉÀmíài†ö£πed \n",
i
);

55 
ls
->
vÆue
 = 
i
;

56 
	`li°_add
(&
ls
->
MY_s_li°
, &
MY_li°
);

58 
	`¥ötk
("\n\n\nInserted 20Élements intoÅheÜist.\n");

59 
	`¥ötk
("TheÜist will be displayed while unloadingÅhis module\n\n\n");

61 
	}
}

67 
	$myexô
()

69 
MY_°ru˘
 *
li°
;

71 
	`li°_f‹_óch_íåy
(
li°
, &
MY_li°
,
MY_s_li°
 )

72 
	`¥ötk
("FoundÇumbî: %d\n", 
li°
->
vÆue
 );

73 
	}
}

74 
moduÀ_öô
(
myöô
);

75 
moduÀ_exô
(
myexô
);

77 
MODULE_AUTHOR
("Team Veda");

78 
MODULE_LICENSE
("GPL");

	@kern-prog/LockRcu1/my_rcu.h

1 
	snode
 {

2 
	md©a_ôem1
;

3 
	md©a_ôem2
;

4 
li°_hód
 
	mli°
;

	@kern-prog/LockRcu1/rcu_reader1.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîsi⁄.h
>

3 
	~<löux/kî√l.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/rcupd©e.h
>

6 
	~<löux/rculi°.h
>

7 
	~<löux/li°.h
>

8 
	~<löux/dñay.h
>

9 
	~"my_rcu.h
"

11 
li°_hód
 
hód
;

12 
node
 *
	ggë
;

14 
	$ªadî1
()

16 
a
,
b
;

17 
	`rcu_ªad_lock
();

18 
a
 = 
	`rcu_dîe„ªn˚
(
gë
)->
d©a_ôem1
;

19 
b
 = 
	`rcu_dîe„ªn˚
(
gë
)->
d©a_ôem2
;

20 
	`¥ötk
(
KERN_INFO
 "Ñódî 1 .......... d©a_ôem1 = %d\td©a_ôem2 = %d\n", 
a
, 
b
);

21 
	`rcu_ªad_u∆ock
();

22 
	}
}

24 
__öô
 
	$öô_rcu_ªadî1
()

26 
	`¥ötk
(
KERN_INFO
 "%†moduÀ i†ö£πed\n", 
__func__
);

27 
	`¥ötk
(
KERN_INFO
 "\n data items in stack:\n");

28 
	`li°_f‹_óch_íåy_rcu
(
gë
,&
hód
,
li°
)

29 
	`ªadî1
();

31 
	}
}

33 
__exô
 
	$˛ónup_rcu_ªadî1
()

35 
	`¥ötk
(
KERN_INFO
 "%†moduÀ i†ªmoved\n", 
__func__
);

36 
	}
}

38 
moduÀ_öô
(
öô_rcu_ªadî1
);

39 
moduÀ_exô
(
˛ónup_rcu_ªadî1
);

41 
MODULE_AUTHOR
("TEAM VEDA");

42 
MODULE_DESCRIPTION
("RCU READER1 MODULE");

43 
MODULE_LICENSE
("GPL");

	@kern-prog/LockRcu1/rcu_reader1.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

23 
MODULE_INFO
(
§cvîsi⁄
, "73819B74375A5810FE33972");

	@kern-prog/LockRcu1/rcu_reader2.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîsi⁄.h
>

3 
	~<löux/kî√l.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/rcupd©e.h
>

6 
	~<löux/rculi°.h
>

7 
	~<löux/li°.h
>

8 
	~<löux/dñay.h
>

9 
	~"my_rcu.h
"

11 
li°_hód
 
hód
;

12 
node
 *
	ggë
;

14 
	$ªadî2
()

16 
a
,
b
;

17 
	`rcu_ªad_lock
();

18 
a
 = 
	`rcu_dîe„ªn˚
(
gë
)->
d©a_ôem1
;

19 
b
 = 
	`rcu_dîe„ªn˚
(
gë
)->
d©a_ôem2
;

20 
	`¥ötk
(
KERN_INFO
 "ªadî2 .............. d©a_ôem1 = %d\td©a_ôem2 = %d\n", 
a
, 
b
);

21 
	`rcu_ªad_u∆ock
();

22 
	}
}

24 
__öô
 
	$öô_rcu_ªadî2
()

26 
	`¥ötk
(
KERN_INFO
 "%†moduÀ i†ö£πed\n", 
__func__
);

27 
	`¥ötk
(
KERN_INFO
 "\ndata_itemsáre POPED from stack:\n");

28 
	`li°_f‹_óch_íåy_rcu
(
gë
,&
hód
,
li°
)

29 
	`ªadî2
();

31 
	}
}

33 
__exô
 
	$˛ónup_rcu_ªadî2
()

35 
	`¥ötk
(
KERN_INFO
 "%†moduÀ i†ªmoved\n", 
__func__
);

36 
	}
}

38 
moduÀ_öô
(
öô_rcu_ªadî2
);

39 
moduÀ_exô
(
˛ónup_rcu_ªadî2
);

41 
MODULE_AUTHOR
("TEAM VEDA");

42 
MODULE_DESCRIPTION
("RCU READER2 MODULE");

43 
MODULE_LICENSE
("GPL");

	@kern-prog/LockRcu1/rcu_reader2.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

23 
MODULE_INFO
(
§cvîsi⁄
, "0DF0ED0A1C53EB5578E3028");

	@kern-prog/LockRcu1/rcu_stack.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîsi⁄.h
>

3 
	~<löux/kî√l.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/rcupd©e.h
>

6 
	~<löux/rculi°.h
>

7 
	~<löux/li°.h
>

8 
	~"my_rcu.h
"

10 
node
 *
	gp
;

11 
LIST_HEAD
(
hód
);

13 
EXPORT_SYMBOL
(
hód
);

15 
	$add_íåy_°ack
(
num1
,
num2
)

17 
p
=
	`kmÆloc
((*p),
GFP_KERNEL
);

18 
p
->
d©a_ôem1
=
num1
;

19 
p
->
d©a_ôem2
=
num2
;

20 
	`li°_add_rcu
(&
p
->
li°
,&
hód
);

21 
	}
}

23 
__öô
 
	$öô_rcu_°ack
()

25 
	`¥ötk
(
KERN_INFO
 "%†moduÀ i†ö£πed\n", 
__func__
);

26 
	`add_íåy_°ack
(10,100);

27 
	`add_íåy_°ack
(20,200);

28 
	`add_íåy_°ack
(30,300);

29 
	`add_íåy_°ack
(40,400);

31 
	}
}

32 
__exô
 
	$˛ónup_rcu_°ack
() {

33 
	`¥ötk
(
KERN_INFO
 "%†moduÀ i†ªmoved\n", 
__func__
);

34 
	}
}

36 
moduÀ_öô
(
öô_rcu_°ack
);

37 
moduÀ_exô
(
˛ónup_rcu_°ack
);

39 
MODULE_AUTHOR
("TEAM VEDA");

40 
MODULE_DESCRIPTION
("RCU STACK MODULE");

41 
MODULE_LICENSE
("GPL");

	@kern-prog/LockRcu1/rcu_stack.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

23 
MODULE_INFO
(
§cvîsi⁄
, "7E155374001206CA4C3F849");

	@kern-prog/LockRcu1/rcu_writer.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîsi⁄.h
>

3 
	~<löux/kî√l.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/rcupd©e.h
>

6 
	~<löux/rculi°.h
>

7 
	~<löux/li°.h
>

8 
	~<löux/•ölock.h
>

9 
	~"my_rcu.h
"

11 
DEFINE_MUTEX
(
my_lock
);

12 
li°_hód
 
hód
;

13 
node
 *
	g£t
;

15 
	$wrôî
(
√w_d©a_ôem1
,
√w_d©a_ôem2
)

17 
node
 *
√w
,*
ﬁd
;

18 
j
 = 
jiffõs
 + 10*
HZ
;

19 
	`li°_f‹_óch_íåy_rcu
(
£t
, &
hód
, 
li°
) {

20 
√w
 = 
	`kmÆloc
((*√w),
GFP_KERNEL
);

21 
	`muãx_lock
(&
my_lock
);

22 
ﬁd
 = 
£t
;

23 *
√w
 = *
ﬁd
;

24 
√w
->
d©a_ôem1
 = 
√w_d©a_ôem1
;

25 if(
ﬁd
->
d©a_ôem1
==30)

26  
jiffõs
 < 
j
 ) {

29 
√w
->
d©a_ôem2
 = 
√w_d©a_ôem2
;

30 
	`li°_ª∂a˚_rcu
(&
£t
->
li°
, &
√w
->list);

31 
	`¥ötk
(
KERN_INFO
 "in write \n");

32 
	`muãx_u∆ock
(&
my_lock
);

33 
	`synchr⁄ize_rcu
();

34 
	`k‰ì
(
ﬁd
);

36 
	`¥ötk
(
KERN_INFO
 "out write \n");

37 
	}
}

39 
__öô
 
	$öô_rcu_wrôî
()

41 
	`¥ötk
(
KERN_INFO
 "%†i†moduÀ in£πed\n", 
__func__
);

42 
	`wrôî
(777,888);

45 
	}
}

47 
__exô
 
	$˛ónup_rcu_wrôî
()

49 
	`¥ötk
(
KERN_INFO
 "%†i†moduÀÑemoved\n", 
__func__
);

50 
	}
}

52 
moduÀ_öô
(
öô_rcu_wrôî
);

53 
moduÀ_exô
(
˛ónup_rcu_wrôî
);

55 
MODULE_AUTHOR
("TEAM VEDA");

56 
MODULE_DESCRIPTION
("RCU WRITER MODULE");

57 
MODULE_LICENSE
("GPL");

	@kern-prog/LockRcu1/rcu_writer.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

23 
MODULE_INFO
(
§cvîsi⁄
, "BA350FFF5D46E820C452FA5");

	@kern-prog/Locks/complte/comp.c

8 
	~<löux/moduÀ.h
>

9 
	~<löux/öô.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/fs.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/com∂ëi⁄.h
>

17 
	gcom∂ëe_maj‹
 = 0;

19 
DECLARE_COMPLETION
(
veda
);

21 
ssize_t
 
	$com∂ëe_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
)

23 
	`¥ötk
(
KERN_DEBUG
 "process %i (%s) goingÅo sleep\n",

24 
cuºít
->
pid
, cuºít->
comm
);

25 
	`waô_f‹_com∂ëi⁄
(&
veda
);

26 
	`¥ötk
(
KERN_DEBUG
 "awokí %ò(%s)\n", 
cuºít
->
pid
, cuºít->
comm
);

28 
	}
}

30 
ssize_t
 
	$com∂ëe_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

31 
loff_t
 *
pos
)

33 
	`¥ötk
(
KERN_DEBUG
 "process %i (%s)áwakeningÅheÑeaders...\n",

34 
cuºít
->
pid
, cuºít->
comm
);

35 
	`com∂ëe
(&
veda
);

36  
cou¡
;

37 
	}
}

40 
fûe_›î©i⁄s
 
	gveda_f›s
 = {

41 .
ow√r
 = 
THIS_MODULE
,

42 .
	gªad
 = 
com∂ëe_ªad
,

43 .
	gwrôe
 = 
com∂ëe_wrôe
,

47 
	$com∂ëe_öô
()

49 
ªsu…
;

54 
ªsu…
 = 
	`ªgi°î_chrdev
(
com∂ëe_maj‹
, "com∂ëe", &
veda_f›s
);

55 i‡(
ªsu…
 < 0)

56  
ªsu…
;

57 i‡(
com∂ëe_maj‹
 == 0)

58 
com∂ëe_maj‹
 = 
ªsu…
;

60 
	}
}

62 
	$com∂ëe_˛ónup
()

64 
	`uƒegi°î_chrdev
(
com∂ëe_maj‹
, "complete");

65 
	}
}

67 
moduÀ_öô
(
com∂ëe_öô
);

68 
moduÀ_exô
(
com∂ëe_˛ónup
);

70 
MODULE_LICENSE
("Dual BSD/GPL");

	@kern-prog/Locks/complte/complte.c

11 
	~<löux/moduÀ.h
>

12 
	~<löux/öô.h
>

13 
	~<löux/sched.h
>

14 
	~<löux/kî√l.h
>

15 
	~<löux/fs.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/cdev.h
>

18 
	~<löux/devi˚.h
>

19 
	~<löux/vîsi⁄.h
>

20 
	~<löux/com∂ëi⁄.h
>

29 
com∂ëe_öô
();

30 
com∂ëe_˛ónup
();

32 
moduÀ_öô
(
com∂ëe_öô
);

33 
moduÀ_exô
(
com∂ëe_˛ónup
);

35 
MODULE_LICENSE
("Dual BSD/GPL");

38 
ssize_t
 
com∂ëe_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
,

39 
size_t
 
cou¡
, 
loff_t
 *
pos
);

41 
ssize_t
 
com∂ëe_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
,

42 
size_t
 
cou¡
,
loff_t
 *
pos
);

45 
fûe_›î©i⁄s
 
	gveda_f›s
;

48 
DECLARE_COMPLETION
(
veda
);

50 
	gveda_id
;

51 
	#CHAR_DEVICE_NAME
 "com∂ëe"

	)

52 
	#MAX_LENGTH
 4000

	)

53 
	gveda_devi˚_buf
[
MAX_LENGTH
];

54 
cdev
 *
	gveda_cdev
;

55 
dev_t
 
	gmydev
;

57 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

58 
˛ass_sim∂e
 *
	gveda_˛ass
=
NULL
;

60 
˛ass
 *
	gveda_˛ass
=
NULL
;

64 
ssize_t
 
	$com∂ëe_ªad
 (
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
)

66 
	`¥ötk
(
KERN_DEBUG
 "process %i (%s) goingÅo sleep\n",

67 
cuºít
->
pid
, cuºít->
comm
);

68 
	`waô_f‹_com∂ëi⁄
(&
veda
);

69 
	`¥ötk
(
KERN_DEBUG
 "awokí %ò(%s)\n", 
cuºít
->
pid
, cuºít->
comm
);

71 
	}
}

73 
ssize_t
 
	$com∂ëe_wrôe
 (
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
,

74 
loff_t
 *
pos
)

76 
	`¥ötk
(
KERN_DEBUG
 "process %i (%s)áwakeningÅheÑeaders...\n",

77 
cuºít
->
pid
, cuºít->
comm
);

78 
	`com∂ëe
(&
veda
);

79  
cou¡
;

80 
	}
}

83 
	$com∂ëe_öô
()

86 
i
,
ªt
;

87 
veda_f›s
.
ow√r
 = 
THIS_MODULE
;

88 
veda_f›s
.
ªad
 = 
com∂ëe_ªad
;

89 
veda_f›s
.
wrôe
 = 
com∂ëe_wrôe
;

91 
ªt
=
	`Æloc_chrdev_ªgi⁄
(&
mydev
,0,1,"complete");

93 
veda_id

	`MAJOR
(
mydev
);

97 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

98 
veda_˛ass
 = 
	`˛ass_sim∂e_¸óã
(
THIS_MODULE
,"Veda");

99 if(
	`IS_ERR
(
veda_˛ass
)){

100 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

103 
	`˛ass_sim∂e_devi˚_add
(
veda_˛ass
,
mydev
,
NULL
,"complete");

106 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

107 
veda_˛ass
=
	`˛ass_¸óã
(
THIS_MODULE
,"Veda");

109 if(
	`IS_ERR
(
veda_˛ass
)){

110 
	`¥ötk
(
KERN_ERR
 "ErrorÑegistering veda class\n");

113 
	`devi˚_¸óã
(
veda_˛ass
,
NULL
,
mydev
,NULL,"complete");

117 
veda_cdev

	`cdev_Æloc
();

120 
veda_cdev
->
ow√r
=
THIS_MODULE
;

121 
veda_cdev
->
›s
&
veda_f›s
;

124 
ªt
=
	`cdev_add
(
veda_cdev
,
mydev
,1);

125 if–
ªt
 < 0 ) {

126 
	`¥ötk
("ErrorÑegistering device driver\n");

127  
ªt
;

129 
	`¥ötk
("Devi˚ Regi°îed wôh MAJOR NO[%d]\n",
veda_id
);

131 
i
=0; i<
MAX_LENGTH
; i++Ë
veda_devi˚_buf
[i] = 0;

132 
veda_devi˚_buf
[
MAX_LENGTH
] = '\0';

134 
	}
}

136 
	$com∂ëe_˛ónup
()

139 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14)

140 
	`˛ass_sim∂e_devi˚_ªmove
(
mydev
);

141 
	`˛ass_sim∂e_de°roy
(
veda_˛ass
);

143 
	`devi˚_de°roy
(
veda_˛ass
,
mydev
);

144 
	`˛ass_de°roy
(
veda_˛ass
);

146 
	`uƒegi°î_chrdev_ªgi⁄
(
mydev
,1);

147 
	`cdev_dñ
(
veda_cdev
);

148 
	`¥ötk
("\n Module Successfully Removed");

149 
	}
}

	@kern-prog/Locks/complte/reader.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~<sys/ty≥s.h
>

13 
	$maö
()

15 
fd
, 
i
,
ªt
;

16 
my_buf
[4000];

18 
	`bzîo
(
my_buf
, 4000);

21 
	`¥ötf
("[%d] - O≥nög devi˚ com∂ëe\n", 
	`gëpid
() );

22 
fd
 = 
	`›í
–"/dev/com∂ëe", 
O_RDONLY
 );

23 
	`≥º‹
("fd ");

24 if–
fd
 < 0 ) {

25 
	`¥ötf
("Device couldÇot be opened\n");

28 
	`¥ötf
("Devi˚ o≥√d wôh ID [%d]\n", 
fd
);

32 
	`¥ötf
("TryingÅoÑead fromÅhe device\n\n");

33 i‡((
ªt
 = 
	`ªad
–
fd
, 
my_buf
, 20 )) < 0)

35 
	`≥º‹
("\nRead ");

36 
	`exô
(1);

39 
	`¥ötf
("Ród [%s]\n", 
my_buf
);

42 
	`˛o£
(
fd
);

44 
	}
}

	@kern-prog/Locks/complte/reader1.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~<sys/ty≥s.h
>

13 
	$maö
()

15 
fd
, 
i
,
ªt
;

16 
my_buf
[4000];

18 
	`bzîo
(
my_buf
, 4000);

21 
	`¥ötf
("[%d] - O≥nög devi˚ com∂ëe\n", 
	`gëpid
() );

22 
fd
 = 
	`›í
–"/dev/com∂ëe", 
O_RDONLY
 );

23 
	`≥º‹
("fd ");

24 if–
fd
 < 0 ) {

25 
	`¥ötf
("Device couldÇot be opened\n");

28 
	`¥ötf
("Devi˚ o≥√d wôh ID [%d]\n", 
fd
);

32 
	`¥ötf
("TryingÅoÑead fromÅhe device\n\n");

33 i‡((
ªt
 = 
	`ªad
–
fd
, 
my_buf
, 20 )) < 0)

35 
	`≥º‹
("\nRead ");

36 
	`exô
(1);

39 
	`¥ötf
("Ród [%s]\n", 
my_buf
);

42 
	`˛o£
(
fd
);

44 
	}
}

	@kern-prog/Locks/complte/writer.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<f˙é.h
>

5 
	~<°rög.h
>

6 
	~<°dlib.h
>

7 
	~<sys/ty≥s.h
>

10 
	$maö
()

12 
fd
, 
i
;

13 
my_mesßge
[22];

14 
size
;

16 
	`°r˝y
(
my_mesßge
, "Veda Solutions");

19 
	`¥ötf
("[%d] - O≥nög devi˚ veda_cdrv\n", 
	`gëpid
() );

20 
fd
 = 
	`›í
–"/dev/com∂ëe", 
O_RDWR
 );

21 if–
fd
 < 0 ) {

22 
	`¥ötf
("Device couldÇot be opened\n");

25 
	`¥ötf
("Devi˚ o≥√d wôh ID [%d]\n", 
fd
);

27 
	`¥ötf
("Wrôög [%s]\n", 
my_mesßge
 );

29 
size
 = ()
	`wrôe
–
fd
, 
my_mesßge
, 
	`°æí
(my_message) );

30 
	`¥ötf
("Byã†wrôã¿%d\n", 
size
);

31 
	`bzîo
–
my_mesßge
, 20 );

34 
	`˛o£
(
fd
);

37 
	`exô
(0);

38 
	}
}

	@kern-prog/Locks/rwsem_mod/rwsem_module.c

8 #i‚de‡
__KERNEL__


9 
	#__KERNEL__


	)

12 #i‚de‡
MODULE


13 
	#MODULE


	)

16 
	#EXPORT_SYMTAB


	)

19 
	~<löux/kî√l.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/vîsi⁄.h
>

22 
	~<löux/öô.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/•ölock.h
>

25 
	~<löux/rw£m.h
>

28 
	gglobÆ
=10;

29 
rw_£m≠h‹e
 
	gmy_£m≠h‹e
;

30 
EXPORT_SYMBOL_GPL
(
globÆ
);

31 
EXPORT_SYMBOL_GPL
(
my_£m≠h‹e
);

33 
	$myöô
()

35 
	`öô_rw£m
(&
my_£m≠h‹e
);

36 
	`¥ötk
("\n Module Inserted");

37 
	`¥ötk
("\¿GlobÆ VÆuê=%d Cou¡=%ld\n",
globÆ
,
my_£m≠h‹e
.
cou¡
);

40 
	}
}

41 
	$myexô
()

43 
	`¥ötk
("\n Module Removed \n");

44 
	}
}

46 
MODULE_LICENSE
("GPL");

47 
moduÀ_öô
(
myöô
);

48 
moduÀ_exô
(
myexô
);

	@kern-prog/Locks/rwsem_mod/rwsem_reader1.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

11 #i‚de‡
MODULE


12 
	#MODULE


	)

15 
	#EXPORT_SYMTAB


	)

18 
	~<löux/kî√l.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/vîsi⁄.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/•ölock.h
>

24 
	~<löux/rw£m.h
>

26 
globÆ
;

27 
rw_£m≠h‹e
 
my_£m≠h‹e
;

29 
	$myöô
()

31 
	`¥ötk
("\n Module Inserted\n");

32 
	`down_ªad
(&
my_£m≠h‹e
);

33 
	`¥ötk
("\n Iám Reader1\n");

34 
	`¥ötk
("\nRódög GlobÆ vÆue=%d\n",
globÆ
);

38 
	}
}

39 
	$myexô
()

41 
	`up_ªad
(&
my_£m≠h‹e
);

42 
	`¥ötk
("\n Reader1 Module Removed \n");

43 
	}
}

45 
MODULE_LICENSE
("GPL");

46 
moduÀ_öô
(
myöô
);

47 
moduÀ_exô
(
myexô
);

	@kern-prog/Locks/rwsem_mod/rwsem_reader2.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

11 #i‚de‡
MODULE


12 
	#MODULE


	)

15 
	#EXPORT_SYMTAB


	)

18 
	~<löux/kî√l.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/vîsi⁄.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/•ölock.h
>

24 
	~<löux/rw£m.h
>

26 
globÆ
;

27 
rw_£m≠h‹e
 
my_£m≠h‹e
;

29 
	$myöô
()

31 
	`¥ötk
("\n Module Inserted\n");

33 
	`down_ªad
(&
my_£m≠h‹e
);

34 
	`¥ötk
("\n Iám Reader2 \n");

35 
	`¥ötk
("\¿Ródög GlobÆ vÆuê=%d \n",
globÆ
);

36 
	`up_ªad
(&
my_£m≠h‹e
);

39 
	}
}

40 
	$myexô
()

42 
	`¥ötk
("\n Reader2 Module Removed \n");

43 
	}
}

45 
MODULE_LICENSE
("GPL");

46 
moduÀ_öô
(
myöô
);

47 
moduÀ_exô
(
myexô
);

	@kern-prog/Locks/rwsem_mod/rwsem_writer1.c

1 #i‚de‡
__KERNEL__


2 
	#__KERNEL__


	)

5 #i‚de‡
MODULE


6 
	#MODULE


	)

9 
	#EXPORT_SYMTAB


	)

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/rw£m.h
>

15 
globÆ
;

16 
rw_£m≠h‹e
 
my_£m≠h‹e
;

17 
	$myöô
()

19 
	`¥ötk
("\nWriter1: Iám in Write mode\n");

20 
	`¥ötk
("\nIám changingÅhe value\n");

21 if(
my_£m≠h‹e
.
cou¡
==0)

23 
	`down_wrôe
(&
my_£m≠h‹e
);

24 
globÆ
=20;

25 
	`¥ötk
("\¿ThêCh™ged VÆue%d\n",
globÆ
);

29 
	`¥ötk
("\n Sorry, It'sálreadyÜocked\n");

33 
	}
}

35 
	$myexô
()

37 
	`up_wrôe
(&
my_£m≠h‹e
);

38 
	`¥ötk
("\n Writer1: says bye\n");

39 
	}
}

40 
moduÀ_öô
(
myöô
);

41 
moduÀ_exô
(
myexô
);

42 
MODULE_LICENSE
("GPL");

	@kern-prog/Locks/rwsem_mod/rwsem_writer2.c

1 #i‚de‡
__KERNEL__


2 
	#__KERNEL__


	)

5 #i‚de‡
MODULE


6 
	#MODULE


	)

9 
	#EXPORT_SYMTAB


	)

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/rw£m.h
>

15 
globÆ
;

16 
rw_£m≠h‹e
 
my_£m≠h‹e
;

17 
	$myöô
()

19 if(
my_£m≠h‹e
.
cou¡
==0)

21 
	`¥ötk
("\n Module Inserted\n");

22 
	`¥ötk
("\nWriter2: Iám in Write mode");

23 
	`down_wrôe
(&
my_£m≠h‹e
);

24 
globÆ
=30;

25 
	`¥ötk
("\¿ThêNew vÆuêo‡globÆ=%d\n",
globÆ
);

29 
	`¥ötk
("\n Sorry, It'sálreadyÜocked\n");

35 
	}
}

37 
	$myexô
()

39 
	`up_wrôe
(&
my_£m≠h‹e
);

40 
	`¥ötk
("\n Writer2: says bye\n");

41 
	}
}

42 
moduÀ_öô
(
myöô
);

43 
moduÀ_exô
(
myexô
);

44 
MODULE_LICENSE
("GPL");

	@kern-prog/Locks/sem/module1.c

10 #i‚de‡
__KERNEL__


11 
	#__KERNEL__


	)

14 #i‚de‡
MODULE


15 
	#MODULE


	)

18 
	#EXPORT_SYMTAB


	)

21 
	~<löux/kî√l.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/vîsi⁄.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/¶ab.h
>

26 
	~<löux/£m≠h‹e.h
>

28 
£m≠h‹e
 
	gmy_£m≠h‹e
;

29 
gë_£m≠h‹e
();

30 
Àave_£m≠h‹e
();

32 
EXPORT_SYMBOL_GPL
(
gë_£m≠h‹e
);

33 
EXPORT_SYMBOL_GPL
(
Àave_£m≠h‹e
);

35 
	$myöô
()

37 
	`öô_MUTEX
–&
my_£m≠h‹e
 );

39 
	`¥ötk
("\n\nModule1: I haveÅhe semaphore\n");

41 
	`down
–&
my_£m≠h‹e
 );

43 
	`¥ötk
("GëtögÅhê£m≠h‹ê™dÅhêcou¡ is:%d\n",
my_£m≠h‹e
.
cou¡
);

45 
	`up
–&
my_£m≠h‹e
 );

47 
	`¥ötk
("Rñó£d sem≠h‹ê™d cou¡Çow is:%d\n",
my_£m≠h‹e
.
cou¡
);

48 
	`¥ötk
("\nModule1: Exported semaphore [my_semaphore]\n\n");

50 
	}
}

52 
	$myexô
()

54 
	`¥ötk
("\n\nSemaphore Destroyed\n\n");

55 
	}
}

57 
	$gë_£m≠h‹e
()

59  
	`down_åylock
–&
my_£m≠h‹e
 );

60 
	}
}

62 
	$Àave_£m≠h‹e
()

64 
	`up
–&
my_£m≠h‹e
 );

66 
	}
}

67 
MODULE_LICENSE
("GPL");

68 
moduÀ_öô
(
myöô
);

69 
moduÀ_exô
(
myexô
);

	@kern-prog/Locks/sem/module2.c

1 #i‚de‡
__KERNEL__


2 
	#__KERNEL__


	)

5 #i‚de‡
MODULE


6 
	#MODULE


	)

9 
	#EXPORT_SYMTAB


	)

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/£m≠h‹e.h
>

27 
gë_£m≠h‹e
();

28 
Àave_£m≠h‹e
();

31 
	#SIGNAL
(Ë
	`Àave_£m≠h‹e
()

	)

32 
	#WAIT
(Ë
	`gë_£m≠h‹e
()

	)

35 
	$myöô
()

37 
	`¥ötk
("Module2: Waiting for semaphore\n");

38 if–
	`WAIT
() ) {

39 
	`¥ötk
("Module2: Not got semaphore\n");

43 
	`¥ötk
("Module2: Got semaphoreÇow\n");

45 
	}
}

47 
	$myexô
()

49 
	`SIGNAL
();

50 
	`¥ötk
("\n Module2 says bye");

51 
	}
}

52 
moduÀ_öô
(
myöô
);

53 
moduÀ_exô
(
myexô
);

54 
MODULE_LICENSE
("GPL");

	@kern-prog/Locks/sem/module3.c

1 #i‚de‡
__KERNEL__


2 
	#__KERNEL__


	)

5 #i‚de‡
MODULE


6 
	#MODULE


	)

9 
	#EXPORT_SYMTAB


	)

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/¶ab.h
>

15 
	~<löux/£m≠h‹e.h
>

19 
gë_£m≠h‹e
();

20 
Àave_£m≠h‹e
();

31 
	#WAIT
(Ë
	`gë_£m≠h‹e
()

	)

32 
	#SIGNAL
(Ë
	`Àave_£m≠h‹e
()

	)

35 
	$myöô
()

37 
	`¥ötk
("\nModule3: Waiting for semaphore\n");

38 if–
	`WAIT
() ) {

39 
	`¥ötk
("Module3: Not got semaphore\n");

42 
	`¥ötk
("Module3: Got semaphoreÇow\n");

44 
	}
}

46 
	$myexô
()

48 
	`SIGNAL
();

49 
	`¥ötk
("\n Module3 says bye");

50 
	}
}

51 
moduÀ_öô
(
myöô
);

52 
moduÀ_exô
(
myexô
);

53 
MODULE_LICENSE
("GPL");

	@kern-prog/Locks/seq_mod/seq_module.c

8 #i‚de‡
__KERNEL__


9 
	#__KERNEL__


	)

12 #i‚de‡
MODULE


13 
	#MODULE


	)

16 
	#EXPORT_SYMTAB


	)

19 
	~<löux/kî√l.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/vîsi⁄.h
>

22 
	~<löux/öô.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/•ölock.h
>

25 
	~<löux/£qlock.h
>

28 
	gglobÆ
=10;

29 
£qlock_t
 
	glock
=
SEQLOCK_UNLOCKED
;

31 
EXPORT_SYMBOL
(
globÆ
);

32 
EXPORT_SYMBOL
(
lock
);

34 
	$myöô
()

36 
	`¥ötk
("\n Module Inserted");

37 
	`¥ötk
("\¿GlobÆ VÆuê=%dÜock.£q=%d\n",
globÆ
,
lock
.
£quí˚
);

41 
	}
}

42 
	$myexô
()

44 
	`¥ötk
("\n Module Removed \n");

45 
	}
}

47 
MODULE_LICENSE
("GPL");

48 
moduÀ_öô
(
myöô
);

49 
moduÀ_exô
(
myexô
);

	@kern-prog/Locks/seq_mod/seq_reader1.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

11 #i‚de‡
MODULE


12 
	#MODULE


	)

15 
	#EXPORT_SYMTAB


	)

18 
	~<löux/kî√l.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/vîsi⁄.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/•ölock.h
>

24 
	~<löux/£qlock.h
>

26 
	g£q
;

27 
globÆ
;

28 
£qlock_t
 
lock
;

30 
	$myöô
()

32 
	`¥ötk
("\n Module Inserted\n");

33 
	`ªad_£qªåy
(&
lock
,
£q
)%2 == 0)

36 
£q
=
	`ªad_£qbegö
(&
lock
);

37 
	`¥ötk
("\n Iam in Read Mode ");

38 
	`¥ötk
("\¿GlobÆ VÆuê=%dÜock.£q=%d\n",
globÆ
,
lock
.
£quí˚
);

44 
	}
}

45 
	$myexô
()

47 
	`¥ötk
("\n Module Removed \n");

48 
	}
}

50 
MODULE_LICENSE
("GPL");

51 
moduÀ_öô
(
myöô
);

52 
moduÀ_exô
(
myexô
);

	@kern-prog/Locks/seq_mod/seq_reader2.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

11 #i‚de‡
MODULE


12 
	#MODULE


	)

15 
	#EXPORT_SYMTAB


	)

18 
	~<löux/kî√l.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/vîsi⁄.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/•ölock.h
>

24 
	~<löux/£qlock.h
>

26 
	g£q
;

27 
globÆ
;

28 
£qlock_t
 
lock
;

30 
	$myöô
()

32 
	`¥ötk
("\n Module Inserted\n");

33 
	`ªad_£qªåy
(&
lock
,
£q
)%2 == 0)

36 
£q
=
	`ªad_£qbegö
(&
lock
);

37 
	`¥ötk
("\n Iam in Read Mode ");

38 
	`¥ötk
("\¿GlobÆ VÆuê=%dÜock.£q=%d\n",
globÆ
,
lock
.
£quí˚
);

44 
	}
}

45 
	$myexô
()

47 
	`¥ötk
("\n Module Removed \n");

48 
	}
}

50 
MODULE_LICENSE
("GPL");

51 
moduÀ_öô
(
myöô
);

52 
moduÀ_exô
(
myexô
);

	@kern-prog/Locks/seq_mod/seq_writer1.c

1 #i‚de‡
__KERNEL__


2 
	#__KERNEL__


	)

5 #i‚de‡
MODULE


6 
	#MODULE


	)

9 
	#EXPORT_SYMTAB


	)

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/£qlock.h
>

15 
globÆ
;

16 
£qlock_t
 
lock
;

17 
	$myöô
()

19 
	`¥ötk
("\nWriter1: Iám in Write mode\n");

20 
	`¥ötk
("\nIám changingÅhe value\n");

21 if((
lock
.
£quí˚
)%2==0)

23 
	`wrôe_£qlock
(&
lock
);

24 
globÆ
=20;

25 
	`¥ötk
("\¿ThêGLOBAL vÆue%dÜock.£q %d\n",
globÆ
,
lock
.
£quí˚
);

29 
	`¥ötk
("\n Sorry,It's AlreadyÜocked\n");

33 
	}
}

35 
	$myexô
()

37 
	`¥ötk
("\n Writer1: says bye\n");

38 
	`wrôe_£qu∆ock
(&
lock
);

39 
	}
}

40 
moduÀ_öô
(
myöô
);

41 
moduÀ_exô
(
myexô
);

42 
MODULE_LICENSE
("GPL");

	@kern-prog/Locks/seq_mod/seq_writer2.c

1 #i‚de‡
__KERNEL__


2 
	#__KERNEL__


	)

5 #i‚de‡
MODULE


6 
	#MODULE


	)

9 
	#EXPORT_SYMTAB


	)

11 
	~<löux/kî√l.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/£qlock.h
>

15 
globÆ
;

16 
£qlock_t
 
lock
;

17 
	$myöô
()

19 
	`¥ötk
("\nWriter2: Iám in Write mode");

20 
	`¥ötk
("\nIám changingÅhe value");

21 if((
lock
.
£quí˚
)%2==0)

23 
	`wrôe_£qlock
(&
lock
);

24 
globÆ
=30;

25 
	`¥ötk
("\¿ThêGLOBAL vÆue%d\n",
globÆ
);

29 
	`¥ötk
("\n Sorry, It's AlreadyÜocked\n");

33 
	}
}

35 
	$myexô
()

37 
	`¥ötk
("\n Writer2: says bye\n");

38 
	`wrôe_£qu∆ock
(&
lock
);

39 
	}
}

40 
moduÀ_öô
(
myöô
);

41 
moduÀ_exô
(
myexô
);

42 
MODULE_LICENSE
("GPL");

	@kern-prog/bh/jiq/jiq.c

14 
	~<löux/moduÀ.h
>

15 
	~<löux/moduÀ∑øm.h
>

16 
	~<löux/öô.h
>

18 
	~<löux/sched.h
>

19 
	~<löux/kî√l.h
>

20 
	~<löux/fs.h
>

21 
	~<löux/¥oc_fs.h
>

22 
	~<löux/î∫o.h
>

23 
	~<löux/w‹kqueue.h
>

24 
	~<löux/¥ìm±.h
>

25 
	~<löux/öãºu±.h
>

26 
	~<löux/jiffõs.h
>

28 
	#MODULE_NAME
 "BH"

	)

30 
MODULE_LICENSE
("Dual BSD/GPL");

32 
¥oc_dú_íåy
 *
	gexam∂e_dú
;

33 
	gcou¡î
=0;

39 
wq_func
(*);

40 
w‹k_°ru˘
 
	gjiq_w‹k
;

41 
	$wq_func
(*
¨g
)

43 
	`¥ötk
("%ld %d %s\n", 
jiffõs
,
cou¡î
++,
cuºít
->
comm
);

44 if–
cou¡î
 < 100 )

45 
	`scheduÀ_w‹k
(&
jiq_w‹k
 );

47 
cou¡î
=0;

48 
	}
}

50 
	$jiq_ªad_wq
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

51 
Àn
, *
eof
, *
d©a
)

54 
©omic_t
 
d©a1
=
	`ATOMIC_INIT
(0);

55 
jiq_w‹k
.
d©a
=
d©a1
;

56 
jiq_w‹k
.
func
=(
w‹k_func_t
Ë
wq_func
;

57 
	`scheduÀ_w‹k
(&
jiq_w‹k
);

59 
	}
}

67 
jiq_func
();

68 
èskÀt_°ru˘
 
	gjiq_èskÀt
;

70 
	$jiq_func
(
d©a
)

72 
	`¥ötk
("%ld %d %s\n",
jiffõs
,
cou¡î
++,
cuºít
->
comm
);

73 if(
cou¡î
<50)

74 
	`èskÀt_scheduÀ
(&
jiq_èskÀt
);

76 
cou¡î
=0;

77 
	}
}

81 
	$jiq_ªad_èskÀt
(*
buf
, **
°¨t
, 
off_t
 
off£t
, 
Àn
,

82 *
eof
, *
d©a
)

84 
jiq_èskÀt
.
°©e
=0;

85 
jiq_èskÀt
.
func
=
jiq_func
;

86 
	`èskÀt_scheduÀ
(&
jiq_èskÀt
);

88 
	}
}

96 
timî_li°
 
	gjiq_timî
;

98 
	$jiq_jiff
(
d©a
)

100 
	`¥ötk
("%ld %d %s\n", 
jiffõs
, 
cou¡î
++,
cuºít
->
comm
);

102 if–
cou¡î
 < 100 )

103 
	`add_timî
(&
jiq_timî
);

105 
cou¡î
=0;

107 
	}
}

109 
	$jiq_ªad_run_timî
(*
buf
, **
°¨t
, 
off_t
 
off£t
,

110 
Àn
, *
eof
, *
d©a
)

112 
	`öô_timî
(&
jiq_timî
);

113 
jiq_timî
.
d©a
=0;

114 
	`¥ötk
("\n Timer Initialized\n");

115 
jiq_timî
.
fun˘i⁄
=
jiq_jiff
;

116 
jiq_timî
.
expúes
=100;

117 
	`add_timî
(&
jiq_timî
);

119 
	}
}

127 
	$jiq_öô
()

129 
rv
=0;

130 
exam∂e_dú
 = 
	`¥oc_mkdú
(
MODULE_NAME
, 
NULL
);

131 if(
exam∂e_dú
 =
NULL
) {

132 
rv
=-
ENOMEM
;

133 
out
;

137 
	`¸óã_¥oc_ªad_íåy
("jiqtimî", 0644, 
exam∂e_dú
, 
jiq_ªad_run_timî
, 
NULL
);

138 
	`¸óã_¥oc_ªad_íåy
("jiqèskÀt", 0644, 
exam∂e_dú
, 
jiq_ªad_èskÀt
, 
NULL
);

139 
	`¸óã_¥oc_ªad_íåy
("jiqwq", 0644,
exam∂e_dú
, 
jiq_ªad_wq
, 
NULL
);

142 
	`INIT_WORK
(&
jiq_w‹k
,(
w‹k_func_t
Ë
wq_func
);

145 
	`¥ötk
("\n Module Inserted\n");

147 
out
 :  
rv
;

148 
	}
}

151 
	$jiq_˛ónup
()

153 
	`dñ_timî
(&
jiq_timî
);

154 
	`ªmove_¥oc_íåy
("jiqtimî", 
exam∂e_dú
);

155 
	`ªmove_¥oc_íåy
("jiqèskÀt", 
exam∂e_dú
);

156 
	`ªmove_¥oc_íåy
("jiqwq", 
exam∂e_dú
);

157 
	`ªmove_¥oc_íåy
(
MODULE_NAME
,
NULL
);

158 
	`¥ötk
("\n Module Removed\n");

159 
	}
}

161 
moduÀ_öô
(
jiq_öô
);

162 
moduÀ_exô
(
jiq_˛ónup
);

	@kern-prog/bh/timing/tsc.c

10 #i‚de‡
__KERNEL__


11 
	#__KERNEL__


	)

14 #i‚de‡
MODULE


15 
	#MODULE


	)

18 
	#EXPORT_SYMTAB


	)

19 
	#SUCCESS
 0

	)

21 
	~<löux/kî√l.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/öô.h
>

24 
	~<asm/m§.h
>

25 
uöt64_t
 
rdtsc
();

26 
myöô
();

27 
myexô
();

29 
uöt64_t
 
	$rdtsc
() {

30 
uöt32_t
 
lo
, 
hi
;

32 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "˜" (
lo
), "=d" (
hi
));

33 
	`¥ötk
("\¿high=%ldÜow=%ld",()
hi
,()
lo
);

34  (
uöt64_t
)
hi
 << 32 | 
lo
;

35 
	}
}

38 
	$myöô
()

40 
	`¥ötk
("\n Module Inserted\n");

41 
	`¥ötk
("\¿rdtsc(Ë=%Œu\n", ()
	`rdtsc
());

42  
SUCCESS
;

43 
	}
}

46 
	$myexô
()

48 
	`¥ötk
("\¿rdtsc(Ë=%Œu\n", ()
	`rdtsc
());

49 
	`¥ötk
("\n Module Removed\n");

50 
	}
}

53 
MODULE_AUTHOR
("VEDA");

54 
MODULE_DESCRIPTION
("Example");

55 
MODULE_LICENSE
("GPL");

56 
moduÀ_öô
(
myöô
);

57 
moduÀ_exô
(
myexô
);

	@kern-prog/bh/timing/tst-work-queue.c

12 #i‚de‡
__KERNEL__


13 
	#__KERNEL__


	)

16 #i‚de‡
MODULE


17 
	#MODULE


	)

22 
	~<löux/kî√l.h
>

23 
	~<löux/öô.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/w‹kqueue.h
>

26 
	~<löux/sched.h
>

28 
	#DELAY
 100

	)

29 
wq_öô
();

30 
wq_exô
();

31 
wq_func
(*);

34 
MODULE_LICENSE
("GPL");

35 
moduÀ_öô
(
wq_öô
);

36 
moduÀ_exô
(
wq_exô
);

38 
	gcou¡î
;

40 
DECLARE_WORK
(
wq
,(
w‹k_func_t
)
wq_func
);

43 
	$wq_func
(*
¨g
)

45 
	`¥ötk
("%ld %d %†\n", 
jiffõs
,
cou¡î
++,
cuºít
->
comm
);

46 if–
cou¡î
 < 1000 )

47 
	`scheduÀ_w‹k
(&
wq
);

48 
	}
}

50 
	$wq_öô
()

52 
	`¥ötk
("\nModule Inserted\n");

54 
	`scheduÀ_w‹k
(&
wq
);

57 
	`¥ötk
("cuºíàcou¡î %ld\n",
jiffõs
);

59 
	`¥ötk
("cuºíàcou¡î %ld\n",
jiffõs
);

61 
	}
}

63 
	$wq_exô
()

65 
	`¥ötk
("\nModule Removed");

66 
	}
}

	@kern-prog/bh/timing/while_delay.c

7 #i‚de‡
__KERNEL__


8 
	#__KERNEL__


	)

11 #i‚de‡
MODULE


12 
	#MODULE


	)

15 
	#EXPORT_SYMTAB


	)

16 
	#SUCCESS
 0

	)

18 
	~<löux/kî√l.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/sched.h
>

23 
__öô
 
	$myöô
()

25 
j
 = 
jiffõs
 + 10*
HZ
;

26 
	`¥ötk
("TryÅo do something forÅheÇext 10 seconds.\n");

27 
	`¥ötk
("IámÖuttingÅhe system offÅoá standstill forÅhe\n"

29  
jiffõs
 < 
j
 ) {

32 
	`¥ötk
("Now Iám out ofÅheÜoop");

34 
	}
}

37 
__exô
 
	$myexô
()

39 
	`¥ötk
("\nModule SuccessfullyÑemoved");

40 
	}
}

43 
MODULE_AUTHOR
("VEDA");

44 
MODULE_DESCRIPTION
("Example");

45 
MODULE_LICENSE
("GPL");

46 
moduÀ_öô
(
myöô
);

47 
moduÀ_exô
(
myexô
);

	@kern-prog/mem_cache/cache.c

13 #i‚de‡
MODULE


14 
	#MODULE


	)

16 #i‚de‡
__KERNEL__


17 
	#__KERNEL__


	)

21 
	~<löux/moduÀ.h
>

22 
	~<löux/vîsi⁄.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/¶ab.h
>

28 
	#SUCCESS
 0

	)

30 
kmem_ˇche
 *
	gˇche_±r
;

31 *
	gªt
;

32 
	gmem
=200;

33 
func
();

35 
	$func
()

37 
ªt
=
	`kmem_ˇche_Æloc
(
ˇche_±r
,
GFP_KERNEL
);

39 
	}
}

41 
	$öô_mod
()

44 
ˇche_±r
=
	`kmem_ˇche_¸óã
("ˇche_mem",
mem
,0,
SLAB_HWCACHE_ALIGN
,
NULL
);

46 if(
ˇche_±r
==
NULL
)

47  -
ENOMEM
;

49 
	`¥ötk
("\nModuleÜoaded");

50 
	`func
();

51  
SUCCESS
;

52 
	}
}

54 
	$˛ónup_mod
()

56 
	`¥ötk
("\n ModuleÑemoved");

57 
	`kmem_ˇche_‰ì
(
ˇche_±r
,
ªt
);

58 
	`kmem_ˇche_de°roy
(
ˇche_±r
);

59 
	}
}

61 
moduÀ_öô
(
öô_mod
);

62 
moduÀ_exô
(
˛ónup_mod
);

65 
MODULE_AUTHOR
("TEAM VEDA");

66 
MODULE_DESCRIPTION
("FIRST MODULE");

67 
MODULE_LICENSE
("GPL");

	@kern-prog/mem_cache/cachepool.c

13 #i‚de‡
MODULE


14 
	#MODULE


	)

16 #i‚de‡
__KERNEL__


17 
	#__KERNEL__


	)

21 
	~<löux/moduÀ.h
>

22 
	~<löux/vîsi⁄.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/öô.h
>

25 
	~<löux/¶ab.h
>

26 
	~<löux/mempoﬁ.h
>

29 
	#SUCCESS
 0

	)

30 
mempoﬁ_t
 *
	gmem
;

31 
kmem_ˇche
 *
	gˇche_±r
;

32 *
	gªt
;

33 
	sabc
{

34 
	ma
;

35 
	mb
;

36 
	mc
;

37 }
	tabc_t
;

38 
abc_t
 *
	g±r
;

39 
	gv¨
=12;

40 
func
();

42 
	$func
()

45 
±r
=(
abc
 *)
	`mempoﬁ_Æloc
(
mem
,
GFP_KERNEL
);

46 
±r
->
a
=100;

47 
±r
->
b
=300;

48 
±r
->
c
=700;

49 
	`¥ötk
("vÆ i†%d",
±r
->
a
);

50 
	}
}

51 
	$öô_mod
()

53 
ˇche_±r
=
	`kmem_ˇche_¸óã
("ˇche_mem1",
v¨
,0,
SLAB_HWCACHE_ALIGN
,
NULL
);

54 
mem
=
	`mempoﬁ_¸óã
(20,
mempoﬁ_Æloc_¶ab
,
mempoﬁ_‰ì_¶ab
,
ˇche_±r
);

56 if(
mem
==
NULL
)

57  -
ENOMEM
;

59 
	`¥ötk
("\nModuleÜoaded");

60 
	`func
();

61  
SUCCESS
;

62 
	}
}

64 
	$˛ónup_mod
()

66 
	`¥ötk
("\n ModuleÑemoved");

68 
	`mempoﬁ_‰ì
(
±r
,
mem
);

69 
	`mempoﬁ_de°roy
(
mem
);

71 
	`kmem_ˇche_de°roy
(
ˇche_±r
);

74 
	}
}

76 
moduÀ_öô
(
öô_mod
);

77 
moduÀ_exô
(
˛ónup_mod
);

80 
MODULE_AUTHOR
("TEAM VEDA");

81 
MODULE_DESCRIPTION
("FIRST MODULE");

82 
MODULE_LICENSE
("GPL");

	@kern-prog/mm/dofork.c

11 
	~<°dio.h
>

12 
	~<f˙é.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sys/waô.h
>

17 
	gfûíame
[] = "/proc/vma";

19 
	$maö
–
¨gc
, **
¨gv
 )

21 
fd
, 
nbyãs
;

22 
öfo
[ 4096 ] = {0};

25 
fd
 = 
	`›í
–
fûíame
, 
O_RDONLY
 );

26 i‡–
fd
 < 0 )

28 
	`≥º‹
–
fûíame
 );

29 
	`exô
(1);

33 
nbyãs
 = 
	`ªad
–
fd
, 
öfo
, ( info ) );

34 i‡–
nbyãs
 < 0 )

36 
	`≥º‹
( "read" );

37 
	`exô
(1);

39 
	`¥ötf
–"%s", 
öfo
 );

42 
	`fÊush
–
°dout
 );

45 i‡–
	`f‹k
(ËË
	`waô
–
NULL
 );

48 
	`l£ek
–
fd
, 0, 
SEEK_SET
 );

49 
nbyãs
 = 
	`ªad
–
fd
, 
öfo
, ( info ) );

50 i‡–
nbyãs
 < 0 )

52 
	`≥º‹
( "read" );

53 
	`exô
(1);

55 
	`¥ötf
–"%s", 
öfo
 );

56 
	}
}

	@kern-prog/mm/dofork.cpp

10 
	~<°dio.h
>

11 
	~<f˙é.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<sys/waô.h
>

16 
	gfûíame
[] = "/proc/vma";

18 
	$maö
–
¨gc
, **
¨gv
 )

20 
fd
, 
nbyãs
;

21 
öfo
[ 4096 ] = {0};

24 
fd
 = 
	`›í
–
fûíame
, 
O_RDONLY
 );

25 i‡–
fd
 < 0 )

27 
	`≥º‹
–
fûíame
 );

28 
	`exô
(1);

32 
nbyãs
 = 
	`ªad
–
fd
, 
öfo
, ( info ) );

33 i‡–
nbyãs
 < 0 )

35 
	`≥º‹
( "read" );

36 
	`exô
(1);

38 
	`¥ötf
–"%s", 
öfo
 );

41 
	`fÊush
–
°dout
 );

44 i‡–
	`f‹k
(ËË
	`waô
–
NULL
 );

47 
	`l£ek
–
fd
, 0, 
SEEK_SET
 );

48 
nbyãs
 = 
	`ªad
–
fd
, 
öfo
, ( info ) );

49 i‡–
nbyãs
 < 0 )

51 
	`≥º‹
( "read" );

52 
	`exô
(1);

54 
	`¥ötf
–"%s", 
öfo
 );

55 
	}
}

	@kern-prog/mm/domalloc.c

11 
	~<°dio.h
>

12 
	~<f˙é.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

16 
	gfûíame
[] = "/proc/vma";

18 
	$maö
–
¨gc
, **
¨gv
 )

20 
fd
, 
nbyãs
;

21 
öfo
[ 4096 ] = {0};

24 
fd
 = 
	`›í
–
fûíame
, 
O_RDONLY
 );

25 i‡–
fd
 < 0 )

27 
	`≥º‹
–
fûíame
 );

28 
	`exô
(1);

32 
nbyãs
 = 
	`ªad
–
fd
, 
öfo
, ( info ) );

33 i‡–
nbyãs
 < 0 )

35 
	`≥º‹
( "read" );

36 
	`exô
(1);

38 
	`¥ötf
–"%s", 
öfo
 );

39 
	`gëch¨
();

42 
hópsize
 = (256 << 20);

43 *
myhóp
 = 
	`mÆloc
–
hópsize
 );

44 i‡–!
myhóp
 )

46 
	`≥º‹
( "malloc" );

47 
	`exô
(1);

50 
	`¥ötf
–"Æloˇãd 0x%08lX byã†⁄Åhêhó∞", 
hópsize
 );

51 
	`¥ötf
–"© vútuÆáddªs†%08lX \n", ()
myhóp
 );

52 
	`gëch¨
();

55 
	`l£ek
–
fd
, 0, 
SEEK_SET
 );

56 
nbyãs
 = 
	`ªad
–
fd
, 
öfo
, ( info ) );

57 i‡–
nbyãs
 < 0 )

58 { 
	`≥º‹
( "read" );

59 
	`exô
(1);

61 
	`¥ötf
–"%s", 
öfo
 );

62 
	`gëch¨
();

65 
	`‰ì
–
myhóp
 );

66 
	`¥ötf
( "released heap space \n" );

67 
	}
}

	@kern-prog/mm/domalloc.cpp

10 
	~<°dio.h
>

11 
	~<f˙é.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

15 
	gfûíame
[] = "/proc/vma";

17 
	$maö
–
¨gc
, **
¨gv
 )

19 
fd
, 
nbyãs
;

20 
öfo
[ 4096 ] = {0};

23 
fd
 = 
	`›í
–
fûíame
, 
O_RDONLY
 );

24 i‡–
fd
 < 0 )

26 
	`≥º‹
–
fûíame
 );

27 
	`exô
(1);

31 
nbyãs
 = 
	`ªad
–
fd
, 
öfo
, ( info ) );

32 i‡–
nbyãs
 < 0 )

34 
	`≥º‹
( "read" );

35 
	`exô
(1);

37 
	`¥ötf
–"%s", 
öfo
 );

38 
	`gëch¨
();

41 
hópsize
 = (256 << 20);

42 *
myhóp
 = 
	`mÆloc
–
hópsize
 );

43 i‡–!
myhóp
 )

45 
	`≥º‹
( "malloc" );

46 
	`exô
(1);

49 
	`¥ötf
–"Æloˇãd 0x%08lX byã†⁄Åhêhó∞", 
hópsize
 );

50 
	`¥ötf
–"© vútuÆáddªs†%08lX \n", ()
myhóp
 );

51 
	`gëch¨
();

54 
	`l£ek
–
fd
, 0, 
SEEK_SET
 );

55 
nbyãs
 = 
	`ªad
–
fd
, 
öfo
, ( info ) );

56 i‡–
nbyãs
 < 0 )

57 { 
	`≥º‹
( "read" );

58 
	`exô
(1);

60 
	`¥ötf
–"%s", 
öfo
 );

61 
	`gëch¨
();

64 
	`‰ì
–
myhóp
 );

65 
	`¥ötf
( "released heap space \n" );

66 
	}
}

	@kern-prog/mm/dram.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/highmem.h
>

25 
	~<asm/uac˚ss.h
>

27 
	gmod«me
[] = "dram";

28 
	gmy_maj‹
 = 253;

29 
	gdøm_size
;

31 
loff_t
 
my_Œ£ek
–
fûe
 *fûe,Üoff_à
off£t
, 
whí˚
 );

32 
ssize_t
 
my_ªad
–
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
 );

34 
fûe_›î©i⁄s


35 
	gmy_f›s
 = {

36 
ow√r
: 
THIS_MODULE
,

37 
Œ£ek
: 
my_Œ£ek
,

38 
ªad
: 
my_ªad
,

42 
	$öô_moduÀ
( )

44 
	`¥ötk
–"<1>\nIn°Ælög \'%s\' moduÀ ", 
mod«me
 );

45 
	`¥ötk
–"(maj‹=%d)\n", 
my_maj‹
 );

47 
døm_size
 = 
num_phy•ages
 * 
PAGE_SIZE
;

48 
	`¥ötk
–"<1>Ñamt›=%08lX (%lu MB)\n", 
døm_size
, dram_size >> 20 );

49  
	`ªgi°î_chrdev
–
my_maj‹
, 
mod«me
, &
my_f›s
 );

50 
	}
}

52 
	$˛ónup_moduÀ
( )

54 
	`uƒegi°î_chrdev
–
my_maj‹
, 
mod«me
 );

55 
	`¥ötk
–"<1>Removög \'%s\' moduÀ\n", 
mod«me
 );

56 
	}
}

59 
ssize_t
 
	$my_ªad
–
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
 )

61 
∑ge
 *
µ
;

62 *
‰om
;

63 
∑ge_numbî
, 
∑ge_ödít
, 
m‹e
;

66 i‡–*
pos
 >
døm_size
 )  0;

70 
∑ge_numbî
 = *
pos
 / 
PAGE_SIZE
;

71 
∑ge_ödít
 = *
pos
 % 
PAGE_SIZE
;

74 
µ
 = &
mem_m≠
[ 
∑ge_numbî
 ];

75 
‰om
 = 
	`km≠
–
µ
 ) + 
∑ge_ödít
;

78 i‡–
∑ge_ödít
 + 
cou¡
 > 
PAGE_SIZE
 ) count = PAGE_SIZE -Öage_indent;

81 
m‹e
 = 
	`c›y_to_u£r
–
buf
, 
‰om
, 
cou¡
 );

84 
	`kunm≠
–
µ
 );

87 i‡–
m‹e
 )  -
EFAULT
;

90 *
pos
 +
cou¡
;

91  
cou¡
;

92 
	}
}

95 
loff_t
 
	$my_Œ£ek
–
fûe
 *fûe, 
loff_t
 
off£t
, 
whí˚
 )

97 
loff_t
 
√wpos
 = -1;

99  
whí˚
 )

101 0: 
√wpos
 = 
off£t
; ;

102 1: 
√wpos
 = 
fûe
->
f_pos
 + 
off£t
; ;

103 2: 
√wpos
 = 
døm_size
 + 
off£t
; ;

106 i‡(–
√wpos
 < 0 )||–√wpo†> 
døm_size
 )Ë -
EINVAL
;

107 
fûe
->
f_pos
 = 
√wpos
;

108  
√wpos
;

109 
	}
}

111 
MODULE_LICENSE
("GPL");

	@kern-prog/mm/mm.c

21 
	~<löux/moduÀ.h
>

22 
	~<löux/¥oc_fs.h
>

23 
	~<löux/sched.h
>

26 
¥oc_dú_íåy
 *
	gmm_öfo
;

28 
	$my_gë_öfo
–*
buf
, **
°¨t
, 
off_t
 
off
, 
cou¡
 )

30 
èsk_°ru˘
 *
tsk
 = 
cuºít
;

31 
mm_°ru˘
 *
mm
 = 
tsk
->mm;

32 
Àn
;

34 
Àn
 = 
	`•rötf
–
buf
, "\nInfo fromÅhe Memory Management structure " );

35 
Àn
 +
	`•rötf
–
buf
+Àn, "f‹Åask \'%s\' ", 
tsk
->
comm
 );

36 
Àn
 +
	`•rötf
–
buf
+Àn, "’id=%dË\n", 
tsk
->
pid
 );

37 
Àn
 +
	`•rötf
–
buf
+Àn, "Ögd=%08lX ", ()
mm
->
pgd
 );

38 
Àn
 +
	`•rötf
–
buf
+Àn, "mm≠=%08lX ", ()
mm
->
mm≠
 );

39 
Àn
 +
	`•rötf
–
buf
+Àn, "m≠_cou¡=%d ", 
mm
->
m≠_cou¡
 );

40 
Àn
 +
	`•rötf
–
buf
+Àn, "mm_u£rs=%d ", 
mm
->
mm_u£rs
.
cou¡î
 );

41 
Àn
 +
	`•rötf
–
buf
+Àn, "mm_cou¡=%d ", 
mm
->
mm_cou¡
.
cou¡î
 );

42 
Àn
 +
	`•rötf
–
buf
+len, "\n" );

43 
Àn
 +
	`•rötf
–
buf
+Àn, " sèπ_code=%08lX ", 
mm
->
°¨t_code
 );

44 
Àn
 +
	`•rötf
–
buf
+Àn, "Énd_code=%08lX\n", 
mm
->
íd_code
 );

45 
Àn
 +
	`•rötf
–
buf
+Àn, " sèπ_d©a=%08lX ", 
mm
->
°¨t_d©a
 );

46 
Àn
 +
	`•rötf
–
buf
+Àn, "Énd_d©a=%08lX\n", 
mm
->
íd_d©a
 );

47 
Àn
 +
	`•rötf
–
buf
+Àn, " sèπ_brk=%08lX ", 
mm
->
°¨t_brk
 );

48 
Àn
 +
	`•rötf
–
buf
+Àn, " brk=%08lX\n", 
mm
->
brk
 );

49 
Àn
 +
	`•rötf
–
buf
+Àn, "árg_°¨t=%08lX ", 
mm
->
¨g_°¨t
 );

50 
Àn
 +
	`•rötf
–
buf
+Àn, "árg_íd=%08lX\n", 
mm
->
¨g_íd
 );

51 
Àn
 +
	`•rötf
–
buf
+Àn, "Énv_°¨t=%08lX ", 
mm
->
ív_°¨t
 );

52 
Àn
 +
	`•rötf
–
buf
+Àn, "Énv_íd=%08lX\n", 
mm
->
ív_íd
 );

53 
Àn
 +
	`•rötf
–
buf
+Àn, " sèπ_°ack=%08lX ", 
mm
->
°¨t_°ack
 );

54 
Àn
 +
	`•rötf
–
buf
+Àn, "íd_°ack=%08lX\n", 
TASK_SIZE
 );

55 
Àn
 +
	`•rötf
–
buf
+len, "\n" );

56  
Àn
;

57 
	}
}

59 
	$öô_moduÀ
( )

61 
	`¥ötk
("MM Module Insereted");

63 
mm_öfo
 = 
	`¸óã_¥oc_íåy
–"mm", 0, 
NULL
 );

66 
mm_öfo
->
ªad_¥oc
 = 
my_gë_öfo
;

70 
	}
}

72 
	$˛ónup_moduÀ
( )

74 
	`ªmove_¥oc_íåy
–"mm", 
NULL
 );

75 
	}
}

77 
MODULE_LICENSE
("GPL");

	@kern-prog/mm/pageinfo.c

22 
	~<löux/moduÀ.h
>

23 
	~<löux/¥oc_fs.h
>

24 
	~<löux/mm.h
>

27 
¥oc_dú_íåy
 *
	g∑ge_öfo
;

29 
	gmod«me
[] = "pageinfo";

31 
	$my_gë_öfo
–*
buf
, **
°¨t
, 
off_t
 
off
, 
cou¡
 )

33 
Êsz
 = ( );

34 
©sz
 = –
©omic_t
 );

35 
pvsz
 = ( );

36 
assz
 = –
addªss_•a˚
 * );

37 
posz
 = –
pgoff_t
 );

38 
lhsz
 = –
li°_hód
 );

39 
pgsz
 = –
∑ge
 );

40 
Àn
 = 0;

42 
	`¥ötk
("inÑead callback");

44 
Àn
 +
	`•rötf
–
buf
+Àn, "\nsizeof–Êag†Ë%d byã†", 
Êsz
 );

45 
Àn
 +
	`•rötf
–
buf
+Àn, "\nsizeof–©omic_àË%d byã†", 
©sz
 );

46 
Àn
 +
	`•rötf
–
buf
+Àn, "\nsizeof–unsig√dÜ⁄g ) = %d byãs", 
pvsz
 );

47 
Àn
 +
	`•rötf
–
buf
+len, "\nsizeof( structáddress_space * ) " );

48 
Àn
 +
	`•rötf
–
buf
+Àn, "%d byã†", 
assz
 );

49 
Àn
 +
	`•rötf
–
buf
+Àn, "\nsizeof–pgoff_àË%d byã†", 
posz
 );

50 
Àn
 +
	`•rötf
–
buf
+Àn, "\nsizeof–pgoff_àË%d byã†", 
posz
 );

51 
Àn
 +
	`•rötf
–
buf
+len, "\nsizeof( structÜist_head ) = " );

52 
Àn
 +
	`•rötf
–
buf
+Àn, "%d byã† ", 
lhsz
 );

53 
Àn
 +
	`•rötf
–
buf
+Àn, "\nsizeof–°ru˘ÖagêË%d byã†", 
pgsz
 );

54 
Àn
 +
	`•rötf
–
buf
+len, "\n\n" );

55  
Àn
;

56 
	}
}

58 
	$öô_moduÀ
( )

60 
	`¥ötk
–"<1>\nIn°Ælög \'%s\' moduÀ\n", 
mod«me
 );

62 
∑ge_öfo
 = 
	`¸óã_¥oc_íåy
–
mod«me
, 0, 
NULL
 );

65 
∑ge_öfo
->
ªad_¥oc
 = (
ªad_¥oc_t
 *)
my_gë_öfo
;

69 
	}
}

71 
	$˛ónup_moduÀ
( )

73 
	`ªmove_¥oc_íåy
–
mod«me
, 
NULL
 );

74 
	`¥ötk
–"<1>Removög \'%s\' moduÀ\n", 
mod«me
 );

75 
	}
}

77 
MODULE_LICENSE
("GPL");

	@kern-prog/mm/vma.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/¥oc_fs.h
>

25 
	~<löux/mm.h
>

26 
	~<löux/sched.h
>

29 
¥oc_dú_íåy
 *
	gvma_öfo
;

31 
	gmod«me
[] = "vma";

33 
	$my_gë_öfo
–*
buf
, **
°¨t
, 
off_t
 
off
, 
cou¡
 )

35 
èsk_°ru˘
 *
tsk
 = 
cuºít
;

36 
vm_¨ó_°ru˘
 *
vma
;

37 
±db
;

38 
i
 = 0, 
Àn
 = 0;

41 
Àn
 +
	`•rötf
–
buf
+len, "\n\nList ofÅhe Virtual Memory Areas " );

42 
Àn
 +
	`•rötf
–
buf
+Àn, "f‹Åask \'%s\' ", 
tsk
->
comm
 );

43 
Àn
 +
	`•rötf
–
buf
+Àn, "’id=%d)\n", 
tsk
->
pid
 );

46 
vma
 = 
tsk
->
mm
->
mm≠
;

47  
vma
 )

49 
ch
;

50 
Àn
 +
	`•rötf
–
buf
+Àn, "\n%3d ", ++
i
 );

51 
Àn
 +
	`•rötf
–
buf
+Àn, " vm_°¨t=%08lX ", 
vma
->
vm_°¨t
 );

52 
Àn
 +
	`•rötf
–
buf
+Àn, " vm_íd=%08lX ", 
vma
->
vm_íd
 );

54 
ch
 = ( 
vma
->
vm_Êags
 & 
VM_READ
 ) ? 'r' : '-';

55 
Àn
 +
	`•rötf
–
buf
+Àn, "%c", 
ch
 );

57 
ch
 = ( 
vma
->
vm_Êags
 & 
VM_WRITE
 ) ? 'w' : '-';

58 
Àn
 +
	`•rötf
–
buf
+Àn, "%c", 
ch
 );

60 
ch
 = ( 
vma
->
vm_Êags
 & 
VM_EXEC
 ) ? 'x' : '-';

61 
Àn
 +
	`•rötf
–
buf
+Àn, "%c", 
ch
 );

63 
ch
 = ( 
vma
->
vm_Êags
 & 
VM_SHARED
 ) ? 's' : 'p';

64 
Àn
 +
	`•rötf
–
buf
+Àn, "%c", 
ch
 );

66 
vma
 = vma->
vm_√xt
;

68 
Àn
 +
	`•rötf
–
buf
+len, "\n" );

71 
	`asm
(" mov»%%¸3, %%ecx \¿mov»%%ecx, %0 " : "=m" (
±db
) );

72 
Àn
 +
	`•rötf
–
buf
+Àn, "\nCR3=%08lX ", 
±db
 );

73 
Àn
 +
	`•rötf
–
buf
+Àn, " mm->pgd=%∞", 
tsk
->
mm
->
pgd
 );

74 
Àn
 +
	`•rötf
–
buf
+Àn, " mm->m≠_cou¡=%d ", 
tsk
->
mm
->
m≠_cou¡
 );

75 
Àn
 +
	`•rötf
–
buf
+len, "\n\n" );

77  
Àn
;

78 
	}
}

80 
	$öô_moduÀ
( )

82 
	`¥ötk
–"<1>\nIn°Ælög \'%s\' moduÀ\n", 
mod«me
 );

84 
vma_öfo
 = 
	`¸óã_¥oc_íåy
–
mod«me
, 0, 
NULL
 );

87 
vma_öfo
->
ªad_¥oc
 = 
my_gë_öfo
;

91 
	}
}

94 
	$˛ónup_moduÀ
( )

96 
	`ªmove_¥oc_íåy
–
mod«me
, 
NULL
 );

97 
	`¥ötk
–"<1>Removög \'%s\' moduÀ\n", 
mod«me
 );

98 
	}
}

100 
MODULE_LICENSE
("GPL");

	@kern-prog/modules/depmod.c

6 #i‚de‡
MODULE


7 
	#MODULE


	)

9 #i‚de‡
__KERNEL__


10 
	#__KERNEL__


	)

13 
	~<löux/moduÀ.h
>

14 
	~<löux/vîsi⁄.h
>

15 
	~<löux/kî√l.h
>

16 
	~<löux/öô.h
>

18 
func
();

20 
__öô
 
	$myöô
()

22 
	`¥ötk
(" Calling Kernel symbol \n ");

23 
	`func
();

25 
	}
}

27 
__exô
 
	$myexô
()

29 
	`¥ötk
(" cleanup invoked \n");

30 
	}
}

31 
moduÀ_öô
(
myöô
);

32 
moduÀ_exô
(
myexô
);

35 
MODULE_AUTHOR
("TEAM VEDA");

36 
MODULE_DESCRIPTION
("DEP MODULE");

37 
MODULE_LICENSE
("GPL");

	@kern-prog/modules/mod.c

6 
	~<löux/moduÀ.h
>

7 
	~<löux/vîsi⁄.h
>

8 
	~<löux/kî√l.h
>

9 
	~<löux/öô.h
>

11 
func
();

13 
	gvÆ
=300;

15 
	$func
()

17 
	`¥ötk
("func invoked\n ");

18 
	`¥ötk
(" vÆ = %d",
vÆ
);

19 
	}
}

21 
	$öô_mod
()

23 
	`¥ötk
("module inserted\n ");

25 
	}
}

27 
	$˛ónup_mod
()

29 
	`¥ötk
("moduleÑemoved\n ");

30 
	}
}

32 
moduÀ_öô
(
öô_mod
);

33 
moduÀ_exô
(
˛ónup_mod
);

36 
MODULE_AUTHOR
("TEAM VEDA");

37 
MODULE_DESCRIPTION
("FIRST MODULE");

38 
MODULE_LICENSE
("GPL");

	@kern-prog/modules/mod1.c

7 
	~<löux/moduÀ.h
>

8 
	~<löux/vîsi⁄.h
>

9 
	~<löux/kî√l.h
>

10 
	~<löux/öô.h
>

12 
func
();

15 
EXPORT_SYMBOL_GPL
(
func
);

17 
	gvÆ
=300;

19 
	$func
()

21 
	`¥ötk
("func invoked\n ");

22 
	`¥ötk
(" vÆ = %d",
vÆ
);

23 
	}
}

25 
	$myöô
()

27 
	`¥ötk
("module inserted\n ");

29 
	}
}

31 
	$myexô
()

33 
	`¥ötk
("moduleÑemoved\n ");

34 
	}
}

36 
moduÀ_öô
(
myöô
);

37 
moduÀ_exô
(
myexô
);

40 
MODULE_AUTHOR
("TEAM VEDA");

41 
MODULE_DESCRIPTION
("FIRST MODULE");

42 
MODULE_LICENSE
("GPL");

	@kern-prog/modules/mod2.c

7 #i‚de‡
MODULE


8 
	#MODULE


	)

10 #i‚de‡
__KERNEL__


11 
	#__KERNEL__


	)

14 
	~<löux/moduÀ.h
>

15 
	~<löux/kî√l.h
>

16 
	~<löux/öô.h
>

19 
MODULE_AUTHOR
("TEAM VEDA");

20 
MODULE_DESCRIPTION
("FIRST MODULE");

21 
MODULE_LICENSE
("GPL");

23 
func
();

25 
EXPORT_SYMBOL
(
func
);

27 
	gvÆ
=300;

29 
	$func
()

31 
	`¥ötk
("func invoked\n ");

32 
	`¥ötk
(" vÆ = %d",
vÆ
);

33 
	}
}

35 
	$func1
()

37 
	`¥ötk
("<6> func 1 invoked\n");

38 
	}
}

40 
	$myöô
()

42 
	`¥ötk
("<5> module inserted\n ");

44 
	}
}

46 
	$myexô
()

48 
	`¥ötk
("<4> moduleÑemoved\n ");

49 
	}
}

51 
moduÀ_öô
(
myöô
);

52 
moduÀ_exô
(
myexô
);

56 
MODULE_AUTHOR
("TEAM VEDA");

57 
MODULE_DESCRIPTION
("FIRST MODULE");

58 
MODULE_LICENSE
("GPLándádditionalÑights");

	@kern-prog/modules/mod3.c

7 #i‚de‡
MODULE


8 
	#MODULE


	)

10 #i‚de‡
__KERNEL__


11 
	#__KERNEL__


	)

15 
	~<löux/moduÀ.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/öô.h
>

18 
	~<löux/°©.h
>

19 
	~<löux/moduÀ∑øm.h
>

21 
	gvÆ
=0;

23 
moduÀ_∑øm
(
vÆ
,,
S_IRUGO
);

25 
MODULE_PARM_DESC
(
vÆ
, "INTIALISE ME AT INSERTION TIME");

26 
MODULE_SUPPORTED_DEVICE
("NULL");

27 
func
();

28 
func1
();

30 
	$func
()

32 
	`¥ötk
("func invoked\n ");

33 
	`¥ötk
(" vÆ = %d",
vÆ
);

34 
	}
}

36 
	$func1
()

38 
	`¥ötk
(" func 1 invoked\n");

39 
	}
}

41 
	$myöô
()

43 
	`¥ötk
(" module inserted\n ");

44 
	`func
();

46 
	}
}

48 
	$myexô
()

50 
	`¥ötk
(" moduleÑemoved\n ");

51 
	}
}

53 
moduÀ_öô
(
myöô
);

54 
moduÀ_exô
(
myexô
);

57 
MODULE_AUTHOR
("TEAM VEDA");

58 
MODULE_DESCRIPTION
("FIRST MODULE");

59 
MODULE_LICENSE
("DUAL BSD/GPL");

	@kern-prog/proc/procfs_example.c

47 
	~<löux/moduÀ.h
>

48 
	~<löux/kî√l.h
>

49 
	~<löux/öô.h
>

50 
	~<löux/¥oc_fs.h
>

51 
	~<löux/jiffõs.h
>

52 
	~<asm/uac˚ss.h
>

54 
MODULE_DESCRIPTION
("procfsÉxample");

55 
MODULE_LICENSE
("GPL");

57 
	#MODULE_VERS
 "1.0"

	)

58 
	#MODULE_NAME
 "¥ocfs_exam∂e"

	)

60 
	#FOOBAR_LEN
 8

	)

62 
	sfb_d©a_t
 {

63 
	m«me
[
FOOBAR_LEN
 + 1];

64 
	mvÆue
[
FOOBAR_LEN
 + 1];

68 
¥oc_dú_íåy
 *
	gexam∂e_dú
, *
	gfoo_fûe
,

69 *
	gb¨_fûe
, *
	gjiffõs_fûe
, *
	gsymlök
;

72 
fb_d©a_t
 
	gfoo_d©a
, 
	gb¨_d©a
;

75 
	$¥oc_ªad_jiffõs
(*
∑ge
, **
°¨t
,

76 
off_t
 
off
, 
cou¡
,

77 *
eof
, *
d©a
)

79 
Àn
;

81 
Àn
 = 
	`•rötf
(
∑ge
, "jiffies = %ld\n",

82 
jiffõs
);

84  
Àn
;

85 
	}
}

88 
	$¥oc_ªad_foob¨
(*
∑ge
, **
°¨t
,

89 
off_t
 
off
, 
cou¡
,

90 *
eof
, *
d©a
)

92 
Àn
;

93 
fb_d©a_t
 *
fb_d©a
 = (fb_d©a_à*)
d©a
;

96 
Àn
 = 
	`•rötf
(
∑ge
, "%s = '%s'\n",

97 
fb_d©a
->
«me
, fb_d©a->
vÆue
);

99  
Àn
;

100 
	}
}

103 
	$¥oc_wrôe_foob¨
(
fûe
 *file,

104 c⁄° *
buf„r
,

105 
cou¡
,

106 *
d©a
)

108 
Àn
;

109 
fb_d©a_t
 *
fb_d©a
 = (fb_d©a_à*)
d©a
;

111 if(
cou¡
 > 
FOOBAR_LEN
)

112 
Àn
 = 
FOOBAR_LEN
;

114 
Àn
 = 
cou¡
;

116 if(
	`c›y_‰om_u£r
(
fb_d©a
->
vÆue
, 
buf„r
, 
Àn
))

117  -
EFAULT
;

119 
fb_d©a
->
vÆue
[
Àn
] = '\0';

121  
Àn
;

122 
	}
}

125 
__öô
 
	$öô_¥ocfs_exam∂e
()

127 
rv
 = 0;

130 
exam∂e_dú
 = 
	`¥oc_mkdú
(
MODULE_NAME
, 
NULL
);

131 if(
exam∂e_dú
 =
NULL
) {

132 
rv
 = -
ENOMEM
;

133 
out
;

139 
jiffõs_fûe
 = 
	`¸óã_¥oc_ªad_íåy
("jiffies",

140 0444, 
exam∂e_dú
,

141 
¥oc_ªad_jiffõs
,

142 
NULL
);

143 if(
jiffõs_fûe
 =
NULL
) {

144 
rv
 = -
ENOMEM
;

145 
no_jiffõs
;

153 
foo_fûe
 = 
	`¸óã_¥oc_íåy
("foo", 0644, 
exam∂e_dú
);

154 if(
foo_fûe
 =
NULL
) {

155 
rv
 = -
ENOMEM
;

156 
no_foo
;

159 
	`°r˝y
(
foo_d©a
.
«me
, "foo");

160 
	`°r˝y
(
foo_d©a
.
vÆue
, "foo");

161 
foo_fûe
->
d©a
 = &
foo_d©a
;

162 
foo_fûe
->
ªad_¥oc
 = 
¥oc_ªad_foob¨
;

163 
foo_fûe
->
wrôe_¥oc
 = 
¥oc_wrôe_foob¨
;

166 
b¨_fûe
 = 
	`¸óã_¥oc_íåy
("b¨", 0644, 
exam∂e_dú
);

167 if(
b¨_fûe
 =
NULL
) {

168 
rv
 = -
ENOMEM
;

169 
no_b¨
;

172 
	`°r˝y
(
b¨_d©a
.
«me
, "bar");

173 
	`°r˝y
(
b¨_d©a
.
vÆue
, "bar");

174 
b¨_fûe
->
d©a
 = &
b¨_d©a
;

175 
b¨_fûe
->
ªad_¥oc
 = 
¥oc_ªad_foob¨
;

176 
b¨_fûe
->
wrôe_¥oc
 = 
¥oc_wrôe_foob¨
;

180 
symlök
 = 
	`¥oc_symlök
("jiffõs_too", 
exam∂e_dú
,

182 if(
symlök
 =
NULL
) {

183 
rv
 = -
ENOMEM
;

184 
no_symlök
;

190 
	`¥ötk
(
KERN_INFO
 "%s %s initialised\n",

191 
MODULE_NAME
, 
MODULE_VERS
);

194 
no_symlök
:

195 
	`ªmove_¥oc_íåy
("ây", 
exam∂e_dú
);

196 
no_ây
:

197 
	`ªmove_¥oc_íåy
("b¨", 
exam∂e_dú
);

198 
no_b¨
:

199 
	`ªmove_¥oc_íåy
("foo", 
exam∂e_dú
);

200 
no_foo
:

201 
	`ªmove_¥oc_íåy
("jiffõs", 
exam∂e_dú
);

202 
no_jiffõs
:

203 
	`ªmove_¥oc_íåy
(
MODULE_NAME
, 
NULL
);

204 
out
:

205  
rv
;

206 
	}
}

209 
__exô
 
	$˛ónup_¥ocfs_exam∂e
()

211 
	`ªmove_¥oc_íåy
("jiffõs_too", 
exam∂e_dú
);

212 
	`ªmove_¥oc_íåy
("ây", 
exam∂e_dú
);

213 
	`ªmove_¥oc_íåy
("b¨", 
exam∂e_dú
);

214 
	`ªmove_¥oc_íåy
("foo", 
exam∂e_dú
);

215 
	`ªmove_¥oc_íåy
("jiffõs", 
exam∂e_dú
);

216 
	`ªmove_¥oc_íåy
(
MODULE_NAME
, 
NULL
);

218 
	`¥ötk
(
KERN_INFO
 "%s %sÑemoved\n",

219 
MODULE_NAME
, 
MODULE_VERS
);

220 
	}
}

223 
moduÀ_öô
(
öô_¥ocfs_exam∂e
);

224 
moduÀ_exô
(
˛ónup_¥ocfs_exam∂e
);

227 
MODULE_AUTHOR
("Erik Mouw");

228 
MODULE_DESCRIPTION
("procfsÉxamples");

	@kern-prog/proc/seq.c

6 
	~<löux/öô.h
>

7 
	~<löux/moduÀ.h
>

8 
	~<löux/¥oc_fs.h
>

9 
	~<löux/fs.h
>

10 
	~<löux/£q_fûe.h
>

11 
	~<löux/¶ab.h
>

14 
MODULE_AUTHOR
("Jonathan Corbet");

15 
MODULE_LICENSE
("Dual BSD/GPL");

23 *
	$˘_£q_°¨t
(
£q_fûe
 *
s
, 
loff_t
 *
pos
)

25 
loff_t
 *
•os
 = 
	`kmÆloc
(÷off_t), 
GFP_KERNEL
);

26 i‡(!
•os
)

27  
NULL
;

28 *
•os
 = *
pos
;

29  
•os
;

30 
	}
}

32 *
	$˘_£q_√xt
(
£q_fûe
 *
s
, *
v
, 
loff_t
 *
pos
)

34 
loff_t
 *
•os
 = (loff_à*Ë
v
;

35 *
pos
 = ++(*
•os
);

36  
•os
;

37 
	}
}

39 
	$˘_£q_°›
(
£q_fûe
 *
s
, *
v
)

41 
	`k‰ì
 (
v
);

42 
	}
}

47 
	$˘_£q_show
(
£q_fûe
 *
s
, *
v
)

49 
loff_t
 *
•os
 = (loff_à*Ë
v
;

50 
	`£q_¥ötf
(
s
, "%Ld\n", *
•os
);

52 
	}
}

57 
£q_›î©i⁄s
 
	g˘_£q_›s
 = {

58 .
°¨t
 = 
˘_£q_°¨t
,

59 .
	g√xt
 = 
˘_£q_√xt
,

60 .
	g°›
 = 
˘_£q_°›
,

61 .
	gshow
 = 
˘_£q_show


70 
	$˘_›í
(
öode
 *öode, 
fûe
 *file)

72  
	`£q_›í
(
fûe
, &
˘_£q_›s
);

73 
	}
};

79 
fûe_›î©i⁄s
 
	g˘_fûe_›s
 = {

80 .
ow√r
 = 
THIS_MODULE
,

81 .
	g›í
 = 
˘_›í
,

82 .
	gªad
 = 
£q_ªad
,

83 .
	gŒ£ek
 = 
£q_l£ek
,

84 .
	gªÀa£
 = 
£q_ªÀa£


92 
	$˘_öô
()

94 
¥oc_dú_íåy
 *
íåy
;

96 
íåy
 = 
	`¸óã_¥oc_íåy
("£quí˚", 0, 
NULL
);

97 i‡(
íåy
)

98 
íåy
->
¥oc_f›s
 = &
˘_fûe_›s
;

100 
	}
}

102 
	$˘_exô
()

104 
	`ªmove_¥oc_íåy
("£quí˚", 
NULL
);

105 
	}
}

107 
moduÀ_öô
(
˘_öô
);

108 
moduÀ_exô
(
˘_exô
);

	@kern-prog/proc/simfs.c

6 
	~<löux/moduÀ.h
>

7 
	~<löux/kî√l.h
>

8 
	~<löux/öô.h
>

9 
	~<löux/fs.h
>

10 
	~<asm/uac˚ss.h
>

14 
fûe_sy°em_ty≥
 
	gsimfs
={

15 .
ow√r
 = 
THIS_MODULE
,

16 .
	g«me
 = "simfs"

17 .
gësb
 = 
simfs_gë_su≥r
,

18 .
	gkûl_sb

kûl_lôãr_su≥r
,

22 
__öô
 
	$simfs_öô
()

24  
	`ªgi°î_fûesy°em
(&
simfs
);

25 
	}
}

27 
__exô
 
	$simfs_exô
()

29 
	`uƒegi°î_fûesy°em
(&
simfs
);

30 
	}
}

	@kern-prog/proc/simpfs.c

12 
	~<löux/kî√l.h
>

13 
	~<löux/öô.h
>

14 
	~<löux/moduÀ.h
>

15 
	~<löux/∑gem≠.h
>

16 
	~<löux/fs.h
>

17 
	~<asm/©omic.h
>

18 
	~<asm/uac˚ss.h
>

23 
MODULE_LICENSE
("GPL");

26 
	#sfs_MAGIC
 0x19980122

	)

36 
öode
 *
	$sfs_make_öode
(
su≥r_block
 *
sb
, 
mode
)

38 
öode
 *
ªt
 = 
	`√w_öode
(
sb
);

40 i‡(
ªt
) {

41 
ªt
->
i_mode
 = 
mode
;

42 
ªt
->
i_uid
 =Ñë->
i_gid
 = 0;

44 
ªt
->
i_blocks
 = 0;

45 
ªt
->
i_©ime
 =Ñë->
i_mtime
 =Ñë->
i_˘ime
 = 
CURRENT_TIME
;

47  
ªt
;

48 
	}
}

59 
	$sfs_›í
(
öode
 *öode, 
fûe
 *
fûp
)

63 
	}
}

65 
	#TMPSIZE
 20

	)

72 
ssize_t
 
	$sfs_ªad_fûe
(
fûe
 *
fûp
, *
buf
,

73 
size_t
 
cou¡
, 
loff_t
 *
off£t
)

75 
©omic_t
 *
cou¡î
 = (©omic_à*Ë
fûp
->
¥iv©e_d©a
;

76 
v
, 
Àn
;

77 
tmp
[
TMPSIZE
];

81 
v
 = 
	`©omic_ªad
(
cou¡î
);

82 i‡(*
off£t
 > 0)

83 
v
 -= 1;

85 
	`©omic_öc
(
cou¡î
);

86 
Àn
 = 
	`¢¥ötf
(
tmp
, 
TMPSIZE
, "%d\n", 
v
);

87 i‡(*
off£t
 > 
Àn
)

89 i‡(
cou¡
 > 
Àn
 - *
off£t
)

90 
cou¡
 = 
Àn
 - *
off£t
;

94 i‡(
	`c›y_to_u£r
(
buf
, 
tmp
 + *
off£t
, 
cou¡
))

95  -
EFAULT
;

96 *
off£t
 +
cou¡
;

97  
cou¡
;

98 
	}
}

103 
ssize_t
 
	$sfs_wrôe_fûe
(
fûe
 *
fûp
, c⁄° *
buf
,

104 
size_t
 
cou¡
, 
loff_t
 *
off£t
)

106 
©omic_t
 *
cou¡î
 = (©omic_à*Ë
fûp
->
¥iv©e_d©a
;

107 
tmp
[
TMPSIZE
];

111 i‡(*
off£t
 != 0)

112  -
EINVAL
;

116 i‡(
cou¡
 >
TMPSIZE
)

117  -
EINVAL
;

118 
	`mem£t
(
tmp
, 0, 
TMPSIZE
);

119 i‡(
	`c›y_‰om_u£r
(
tmp
, 
buf
, 
cou¡
))

120  -
EFAULT
;

124 
	`©omic_£t
(
cou¡î
, 
	`sim∂e_°πﬁ
(
tmp
, 
NULL
, 10));

125  
cou¡
;

126 
	}
}

132 
fûe_›î©i⁄s
 
	gsfs_fûe_›s
 = {

133 .
›í
 = 
sfs_›í
,

134 .
	gªad
 = 
sfs_ªad_fûe
,

135 .
	gwrôe
 = 
sfs_wrôe_fûe
,

142 
díåy
 *
	$sfs_¸óã_fûe
 (
su≥r_block
 *
sb
,

143 
díåy
 *
dú
, c⁄° *
«me
,

144 
©omic_t
 *
cou¡î
)

146 
díåy
 *dentry;

147 
öode
 *inode;

148 
q°r
 
q«me
;

152 
q«me
.
«me
 =Çame;

153 
q«me
.
Àn
 = 
	`°æí
 (
«me
);

154 
q«me
.
hash
 = 
	`fuŒ_«me_hash
(
«me
, q«me.
Àn
);

158 
díåy
 = 
	`d_Æloc
(
dú
, &
q«me
);

159 i‡(! 
díåy
)

160 
out
;

161 
öode
 = 
	`sfs_make_öode
(
sb
, 
S_IFREG
 | 0644);

162 i‡(! 
öode
)

163 
out_dput
;

164 
öode
->
i_f›
 = &
sfs_fûe_›s
;

169 
	`d_add
(
díåy
, 
öode
);

170  
díåy
;

174 
out_dput
:

175 
	`dput
(
díåy
);

176 
out
:

178 
	}
}

186 
díåy
 *
	$sfs_¸óã_dú
 (
su≥r_block
 *
sb
,

187 
díåy
 *
∑ª¡
, c⁄° *
«me
)

189 
díåy
 *dentry;

190 
öode
 *inode;

191 
q°r
 
q«me
;

193 
q«me
.
«me
 =Çame;

194 
q«me
.
Àn
 = 
	`°æí
 (
«me
);

195 
q«me
.
hash
 = 
	`fuŒ_«me_hash
(
«me
, q«me.
Àn
);

196 
díåy
 = 
	`d_Æloc
(
∑ª¡
, &
q«me
);

197 i‡(! 
díåy
)

198 
out
;

200 
öode
 = 
	`sfs_make_öode
(
sb
, 
S_IFDIR
 | 0644);

201 i‡(! 
öode
)

202 
out_dput
;

203 
öode
->
i_›
 = &
sim∂e_dú_öode_›î©i⁄s
;

204 
öode
->
i_f›
 = &
sim∂e_dú_›î©i⁄s
;

206 
	`d_add
(
díåy
, 
öode
);

207  
díåy
;

209 
out_dput
:

210 
	`dput
(
díåy
);

211 
out
:

213 
	}
}

220 
©omic_t
 
	gcou¡î
, 
	gsubcou¡î
;

222 
	$sfs_¸óã_fûes
 (
su≥r_block
 *
sb
, 
díåy
 *
roŸ
)

224 
díåy
 *
subdú
;

228 
	`©omic_£t
(&
cou¡î
, 0);

229 
	`sfs_¸óã_fûe
(
sb
, 
roŸ
, "cou¡î", &
cou¡î
);

233 
	`©omic_£t
(&
subcou¡î
, 0);

234 
subdú
 = 
	`sfs_¸óã_dú
(
sb
, 
roŸ
, "subdir");

235 i‡(
subdú
)

236 
	`sfs_¸óã_fûe
(
sb
, 
subdú
, "subcou¡î", &
subcou¡î
);

237 
	}
}

250 
su≥r_›î©i⁄s
 
	gsfs_s_›s
 = {

251 .
°©fs
 = 
sim∂e_°©fs
,

252 .
	gdr›_öode
 = 
gíîic_dñëe_öode
,

258 
	$sfs_fûl_su≥r
 (
su≥r_block
 *
sb
, *
d©a
, 
sûít
)

260 
öode
 *
roŸ
;

261 
díåy
 *
roŸ_díåy
;

265 
sb
->
s_blocksize
 = 
PAGE_CACHE_SIZE
;

266 
sb
->
s_blocksize_bôs
 = 
PAGE_CACHE_SHIFT
;

267 
sb
->
s_magic
 = 
sfs_MAGIC
;

268 
sb
->
s_›
 = &
sfs_s_›s
;

275 
roŸ
 = 
	`sfs_make_öode
 (
sb
, 
S_IFDIR
 | 0755);

276 i‡(! 
roŸ
)

277 
out
;

278 
roŸ
->
i_›
 = &
sim∂e_dú_öode_›î©i⁄s
;

279 
roŸ
->
i_f›
 = &
sim∂e_dú_›î©i⁄s
;

283 
roŸ_díåy
 = 
	`d_Æloc_roŸ
(
roŸ
);

284 i‡(! 
roŸ_díåy
)

285 
out_ùut
;

286 
sb
->
s_roŸ
 = 
roŸ_díåy
;

290 
	`sfs_¸óã_fûes
 (
sb
, 
roŸ_díåy
);

293 
out_ùut
:

294 
	`ùut
(
roŸ
);

295 
out
:

296  -
ENOMEM
;

297 
	}
}

303 
su≥r_block
 *
	$sfs_gë_su≥r
(
fûe_sy°em_ty≥
 *
f°
,

304 
Êags
, c⁄° *
dev«me
, *
d©a
)

306 
vfsmou¡
 *
m¡
;

307  (
su≥r_block
 *)
	`gë_sb_sögÀ
(
f°
, 
Êags
, 
d©a
, 
sfs_fûl_su≥r
,
m¡
);

308 
	}
}

310 
fûe_sy°em_ty≥
 
	gsfs_ty≥
 = {

311 .
ow√r
 = 
THIS_MODULE
,

312 .
	g«me
 = "sfs",

313 .
	ggë_sb
 = 
sfs_gë_su≥r
,

314 .
	gkûl_sb
 = 
kûl_lôãr_su≥r
,

323 
__öô
 
	$sfs_öô
()

325  
	`ªgi°î_fûesy°em
(&
sfs_ty≥
);

326 
	}
}

328 
__exô
 
	$sfs_exô
()

330 
	`uƒegi°î_fûesy°em
(&
sfs_ty≥
);

331 
	`¥ötk
("\n Module Removed");

332 
	}
}

334 
moduÀ_öô
(
sfs_öô
);

335 
moduÀ_exô
(
sfs_exô
);

	@kern-prog/proc/simple_proc.c

5 #i‚de‡ 
__KERNEL__


6 
	#__KERNEL__


	)

9 #i‚de‡ 
MODULE


10 
	#MODULE


	)

14 
	~<löux/kî√l.h
>

15 
	~<löux/öô.h
>

16 
	~<löux/moduÀ.h
>

17 
	~<löux/¥oc_fs.h
>

18 
	~<löux/πc.h
>

20 
MODULE_DESCRIPTION
("simpleÖrocÉxample");

21 
MODULE_LICENSE
("GPL");

23 
¥oc_dú_íåy
 *
	g¥oc_hπime
,*
	g¥oc_roŸ
;

25 
gë_cmos_time
();

27 
	$dump_°uff
(*
∑ge
,**
°¨t
, 
off_t
 
off
, 
cou¡
,*
eof
, *
d©a
)

29 
size
 = 0;

30 
	`¥ötk
("inÑead callback");

32 
size
+=
	`•rötf
(
∑ge
+size,"HR-Time:%Œu\n",()
	`gë_cmos_time
());

34 (
size
);

35 
	}
}

37 
	$¥oc_moduÀ
()

40 
¥oc_hπime
 = 
	`¸óã_¥oc_íåy
("hπime", 0, 
¥oc_roŸ
);

43 
¥oc_hπime
->
ªad_¥oc
 = 
dump_°uff
;

46 
	}
}

49 
	$¥oc_exô
()

52 
	`ªmove_¥oc_íåy
("hπime", 
¥oc_roŸ
);

53 
	`¥ötk
("\n OUT OF HERE\n");

54 
	}
}

56 
moduÀ_öô
(
¥oc_moduÀ
);

57 
moduÀ_exô
(
¥oc_exô
);

	@tst-work-queue.c

12 #i‚de‡
__KERNEL__


13 
	#__KERNEL__


	)

16 #i‚de‡
MODULE


17 
	#MODULE


	)

22 
	~<löux/kî√l.h
>

23 
	~<löux/öô.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/w‹kqueue.h
>

26 
	~<löux/sched.h
>

28 
	#DELAY
 100

	)

29 
wq_öô
();

30 
wq_exô
();

31 
wq_func
(*);

34 
MODULE_LICENSE
("GPL");

35 
moduÀ_öô
(
wq_öô
);

36 
moduÀ_exô
(
wq_exô
);

38 
	gcou¡î
;

40 
DECLARE_WORK
(
wq
,(
w‹k_func_t
)
wq_func
);

43 
	$wq_func
(*
¨g
)

45 
	`¥ötk
("%ld %d %†\n", 
jiffõs
,
cou¡î
++,
cuºít
->
comm
);

46 if–
cou¡î
 < 1000 )

47 
	`scheduÀ_w‹k
(&
wq
);

48 
	}
}

50 
	$wq_öô
()

52 
	`¥ötk
("\nModule Inserted\n");

54 
	`scheduÀ_w‹k
(&
wq
);

57 
	`¥ötk
("cuºíàcou¡î %ld\n",
jiffõs
);

59 
	`¥ötk
("cuºíàcou¡î %ld\n",
jiffõs
);

61 
	}
}

63 
	$wq_exô
()

65 
	`¥ötk
("\nModule Removed");

66 
	}
}

	@/usr/include/aio.h

23 #i‚de‡
_AIO_H


24 
	#_AIO_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<f˙é.h
>

28 
	~<sig«l.h
>

29 
	~<time.h
>

30 
	~<sys/ty≥s.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__unu£d
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__unu£d
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (
__c⁄°
 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (
__c⁄°
 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (
__c⁄°
 
aiocb
 *__c⁄° 
__li°
[], 
__√¡
,

170 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (
__c⁄°
 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (
__c⁄°
 
aiocb
 *__c⁄° 
__li°
[], 
__√¡
,

201 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (
__c⁄°
 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (
__c⁄°
 
aiocb64
 *__c⁄° 
__li°
[], 
__√¡
,

237 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/msr.h

1 #i‚de‡
_ASM_X86_MSR_H


2 
	#_ASM_X86_MSR_H


	)

4 
	~<asm/m§-ödex.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/ty≥s.h
>

9 
	~<löux/io˘l.h
>

11 
	#X86_IOC_RDMSR_REGS
 
	`_IOWR
('c', 0xA0, 
__u32
[8])

	)

12 
	#X86_IOC_WRMSR_REGS
 
	`_IOWR
('c', 0xA1, 
__u32
[8])

	)

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

64 
f˙é
 (
__fd
, 
__cmd
, ...);

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__REDIRECT


76 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

77 
	`__n⁄nuŒ
 ((1));

79 
	#›í
 
›í64


	)

82 #ifde‡
__USE_LARGEFILE64


83 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

86 #ifde‡
__USE_ATFILE


96 #i‚de‡
__USE_FILE_OFFSET64


97 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

98 
	`__n⁄nuŒ
 ((2));

100 #ifde‡
__REDIRECT


101 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

102 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

104 
	#›í©
 
›í©64


	)

108 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

109 
	`__n⁄nuŒ
 ((2));

117 #i‚de‡
__USE_FILE_OFFSET64


118 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

120 #ifde‡
__REDIRECT


121 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

122 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

124 
	#¸ót
 
¸ót64


	)

127 #ifde‡
__USE_LARGEFILE64


128 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

131 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

132 && !
deföed
 
__USE_POSIX
))

141 
	#F_ULOCK
 0

	)

142 
	#F_LOCK
 1

	)

143 
	#F_TLOCK
 2

	)

144 
	#F_TEST
 3

	)

146 #i‚de‡
__USE_FILE_OFFSET64


147 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

149 #ifde‡
__REDIRECT


150 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

152 
	#lockf
 
lockf64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

160 #ifde‡
__USE_XOPEN2K


163 #i‚de‡
__USE_FILE_OFFSET64


164 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

165 
__advi£
Ë
__THROW
;

167 #ifde‡
__REDIRECT_NTH


168 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

169 
__off64_t
 
__Àn
, 
__advi£
),

170 
posix_Ádvi£64
);

172 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

175 #ifde‡
__USE_LARGEFILE64


176 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

177 
__advi£
Ë
__THROW
;

185 #i‚de‡
__USE_FILE_OFFSET64


186 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

190 
__off64_t
 
__Àn
),

191 
posix_ÁŒoˇã64
);

193 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

196 #ifde‡
__USE_LARGEFILE64


197 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

203 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

204 && 
deföed
 
__va_¨g_∑ck_Àn


205 
	~<bôs/f˙é2.h
>

208 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/blkpg.h

1 #i‚de‡
_LINUX_BLKPG_H


2 
	#_LINUX_BLKPG_H


	)

28 
	~<löux/io˘l.h
>

30 
	#BLKPG
 
	`_IO
(0x12,105)

	)

33 
	sblkpg_io˘l_¨g
 {

34 
	m›
;

35 
	mÊags
;

36 
	md©Æí
;

37 *
	md©a
;

41 
	#BLKPG_ADD_PARTITION
 1

	)

42 
	#BLKPG_DEL_PARTITION
 2

	)

45 
	#BLKPG_DEVNAMELTH
 64

	)

46 
	#BLKPG_VOLNAMELTH
 64

	)

49 
	sblkpg_∑πôi⁄
 {

50 
	m°¨t
;

51 
	mÀngth
;

52 
	m≤o
;

53 
	mdev«me
[
BLKPG_DEVNAMELTH
];

55 
	mvﬁ«me
[
BLKPG_VOLNAMELTH
];

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/ethtool.h

13 #i‚de‡
_LINUX_ETHTOOL_H


14 
	#_LINUX_ETHTOOL_H


	)

16 
	~<löux/ty≥s.h
>

19 
	sëhtoﬁ_cmd
 {

20 
__u32
 
	mcmd
;

21 
__u32
 
	msuµ‹ãd
;

22 
__u32
 
	madvîtisög
;

23 
__u16
 
	m•ìd
;

24 
__u8
 
	mdu∂ex
;

25 
__u8
 
	mp‹t
;

26 
__u8
 
	mphy_addªss
;

27 
__u8
 
	må™s˚ivî
;

28 
__u8
 
	maut⁄eg
;

29 
__u8
 
	mmdio_suµ‹t
;

30 
__u32
 
	mmaxtxpkt
;

31 
__u32
 
	mmaxrxpkt
;

32 
__u16
 
	m•ìd_hi
;

33 
__u8
 
	mëh_ç_mdix
;

34 
__u8
 
	mª£rved2
;

35 
__u32
 
	mÕ_advîtisög
;

36 
__u32
 
	mª£rved
[2];

39 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

40 
__u32
 
•ìd
)

43 
ï
->
•ìd
 = (
__u16
)speed;

44 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

45 
	}
}

47 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(
ëhtoﬁ_cmd
 *
ï
)

49  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

50 
	}
}

52 
	#ETHTOOL_BUSINFO_LEN
 32

	)

54 
	sëhtoﬁ_drvöfo
 {

55 
__u32
 
	mcmd
;

56 
	mdrivî
[32];

57 
	mvîsi⁄
[32];

58 
	mfw_vîsi⁄
[32];

59 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

61 
	mª£rved1
[32];

62 
	mª£rved2
[12];

63 
__u32
 
	mn_¥iv_Êags
;

64 
__u32
 
	mn_°©s
;

65 
__u32
 
	mã°öfo_Àn
;

66 
__u32
 
	mìdump_Àn
;

67 
__u32
 
	mªgdump_Àn
;

70 
	#SOPASS_MAX
 6

	)

72 
	sëhtoﬁ_wﬁöfo
 {

73 
__u32
 
	mcmd
;

74 
__u32
 
	msuµ‹ãd
;

75 
__u32
 
	mwﬁ›ts
;

76 
__u8
 
	ms›ass
[
SOPASS_MAX
];

80 
	sëhtoﬁ_vÆue
 {

81 
__u32
 
	mcmd
;

82 
__u32
 
	md©a
;

86 
	sëhtoﬁ_ªgs
 {

87 
__u32
 
	mcmd
;

88 
__u32
 
	mvîsi⁄
;

89 
__u32
 
	mÀn
;

90 
__u8
 
	md©a
[0];

94 
	sëhtoﬁ_ì¥om
 {

95 
__u32
 
	mcmd
;

96 
__u32
 
	mmagic
;

97 
__u32
 
	moff£t
;

98 
__u32
 
	mÀn
;

99 
__u8
 
	md©a
[0];

103 
	sëhtoﬁ_cﬂÀs˚
 {

104 
__u32
 
	mcmd
;

110 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

118 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

125 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

126 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

132 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

140 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

147 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

148 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

155 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

164 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

165 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

171 
__u32
 
	mpkt_øã_low
;

172 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

173 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

174 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

175 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

186 
__u32
 
	mpkt_øã_high
;

187 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

188 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

189 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

190 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

195 
__u32
 
	møã_ßm∂e_öãrvÆ
;

199 
	sëhtoﬁ_rög∑øm
 {

200 
__u32
 
	mcmd
;

206 
__u32
 
	mrx_max_≥ndög
;

207 
__u32
 
	mrx_möi_max_≥ndög
;

208 
__u32
 
	mrx_jumbo_max_≥ndög
;

209 
__u32
 
	mtx_max_≥ndög
;

214 
__u32
 
	mrx_≥ndög
;

215 
__u32
 
	mrx_möi_≥ndög
;

216 
__u32
 
	mrx_jumbo_≥ndög
;

217 
__u32
 
	mtx_≥ndög
;

221 
	sëhtoﬁ_∑u£∑øm
 {

222 
__u32
 
	mcmd
;

234 
__u32
 
	maut⁄eg
;

235 
__u32
 
	mrx_∑u£
;

236 
__u32
 
	mtx_∑u£
;

239 
	#ETH_GSTRING_LEN
 32

	)

240 
	eëhtoﬁ_°rög£t
 {

241 
	mETH_SS_TEST
 = 0,

242 
	mETH_SS_STATS
,

243 
	mETH_SS_PRIV_FLAGS
,

247 
	sëhtoﬁ_g°rögs
 {

248 
__u32
 
	mcmd
;

249 
__u32
 
	m°rög_£t
;

250 
__u32
 
	mÀn
;

251 
__u8
 
	md©a
[0];

254 
	eëhtoﬁ_ã°_Êags
 {

255 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

256 
	mETH_TEST_FL_FAILED
 = (1 << 1),

260 
	sëhtoﬁ_ã°
 {

261 
__u32
 
	mcmd
;

262 
__u32
 
	mÊags
;

263 
__u32
 
	mª£rved
;

264 
__u32
 
	mÀn
;

265 
__u64
 
	md©a
[0];

269 
	sëhtoﬁ_°©s
 {

270 
__u32
 
	mcmd
;

271 
__u32
 
	mn_°©s
;

272 
__u64
 
	md©a
[0];

275 
	sëhtoﬁ_≥rm_addr
 {

276 
__u32
 
	mcmd
;

277 
__u32
 
	msize
;

278 
__u8
 
	md©a
[0];

290 
	eëhtoﬁ_Êags
 {

291 
	mETH_FLAG_LRO
 = (1 << 15),

299 
	sëhtoﬁ_t˝ù4_•ec
 {

300 
__be32
 
	mù4§c
;

301 
__be32
 
	mù4d°
;

302 
__be16
 
	mp§c
;

303 
__be16
 
	mpd°
;

304 
__u8
 
	mtos
;

307 
	sëhtoﬁ_ah_e•ù4_•ec
 {

308 
__be32
 
	mù4§c
;

309 
__be32
 
	mù4d°
;

310 
__be32
 
	m•i
;

311 
__u8
 
	mtos
;

314 
	sëhtoﬁ_øwù4_•ec
 {

315 
__be32
 
	mù4§c
;

316 
__be32
 
	mù4d°
;

317 
__u8
 
	mhd©a
[64];

320 
	sëhtoﬁ_ëhî_•ec
 {

321 
__be16
 
	mëhî_ty≥
;

322 
__u8
 
	m‰ame_size
;

323 
__u8
 
	me‰ame
[16];

326 
	#ETH_RX_NFC_IP4
 1

	)

327 
	#ETH_RX_NFC_IP6
 2

	)

329 
	sëhtoﬁ_u§ù4_•ec
 {

330 
__be32
 
	mù4§c
;

331 
__be32
 
	mù4d°
;

332 
__be32
 
	ml4_4_byãs
;

333 
__u8
 
	mtos
;

334 
__u8
 
	mù_vî
;

335 
__u8
 
	m¥Ÿo
;

338 
	sëhtoﬁ_rx_Êow_•ec
 {

339 
__u32
 
	mÊow_ty≥
;

341 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

342 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

343 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

344 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

345 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

346 
ëhtoﬁ_øwù4_•ec
 
	møw_ù4_•ec
;

347 
ëhtoﬁ_ëhî_•ec
 
	mëhî_•ec
;

348 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

349 
__u8
 
	mhd©a
[64];

350 } 
	mh_u
, 
	mm_u
;

351 
__u64
 
	mrög_cookõ
;

352 
__u32
 
	mloˇti⁄
;

355 
	sëhtoﬁ_rxnfc
 {

356 
__u32
 
	mcmd
;

357 
__u32
 
	mÊow_ty≥
;

359 
__u64
 
	md©a
;

360 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

361 
__u32
 
	mruÀ_˙t
;

362 
__u32
 
	mruÀ_locs
[0];

365 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

366 
	eëhtoﬁ_Êash_›_ty≥
 {

367 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

371 
	sëhtoﬁ_Êash
 {

372 
__u32
 
	mcmd
;

373 
__u32
 
	mªgi⁄
;

374 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

379 
	#ETHTOOL_GSET
 0x00000001

	)

380 
	#ETHTOOL_SSET
 0x00000002

	)

381 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

382 
	#ETHTOOL_GREGS
 0x00000004

	)

383 
	#ETHTOOL_GWOL
 0x00000005

	)

384 
	#ETHTOOL_SWOL
 0x00000006

	)

385 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

386 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

387 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

388 
	#ETHTOOL_GLINK
 0x0000000®

	)

389 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

390 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

391 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

392 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

393 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

394 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

395 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

396 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

397 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

398 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

399 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

400 
	#ETHTOOL_STXCSUM
 0x00000017

	)

401 
	#ETHTOOL_GSG
 0x00000018

	)

403 
	#ETHTOOL_SSG
 0x00000019

	)

405 
	#ETHTOOL_TEST
 0x0000001®

	)

406 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

407 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

408 
	#ETHTOOL_GSTATS
 0x0000001d

	)

409 
	#ETHTOOL_GTSO
 0x0000001ê

	)

410 
	#ETHTOOL_STSO
 0x0000001‡

	)

411 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

412 
	#ETHTOOL_GUFO
 0x00000021

	)

413 
	#ETHTOOL_SUFO
 0x00000022

	)

414 
	#ETHTOOL_GGSO
 0x00000023

	)

415 
	#ETHTOOL_SGSO
 0x00000024

	)

416 
	#ETHTOOL_GFLAGS
 0x00000025

	)

417 
	#ETHTOOL_SFLAGS
 0x00000026

	)

418 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

419 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

421 
	#ETHTOOL_GRXFH
 0x00000029

	)

422 
	#ETHTOOL_SRXFH
 0x0000002®

	)

423 
	#ETHTOOL_GGRO
 0x0000002b

	)

424 
	#ETHTOOL_SGRO
 0x0000002¯

	)

425 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

426 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

427 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

428 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

429 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

430 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

431 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

432 
	#ETHTOOL_RESET
 0x00000034

	)

435 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

436 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

439 
	#SUPPORTED_10ba£T_HÆf
 (1 << 0)

	)

440 
	#SUPPORTED_10ba£T_FuŒ
 (1 << 1)

	)

441 
	#SUPPORTED_100ba£T_HÆf
 (1 << 2)

	)

442 
	#SUPPORTED_100ba£T_FuŒ
 (1 << 3)

	)

443 
	#SUPPORTED_1000ba£T_HÆf
 (1 << 4)

	)

444 
	#SUPPORTED_1000ba£T_FuŒ
 (1 << 5)

	)

445 
	#SUPPORTED_Aut⁄eg
 (1 << 6)

	)

446 
	#SUPPORTED_TP
 (1 << 7)

	)

447 
	#SUPPORTED_AUI
 (1 << 8)

	)

448 
	#SUPPORTED_MII
 (1 << 9)

	)

449 
	#SUPPORTED_FIBRE
 (1 << 10)

	)

450 
	#SUPPORTED_BNC
 (1 << 11)

	)

451 
	#SUPPORTED_10000ba£T_FuŒ
 (1 << 12)

	)

452 
	#SUPPORTED_Pau£
 (1 << 13)

	)

453 
	#SUPPORTED_Asym_Pau£
 (1 << 14)

	)

454 
	#SUPPORTED_2500ba£X_FuŒ
 (1 << 15)

	)

455 
	#SUPPORTED_Back∂™e
 (1 << 16)

	)

456 
	#SUPPORTED_1000ba£KX_FuŒ
 (1 << 17)

	)

457 
	#SUPPORTED_10000ba£KX4_FuŒ
 (1 << 18)

	)

458 
	#SUPPORTED_10000ba£KR_FuŒ
 (1 << 19)

	)

459 
	#SUPPORTED_10000ba£R_FEC
 (1 << 20)

	)

462 
	#ADVERTISED_10ba£T_HÆf
 (1 << 0)

	)

463 
	#ADVERTISED_10ba£T_FuŒ
 (1 << 1)

	)

464 
	#ADVERTISED_100ba£T_HÆf
 (1 << 2)

	)

465 
	#ADVERTISED_100ba£T_FuŒ
 (1 << 3)

	)

466 
	#ADVERTISED_1000ba£T_HÆf
 (1 << 4)

	)

467 
	#ADVERTISED_1000ba£T_FuŒ
 (1 << 5)

	)

468 
	#ADVERTISED_Aut⁄eg
 (1 << 6)

	)

469 
	#ADVERTISED_TP
 (1 << 7)

	)

470 
	#ADVERTISED_AUI
 (1 << 8)

	)

471 
	#ADVERTISED_MII
 (1 << 9)

	)

472 
	#ADVERTISED_FIBRE
 (1 << 10)

	)

473 
	#ADVERTISED_BNC
 (1 << 11)

	)

474 
	#ADVERTISED_10000ba£T_FuŒ
 (1 << 12)

	)

475 
	#ADVERTISED_Pau£
 (1 << 13)

	)

476 
	#ADVERTISED_Asym_Pau£
 (1 << 14)

	)

477 
	#ADVERTISED_2500ba£X_FuŒ
 (1 << 15)

	)

478 
	#ADVERTISED_Back∂™e
 (1 << 16)

	)

479 
	#ADVERTISED_1000ba£KX_FuŒ
 (1 << 17)

	)

480 
	#ADVERTISED_10000ba£KX4_FuŒ
 (1 << 18)

	)

481 
	#ADVERTISED_10000ba£KR_FuŒ
 (1 << 19)

	)

482 
	#ADVERTISED_10000ba£R_FEC
 (1 << 20)

	)

491 
	#SPEED_10
 10

	)

492 
	#SPEED_100
 100

	)

493 
	#SPEED_1000
 1000

	)

494 
	#SPEED_2500
 2500

	)

495 
	#SPEED_10000
 10000

	)

498 
	#DUPLEX_HALF
 0x00

	)

499 
	#DUPLEX_FULL
 0x01

	)

502 
	#PORT_TP
 0x00

	)

503 
	#PORT_AUI
 0x01

	)

504 
	#PORT_MII
 0x02

	)

505 
	#PORT_FIBRE
 0x03

	)

506 
	#PORT_BNC
 0x04

	)

507 
	#PORT_OTHER
 0xff

	)

510 
	#XCVR_INTERNAL
 0x00

	)

511 
	#XCVR_EXTERNAL
 0x01

	)

512 
	#XCVR_DUMMY1
 0x02

	)

513 
	#XCVR_DUMMY2
 0x03

	)

514 
	#XCVR_DUMMY3
 0x04

	)

519 
	#AUTONEG_DISABLE
 0x00

	)

520 
	#AUTONEG_ENABLE
 0x01

	)

523 
	#ETH_TP_MDI_INVALID
 0x00

	)

524 
	#ETH_TP_MDI
 0x01

	)

525 
	#ETH_TP_MDI_X
 0x02

	)

528 
	#WAKE_PHY
 (1 << 0)

	)

529 
	#WAKE_UCAST
 (1 << 1)

	)

530 
	#WAKE_MCAST
 (1 << 2)

	)

531 
	#WAKE_BCAST
 (1 << 3)

	)

532 
	#WAKE_ARP
 (1 << 4)

	)

533 
	#WAKE_MAGIC
 (1 << 5)

	)

534 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

537 
	#TCP_V4_FLOW
 0x01

	)

538 
	#UDP_V4_FLOW
 0x02

	)

539 
	#SCTP_V4_FLOW
 0x03

	)

540 
	#AH_ESP_V4_FLOW
 0x04

	)

541 
	#TCP_V6_FLOW
 0x05

	)

542 
	#UDP_V6_FLOW
 0x06

	)

543 
	#SCTP_V6_FLOW
 0x07

	)

544 
	#AH_ESP_V6_FLOW
 0x08

	)

545 
	#AH_V4_FLOW
 0x09

	)

546 
	#ESP_V4_FLOW
 0x0a

	)

547 
	#AH_V6_FLOW
 0x0b

	)

548 
	#ESP_V6_FLOW
 0x0c

	)

549 
	#IP_USER_FLOW
 0x0d

	)

552 
	#RXH_L2DA
 (1 << 1)

	)

553 
	#RXH_VLAN
 (1 << 2)

	)

554 
	#RXH_L3_PROTO
 (1 << 3)

	)

555 
	#RXH_IP_SRC
 (1 << 4)

	)

556 
	#RXH_IP_DST
 (1 << 5)

	)

557 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

558 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

559 
	#RXH_DISCARD
 (1 << 31)

	)

561 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

570 
	eëhtoﬁ_ª£t_Êags
 {

576 
	mETH_RESET_MGMT
 = 1 << 0,

577 
	mETH_RESET_IRQ
 = 1 << 1,

578 
	mETH_RESET_DMA
 = 1 << 2,

579 
	mETH_RESET_FILTER
 = 1 << 3,

580 
	mETH_RESET_OFFLOAD
 = 1 << 4,

581 
	mETH_RESET_MAC
 = 1 << 5,

582 
	mETH_RESET_PHY
 = 1 << 6,

583 
	mETH_RESET_RAM
 = 1 << 7,

586 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

588 
	mETH_RESET_ALL
 = 0xffffffff,

591 
	#ETH_RESET_SHARED_SHIFT
 16

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

23 #unde‡
NR_OPEN


24 
	#INR_OPEN
 1024

	)

26 
	#BLOCK_SIZE_BITS
 10

	)

27 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

29 
	#SEEK_SET
 0

	)

30 
	#SEEK_CUR
 1

	)

31 
	#SEEK_END
 2

	)

32 
	#SEEK_MAX
 
SEEK_END


	)

35 
	sfûes_°©_°ru˘
 {

36 
	mƒ_fûes
;

37 
	mƒ_‰ì_fûes
;

38 
	mmax_fûes
;

41 
	söodes_°©_t
 {

42 
	mƒ_öodes
;

43 
	mƒ_unu£d
;

44 
	mdummy
[5];

48 
	#NR_FILE
 8192

	)

50 
	#MAY_EXEC
 1

	)

51 
	#MAY_WRITE
 2

	)

52 
	#MAY_READ
 4

	)

53 
	#MAY_APPEND
 8

	)

54 
	#MAY_ACCESS
 16

	)

55 
	#MAY_OPEN
 32

	)

63 
	#FMODE_READ
 ((
fmode_t
)1)

	)

65 
	#FMODE_WRITE
 ((
fmode_t
)2)

	)

67 
	#FMODE_LSEEK
 ((
fmode_t
)4)

	)

69 
	#FMODE_PREAD
 ((
fmode_t
)8)

	)

71 
	#FMODE_PWRITE
 ((
fmode_t
)16)

	)

73 
	#FMODE_EXEC
 ((
fmode_t
)32)

	)

75 
	#FMODE_NDELAY
 ((
fmode_t
)64)

	)

77 
	#FMODE_EXCL
 ((
fmode_t
)128)

	)

80 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)256)

	)

88 
	#FMODE_NOCMTIME
 ((
fmode_t
)2048)

	)

91 
	#FMODE_RANDOM
 ((
fmode_t
)4096)

	)

147 
	#RW_MASK
 1

	)

148 
	#RWA_MASK
 2

	)

149 
	#READ
 0

	)

150 
	#WRITE
 1

	)

151 
	#READA
 2

	)

152 
	#SWRITE
 3

	)

153 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

154 
	#READ_META
 (
READ
 | (1 << 
BIO_RW_META
))

	)

155 
	#WRITE_SYNC_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

156 
	#WRITE_SYNC
 (
WRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

157 
	#WRITE_ODIRECT
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

158 
	#SWRITE_SYNC_PLUG
 \

159 (
SWRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

160 
	#SWRITE_SYNC
 (
SWRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

161 
	#WRITE_BARRIER
 (
WRITE
 | (1 << 
BIO_RW_BARRIER
))

	)

167 
	#DISCARD_NOBARRIER
 (
WRITE
 | (1 << 
BIO_RW_DISCARD
))

	)

168 
	#DISCARD_BARRIER
 (
DISCARD_NOBARRIER
 | (1 << 
BIO_RW_BARRIER
))

	)

170 
	#SEL_IN
 1

	)

171 
	#SEL_OUT
 2

	)

172 
	#SEL_EX
 4

	)

175 
	#FS_REQUIRES_DEV
 1

	)

176 
	#FS_BINARY_MOUNTDATA
 2

	)

177 
	#FS_HAS_SUBTYPE
 4

	)

178 
	#FS_REVAL_DOT
 16384

	)

179 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

186 
	#MS_RDONLY
 1

	)

187 
	#MS_NOSUID
 2

	)

188 
	#MS_NODEV
 4

	)

189 
	#MS_NOEXEC
 8

	)

190 
	#MS_SYNCHRONOUS
 16

	)

191 
	#MS_REMOUNT
 32

	)

192 
	#MS_MANDLOCK
 64

	)

193 
	#MS_DIRSYNC
 128

	)

194 
	#MS_NOATIME
 1024

	)

195 
	#MS_NODIRATIME
 2048

	)

196 
	#MS_BIND
 4096

	)

197 
	#MS_MOVE
 8192

	)

198 
	#MS_REC
 16384

	)

199 
	#MS_VERBOSE
 32768

	)

201 
	#MS_SILENT
 32768

	)

202 
	#MS_POSIXACL
 (1<<16Ë

	)

203 
	#MS_UNBINDABLE
 (1<<17Ë

	)

204 
	#MS_PRIVATE
 (1<<18Ë

	)

205 
	#MS_SLAVE
 (1<<19Ë

	)

206 
	#MS_SHARED
 (1<<20Ë

	)

207 
	#MS_RELATIME
 (1<<21Ë

	)

208 
	#MS_KERNMOUNT
 (1<<22Ë

	)

209 
	#MS_I_VERSION
 (1<<23Ë

	)

210 
	#MS_STRICTATIME
 (1<<24Ë

	)

211 
	#MS_ACTIVE
 (1<<30)

	)

212 
	#MS_NOUSER
 (1<<31)

	)

217 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

222 
	#MS_MGC_VAL
 0xC0ED0000

	)

223 
	#MS_MGC_MSK
 0xffff0000

	)

227 
	#S_SYNC
 1

	)

228 
	#S_NOATIME
 2

	)

229 
	#S_APPEND
 4

	)

230 
	#S_IMMUTABLE
 8

	)

231 
	#S_DEAD
 16

	)

232 
	#S_NOQUOTA
 32

	)

233 
	#S_DIRSYNC
 64

	)

234 
	#S_NOCMTIME
 128

	)

235 
	#S_SWAPFILE
 256

	)

236 
	#S_PRIVATE
 512

	)

251 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

253 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

254 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

255 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

256 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

257 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

258 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

259 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

260 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

262 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

263 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

264 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

265 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

267 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

268 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

269 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

270 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

275 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

276 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

277 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

278 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

279 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

280 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

281 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

282 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

283 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

284 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

285 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

286 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

288 
	#BLKPG
 
	`_IO
(0x12,105)

	)

292 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

293 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

298 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

299 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

300 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

301 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

302 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

303 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

304 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

305 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

306 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

307 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

308 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

309 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

311 
	#BMAP_IOCTL
 1

	)

312 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

313 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

314 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

315 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

317 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

318 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

319 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

320 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

321 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

322 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

323 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

324 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

325 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

330 
	#FS_SECRM_FL
 0x00000001

	)

331 
	#FS_UNRM_FL
 0x00000002

	)

332 
	#FS_COMPR_FL
 0x00000004

	)

333 
	#FS_SYNC_FL
 0x00000008

	)

334 
	#FS_IMMUTABLE_FL
 0x00000010

	)

335 
	#FS_APPEND_FL
 0x00000020

	)

336 
	#FS_NODUMP_FL
 0x00000040

	)

337 
	#FS_NOATIME_FL
 0x00000080

	)

339 
	#FS_DIRTY_FL
 0x00000100

	)

340 
	#FS_COMPRBLK_FL
 0x00000200

	)

341 
	#FS_NOCOMP_FL
 0x00000400

	)

342 
	#FS_ECOMPR_FL
 0x00000800

	)

344 
	#FS_BTREE_FL
 0x00001000

	)

345 
	#FS_INDEX_FL
 0x00001000

	)

346 
	#FS_IMAGIC_FL
 0x00002000

	)

347 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

348 
	#FS_NOTAIL_FL
 0x00008000

	)

349 
	#FS_DIRSYNC_FL
 0x00010000

	)

350 
	#FS_TOPDIR_FL
 0x00020000

	)

351 
	#FS_EXTENT_FL
 0x00080000

	)

352 
	#FS_DIRECTIO_FL
 0x00100000

	)

353 
	#FS_RESERVED_FL
 0x80000000

	)

355 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

356 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

359 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

360 
	#SYNC_FILE_RANGE_WRITE
 2

	)

361 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/hdreg.h

1 #i‚de‡
_LINUX_HDREG_H


2 
	#_LINUX_HDREG_H


	)

4 
	~<löux/ty≥s.h
>

10 
	#HDIO_DRIVE_CMD_HDR_SIZE
 (4 * (
__u8
))

	)

11 
	#HDIO_DRIVE_HOB_HDR_SIZE
 (8 * (
__u8
))

	)

12 
	#HDIO_DRIVE_TASK_HDR_SIZE
 (8 * (
__u8
))

	)

14 
	#IDE_DRIVE_TASK_NO_DATA
 0

	)

15 
	#IDE_DRIVE_TASK_INVALID
 -1

	)

16 
	#IDE_DRIVE_TASK_SET_XFER
 1

	)

17 
	#IDE_DRIVE_TASK_IN
 2

	)

18 
	#IDE_DRIVE_TASK_OUT
 3

	)

19 
	#IDE_DRIVE_TASK_RAW_WRITE
 4

	)

24 
	#IDE_TASKFILE_STD_IN_FLAGS
 0xFE

	)

25 
	#IDE_HOB_STD_IN_FLAGS
 0x3C

	)

26 
	#IDE_TASKFILE_STD_OUT_FLAGS
 0xFE

	)

27 
	#IDE_HOB_STD_OUT_FLAGS
 0x3C

	)

29 
	tèsk_i‹eg_t
;

30 
	tßè_i‹eg_t
;

32 
	uide_ªg_vÆid_s
 {

33 
	mÆl
 : 16;

35 
	md©a
 : 1;

36 
	mîr‹_„©uª
 : 1;

37 
	m£˘‹
 : 1;

38 
	mn£˘‹
 : 1;

39 
	mlcyl
 : 1;

40 
	mhcyl
 : 1;

41 
	m£À˘
 : 1;

42 
	m°©us_comm™d
 : 1;

44 
	md©a_hob
 : 1;

45 
	mîr‹_„©uª_hob
 : 1;

46 
	m£˘‹_hob
 : 1;

47 
	mn£˘‹_hob
 : 1;

48 
	mlcyl_hob
 : 1;

49 
	mhcyl_hob
 : 1;

50 
	m£À˘_hob
 : 1;

51 
	mc⁄åﬁ_hob
 : 1;

52 } 
	mb
;

53 } 
	tide_ªg_vÆid_t
;

55 
	side_èsk_ªque°_s
 {

56 
__u8
 
	mio_p‹ts
[8];

57 
__u8
 
	mhob_p‹ts
[8];

58 
ide_ªg_vÆid_t
 
	mout_Êags
;

59 
ide_ªg_vÆid_t
 
	mö_Êags
;

60 
	md©a_pha£
;

61 
	mªq_cmd
;

62 
	mout_size
;

63 
	mö_size
;

64 } 
	tide_èsk_ªque°_t
;

66 
	side_io˘l_ªque°_s
 {

67 
ide_èsk_ªque°_t
 *
	mèsk_ªque°
;

68 *
	mout_buf„r
;

69 *
	mö_buf„r
;

70 } 
	tide_io˘l_ªque°_t
;

72 
	shd_drive_cmd_hdr
 {

73 
__u8
 
	mcomm™d
;

74 
__u8
 
	m£˘‹_numbî
;

75 
__u8
 
	m„©uª
;

76 
__u8
 
	m£˘‹_cou¡
;

79 
	shd_drive_èsk_hdr
 {

80 
__u8
 
	md©a
;

81 
__u8
 
	m„©uª
;

82 
__u8
 
	m£˘‹_cou¡
;

83 
__u8
 
	m£˘‹_numbî
;

84 
__u8
 
	mlow_cylödî
;

85 
__u8
 
	mhigh_cylödî
;

86 
__u8
 
	mdevi˚_hód
;

87 
__u8
 
	mcomm™d
;

88 } 
	tèsk_°ru˘_t
;

90 
	shd_drive_hob_hdr
 {

91 
__u8
 
	md©a
;

92 
__u8
 
	m„©uª
;

93 
__u8
 
	m£˘‹_cou¡
;

94 
__u8
 
	m£˘‹_numbî
;

95 
__u8
 
	mlow_cylödî
;

96 
__u8
 
	mhigh_cylödî
;

97 
__u8
 
	mdevi˚_hód
;

98 
__u8
 
	mc⁄åﬁ
;

99 } 
	thob_°ru˘_t
;

101 
	#TASKFILE_NO_DATA
 0x0000

	)

103 
	#TASKFILE_IN
 0x0001

	)

104 
	#TASKFILE_MULTI_IN
 0x0002

	)

106 
	#TASKFILE_OUT
 0x0004

	)

107 
	#TASKFILE_MULTI_OUT
 0x0008

	)

108 
	#TASKFILE_IN_OUT
 0x0010

	)

110 
	#TASKFILE_IN_DMA
 0x0020

	)

111 
	#TASKFILE_OUT_DMA
 0x0040

	)

112 
	#TASKFILE_IN_DMAQ
 0x0080

	)

113 
	#TASKFILE_OUT_DMAQ
 0x0100

	)

115 
	#TASKFILE_P_IN
 0x0200

	)

116 
	#TASKFILE_P_OUT
 0x0400

	)

117 
	#TASKFILE_P_IN_DMA
 0x0800

	)

118 
	#TASKFILE_P_OUT_DMA
 0x1000

	)

119 
	#TASKFILE_P_IN_DMAQ
 0x2000

	)

120 
	#TASKFILE_P_OUT_DMAQ
 0x4000

	)

121 
	#TASKFILE_48
 0x8000

	)

122 
	#TASKFILE_INVALID
 0x7fff

	)

125 
	#WIN_NOP
 0x00

	)

129 
	#CFA_REQ_EXT_ERROR_CODE
 0x03

	)

133 
	#WIN_SRST
 0x08

	)

134 
	#WIN_DEVICE_RESET
 0x08

	)

138 
	#WIN_RECAL
 0x10

	)

139 
	#WIN_RESTORE
 
WIN_RECAL


	)

143 
	#WIN_READ
 0x20

	)

144 
	#WIN_READ_ONCE
 0x21

	)

145 
	#WIN_READ_LONG
 0x22

	)

146 
	#WIN_READ_LONG_ONCE
 0x23

	)

147 
	#WIN_READ_EXT
 0x24

	)

148 
	#WIN_READDMA_EXT
 0x25

	)

149 
	#WIN_READDMA_QUEUED_EXT
 0x26

	)

150 
	#WIN_READ_NATIVE_MAX_EXT
 0x27

	)

154 
	#WIN_MULTREAD_EXT
 0x29

	)

158 
	#WIN_WRITE
 0x30

	)

159 
	#WIN_WRITE_ONCE
 0x31

	)

160 
	#WIN_WRITE_LONG
 0x32

	)

161 
	#WIN_WRITE_LONG_ONCE
 0x33

	)

162 
	#WIN_WRITE_EXT
 0x34

	)

163 
	#WIN_WRITEDMA_EXT
 0x35

	)

164 
	#WIN_WRITEDMA_QUEUED_EXT
 0x36

	)

165 
	#WIN_SET_MAX_EXT
 0x37

	)

166 
	#CFA_WRITE_SECT_WO_ERASE
 0x38

	)

167 
	#WIN_MULTWRITE_EXT
 0x39

	)

171 
	#WIN_WRITE_VERIFY
 0x3C

	)

175 
	#WIN_VERIFY
 0x40

	)

176 
	#WIN_VERIFY_ONCE
 0x41

	)

177 
	#WIN_VERIFY_EXT
 0x42

	)

181 
	#WIN_FORMAT
 0x50

	)

185 
	#WIN_INIT
 0x60

	)

189 
	#WIN_SEEK
 0x70

	)

191 
	#CFA_TRANSLATE_SECTOR
 0x87

	)

192 
	#WIN_DIAGNOSE
 0x90

	)

193 
	#WIN_SPECIFY
 0x91

	)

194 
	#WIN_DOWNLOAD_MICROCODE
 0x92

	)

195 
	#WIN_STANDBYNOW2
 0x94

	)

196 
	#WIN_STANDBY2
 0x96

	)

197 
	#WIN_SETIDLE2
 0x97

	)

198 
	#WIN_CHECKPOWERMODE2
 0x98

	)

199 
	#WIN_SLEEPNOW2
 0x99

	)

203 
	#WIN_PACKETCMD
 0xA0

	)

204 
	#WIN_PIDENTIFY
 0xA1

	)

205 
	#WIN_QUEUED_SERVICE
 0xA2

	)

206 
	#WIN_SMART
 0xB0

	)

207 
	#CFA_ERASE_SECTORS
 0xC0

	)

208 
	#WIN_MULTREAD
 0xC4

	)

209 
	#WIN_MULTWRITE
 0xC5

	)

210 
	#WIN_SETMULT
 0xC6

	)

211 
	#WIN_READDMA_QUEUED
 0xC7

	)

212 
	#WIN_READDMA
 0xC8

	)

213 
	#WIN_READDMA_ONCE
 0xC9

	)

214 
	#WIN_WRITEDMA
 0xCA

	)

215 
	#WIN_WRITEDMA_ONCE
 0xCB

	)

216 
	#WIN_WRITEDMA_QUEUED
 0xCC

	)

217 
	#CFA_WRITE_MULTI_WO_ERASE
 0xCD

	)

218 
	#WIN_GETMEDIASTATUS
 0xDA

	)

219 
	#WIN_ACKMEDIACHANGE
 0xDB

	)

220 
	#WIN_POSTBOOT
 0xDC

	)

221 
	#WIN_PREBOOT
 0xDD

	)

222 
	#WIN_DOORLOCK
 0xDE

	)

223 
	#WIN_DOORUNLOCK
 0xDF

	)

224 
	#WIN_STANDBYNOW1
 0xE0

	)

225 
	#WIN_IDLEIMMEDIATE
 0xE1

	)

226 
	#WIN_STANDBY
 0xE2

	)

227 
	#WIN_SETIDLE1
 0xE3

	)

228 
	#WIN_READ_BUFFER
 0xE4

	)

229 
	#WIN_CHECKPOWERMODE1
 0xE5

	)

230 
	#WIN_SLEEPNOW1
 0xE6

	)

231 
	#WIN_FLUSH_CACHE
 0xE7

	)

232 
	#WIN_WRITE_BUFFER
 0xE8

	)

233 
	#WIN_WRITE_SAME
 0xE9

	)

235 
	#WIN_FLUSH_CACHE_EXT
 0xEA

	)

236 
	#WIN_IDENTIFY
 0xEC

	)

237 
	#WIN_MEDIAEJECT
 0xED

	)

238 
	#WIN_IDENTIFY_DMA
 0xEE

	)

239 
	#WIN_SETFEATURES
 0xEF

	)

240 
	#EXABYTE_ENABLE_NEST
 0xF0

	)

241 
	#WIN_SECURITY_SET_PASS
 0xF1

	)

242 
	#WIN_SECURITY_UNLOCK
 0xF2

	)

243 
	#WIN_SECURITY_ERASE_PREPARE
 0xF3

	)

244 
	#WIN_SECURITY_ERASE_UNIT
 0xF4

	)

245 
	#WIN_SECURITY_FREEZE_LOCK
 0xF5

	)

246 
	#WIN_SECURITY_DISABLE
 0xF6

	)

247 
	#WIN_READ_NATIVE_MAX
 0xF8

	)

248 
	#WIN_SET_MAX
 0xF9

	)

249 
	#DISABLE_SEAGATE
 0xFB

	)

253 
	#SMART_READ_VALUES
 0xD0

	)

254 
	#SMART_READ_THRESHOLDS
 0xD1

	)

255 
	#SMART_AUTOSAVE
 0xD2

	)

256 
	#SMART_SAVE
 0xD3

	)

257 
	#SMART_IMMEDIATE_OFFLINE
 0xD4

	)

258 
	#SMART_READ_LOG_SECTOR
 0xD5

	)

259 
	#SMART_WRITE_LOG_SECTOR
 0xD6

	)

260 
	#SMART_WRITE_THRESHOLDS
 0xD7

	)

261 
	#SMART_ENABLE
 0xD8

	)

262 
	#SMART_DISABLE
 0xD9

	)

263 
	#SMART_STATUS
 0xDA

	)

264 
	#SMART_AUTO_OFFLINE
 0xDB

	)

268 
	#SMART_LCYL_PASS
 0x4F

	)

269 
	#SMART_HCYL_PASS
 0xC2

	)

272 
	#SETFEATURES_EN_8BIT
 0x01

	)

273 
	#SETFEATURES_EN_WCACHE
 0x02

	)

274 
	#SETFEATURES_DIS_DEFECT
 0x04

	)

275 
	#SETFEATURES_EN_APM
 0x05

	)

276 
	#SETFEATURES_EN_SAME_R
 0x22

	)

277 
	#SETFEATURES_DIS_MSN
 0x31

	)

278 
	#SETFEATURES_DIS_RETRY
 0x33

	)

279 
	#SETFEATURES_EN_AAM
 0x42

	)

280 
	#SETFEATURES_RW_LONG
 0x44

	)

281 
	#SETFEATURES_SET_CACHE
 0x54

	)

282 
	#SETFEATURES_DIS_RLA
 0x55

	)

283 
	#SETFEATURES_EN_RI
 0x5D

	)

284 
	#SETFEATURES_EN_SI
 0x5E

	)

285 
	#SETFEATURES_DIS_RPOD
 0x66

	)

286 
	#SETFEATURES_DIS_ECC
 0x77

	)

287 
	#SETFEATURES_DIS_8BIT
 0x81

	)

288 
	#SETFEATURES_DIS_WCACHE
 0x82

	)

289 
	#SETFEATURES_EN_DEFECT
 0x84

	)

290 
	#SETFEATURES_DIS_APM
 0x85

	)

291 
	#SETFEATURES_EN_ECC
 0x88

	)

292 
	#SETFEATURES_EN_MSN
 0x95

	)

293 
	#SETFEATURES_EN_RETRY
 0x99

	)

294 
	#SETFEATURES_EN_RLA
 0xAA

	)

295 
	#SETFEATURES_PREFETCH
 0xAB

	)

296 
	#SETFEATURES_EN_REST
 0xAC

	)

297 
	#SETFEATURES_4B_RW_LONG
 0xBB

	)

298 
	#SETFEATURES_DIS_AAM
 0xC2

	)

299 
	#SETFEATURES_EN_RPOD
 0xCC

	)

300 
	#SETFEATURES_DIS_RI
 0xDD

	)

301 
	#SETFEATURES_EN_SAME_M
 0xDD

	)

302 
	#SETFEATURES_DIS_SI
 0xDE

	)

306 
	#SECURITY_SET_PASSWORD
 0xBA

	)

307 
	#SECURITY_UNLOCK
 0xBB

	)

308 
	#SECURITY_ERASE_PREPARE
 0xBC

	)

309 
	#SECURITY_ERASE_UNIT
 0xBD

	)

310 
	#SECURITY_FREEZE_LOCK
 0xBE

	)

311 
	#SECURITY_DISABLE_PASSWORD
 0xBF

	)

313 
	shd_geomëry
 {

314 
	mhóds
;

315 
	m£˘‹s
;

316 
	mcylödîs
;

317 
	m°¨t
;

321 
	#HDIO_GETGEO
 0x0301

	)

322 
	#HDIO_GET_UNMASKINTR
 0x0302

	)

323 
	#HDIO_GET_MULTCOUNT
 0x0304

	)

324 
	#HDIO_GET_QDMA
 0x0305

	)

326 
	#HDIO_SET_XFER
 0x0306

	)

328 
	#HDIO_OBSOLETE_IDENTITY
 0x0307

	)

329 
	#HDIO_GET_KEEPSETTINGS
 0x0308

	)

330 
	#HDIO_GET_32BIT
 0x0309

	)

331 
	#HDIO_GET_NOWERR
 0x030®

	)

332 
	#HDIO_GET_DMA
 0x030b

	)

333 
	#HDIO_GET_NICE
 0x030¯

	)

334 
	#HDIO_GET_IDENTITY
 0x030d

	)

335 
	#HDIO_GET_WCACHE
 0x030ê

	)

336 
	#HDIO_GET_ACOUSTIC
 0x030‡

	)

337 
	#HDIO_GET_ADDRESS
 0x0310

	)

339 
	#HDIO_GET_BUSSTATE
 0x031®

	)

340 
	#HDIO_TRISTATE_HWIF
 0x031b

	)

341 
	#HDIO_DRIVE_RESET
 0x031¯

	)

342 
	#HDIO_DRIVE_TASKFILE
 0x031d

	)

343 
	#HDIO_DRIVE_TASK
 0x031ê

	)

344 
	#HDIO_DRIVE_CMD
 0x031‡

	)

345 
	#HDIO_DRIVE_CMD_AEB
 
HDIO_DRIVE_TASK


	)

348 
	#HDIO_SET_MULTCOUNT
 0x0321

	)

349 
	#HDIO_SET_UNMASKINTR
 0x0322

	)

350 
	#HDIO_SET_KEEPSETTINGS
 0x0323

	)

351 
	#HDIO_SET_32BIT
 0x0324

	)

352 
	#HDIO_SET_NOWERR
 0x0325

	)

353 
	#HDIO_SET_DMA
 0x0326

	)

354 
	#HDIO_SET_PIO_MODE
 0x0327

	)

355 
	#HDIO_SCAN_HWIF
 0x0328

	)

356 
	#HDIO_UNREGISTER_HWIF
 0x032®

	)

357 
	#HDIO_SET_NICE
 0x0329

	)

358 
	#HDIO_SET_WCACHE
 0x032b

	)

359 
	#HDIO_SET_ACOUSTIC
 0x032¯

	)

360 
	#HDIO_SET_BUSSTATE
 0x032d

	)

361 
	#HDIO_SET_QDMA
 0x032ê

	)

362 
	#HDIO_SET_ADDRESS
 0x032‡

	)

366 
	mBUSSTATE_OFF
 = 0,

367 
	mBUSSTATE_ON
,

368 
	mBUSSTATE_TRISTATE


377 
	#__NEW_HD_DRIVE_ID


	)

385 
	shd_driveid
 {

386 
	mc⁄fig
;

387 
	mcyls
;

388 
	mª£rved2
;

389 
	mhóds
;

390 
	måack_byãs
;

391 
	m£˘‹_byãs
;

392 
	m£˘‹s
;

393 
	mvíd‹0
;

394 
	mvíd‹1
;

395 
	mvíd‹2
;

396 
	m£rül_no
[20];

397 
	mbuf_ty≥
;

398 
	mbuf_size
;

401 
	mecc_byãs
;

402 
	mfw_ªv
[8];

403 
	mmodñ
[40];

404 
	mmax_mu…£˘
;

405 
	mvíd‹3
;

406 
	mdw‹d_io
;

407 
	mvíd‹4
;

408 
	mˇ∑bûôy
;

414 
	mª£rved50
;

415 
	mvíd‹5
;

416 
	mtPIO
;

417 
	mvíd‹6
;

418 
	mtDMA
;

419 
	mfõld_vÆid
;

424 
	mcur_cyls
;

425 
	mcur_hóds
;

426 
	mcur_£˘‹s
;

427 
	mcur_ˇ∑côy0
;

428 
	mcur_ˇ∑côy1
;

429 
	mmu…£˘
;

430 
	mmu…£˘_vÆid
;

431 
	mlba_ˇ∑côy
;

432 
	mdma_1w‹d
;

433 
	mdma_mw‹d
;

434 
	meide_pio_modes
;

435 
	meide_dma_mö
;

436 
	meide_dma_time
;

437 
	meide_pio
;

438 
	meide_pio_i‹dy
;

439 
	mw‹ds69_70
[2];

442 
	mw‹ds71_74
[4];

445 
	mqueue_dïth
;

449 
	mw‹ds76_79
[4];

450 
	mmaj‹_ªv_num
;

451 
	mmö‹_ªv_num
;

452 
	mcomm™d_£t_1
;

470 
	mcomm™d_£t_2
;

488 
	mcfs£
;

500 
	mcfs_íabÀ_1
;

519 
	mcfs_íabÀ_2
;

538 
	mcsf_deÁu…
;

550 
	mdma_u…ø
;

551 
	må£uc
;

552 
	måsEuc
;

553 
	mCurAPMvÆues
;

554 
	mm¥c
;

555 
	mhw_c⁄fig
;

573 
	macou°ic
;

577 
	mm§qs
;

578 
	msx„π
;

579 
	mßl
;

580 
	m•g
;

581 
	mlba_ˇ∑côy_2
;

582 
	mw‹ds104_125
[22];

583 
	mœ°_lun
;

584 
	mw‹d127
;

592 
	mdlf
;

604 
	mcsfo
;

612 
	mw‹ds130_155
[26];

613 
	mw‹d156
;

614 
	mw‹ds157_159
[3];

615 
	mcÁ_powî
;

622 
	mw‹ds161_175
[15];

623 
	mw‹ds176_205
[30];

624 
	mw‹ds206_254
[49];

625 
	möãgrôy_w‹d
;

636 
	#IDE_NICE_DSC_OVERLAP
 (0Ë

	)

637 
	#IDE_NICE_ATAPI_OVERLAP
 (1Ë

	)

638 
	#IDE_NICE_1
 (3Ë

	)

639 
	#IDE_NICE_0
 (2Ë

	)

640 
	#IDE_NICE_2
 (4Ë

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

10 
	#SI_LOAD_SHIFT
 16

	)

11 
	ssysöfo
 {

12 
	mu±ime
;

13 
	mlﬂds
[3];

14 
	mtŸÆøm
;

15 
	m‰ìøm
;

16 
	msh¨edøm
;

17 
	mbuf„ºam
;

18 
	mtŸÆsw≠
;

19 
	m‰ìsw≠
;

20 
	m¥ocs
;

21 
	m∑d
;

22 
	mtŸÆhigh
;

23 
	m‰ìhigh
;

24 
	mmem_unô
;

25 
	m_f
[20-2*()-()];

29 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

32 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

38 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

39 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

42 
	#__FUNCTION__
 (
__func__
)

	)

45 #ifde‡
CONFIG_NUMA


46 
	#NUMA_BUILD
 1

	)

48 
	#NUMA_BUILD
 0

	)

52 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


53 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

33 
	#MAX_ADDR_LEN
 32

	)

41 
	s√t_devi˚_°©s


43 
	mrx_∑ckës
;

44 
	mtx_∑ckës
;

45 
	mrx_byãs
;

46 
	mtx_byãs
;

47 
	mrx_îr‹s
;

48 
	mtx_îr‹s
;

49 
	mrx_dr›≥d
;

50 
	mtx_dr›≥d
;

51 
	mmu…iˇ°
;

52 
	mcﬁlisi⁄s
;

55 
	mrx_Àngth_îr‹s
;

56 
	mrx_ovî_îr‹s
;

57 
	mrx_¸c_îr‹s
;

58 
	mrx_‰ame_îr‹s
;

59 
	mrx_fifo_îr‹s
;

60 
	mrx_mis£d_îr‹s
;

63 
	mtx_ab‹ãd_îr‹s
;

64 
	mtx_ˇºõr_îr‹s
;

65 
	mtx_fifo_îr‹s
;

66 
	mtx_hóπbót_îr‹s
;

67 
	mtx_wödow_îr‹s
;

70 
	mrx_com¥es£d
;

71 
	mtx_com¥es£d
;

77 
	mIF_PORT_UNKNOWN
 = 0,

78 
	mIF_PORT_10BASE2
,

79 
	mIF_PORT_10BASET
,

80 
	mIF_PORT_AUI
,

81 
	mIF_PORT_100BASET
,

82 
	mIF_PORT_100BASETX
,

83 
	mIF_PORT_100BASEFX


	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

20 
	~<löux/pci_ªgs.h
>

30 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

31 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

32 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

35 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

36 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

37 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

38 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

39 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/poll.h

1 #i‚de‡
_LINUX_POLL_H


2 
	#_LINUX_POLL_H


	)

4 
	~<asm/pﬁl.h
>

	@/usr/include/linux/rtc.h

11 #i‚de‡
_LINUX_RTC_H_


12 
	#_LINUX_RTC_H_


	)

20 
	sπc_time
 {

21 
	mtm_£c
;

22 
	mtm_mö
;

23 
	mtm_hour
;

24 
	mtm_mday
;

25 
	mtm_m⁄
;

26 
	mtm_yór
;

27 
	mtm_wday
;

28 
	mtm_yday
;

29 
	mtm_isd°
;

36 
	sπc_wkÆrm
 {

37 
	míabÀd
;

38 
	m≥ndög
;

39 
πc_time
 
	mtime
;

55 
	sπc_∂l_öfo
 {

56 
	m∂l_˘æ
;

57 
	m∂l_vÆue
;

58 
	m∂l_max
;

59 
	m∂l_mö
;

60 
	m∂l_posmu…
;

61 
	m∂l_√gmu…
;

62 
	m∂l_˛ock
;

70 
	#RTC_AIE_ON
 
	`_IO
('p', 0x01Ë

	)

71 
	#RTC_AIE_OFF
 
	`_IO
('p', 0x02Ë

	)

72 
	#RTC_UIE_ON
 
	`_IO
('p', 0x03Ë

	)

73 
	#RTC_UIE_OFF
 
	`_IO
('p', 0x04Ë

	)

74 
	#RTC_PIE_ON
 
	`_IO
('p', 0x05Ë

	)

75 
	#RTC_PIE_OFF
 
	`_IO
('p', 0x06Ë

	)

76 
	#RTC_WIE_ON
 
	`_IO
('p', 0x0fË

	)

77 
	#RTC_WIE_OFF
 
	`_IO
('p', 0x10Ë

	)

79 
	#RTC_ALM_SET
 
	`_IOW
('p', 0x07, 
πc_time
Ë

	)

80 
	#RTC_ALM_READ
 
	`_IOR
('p', 0x08, 
πc_time
Ë

	)

81 
	#RTC_RD_TIME
 
	`_IOR
('p', 0x09, 
πc_time
Ë

	)

82 
	#RTC_SET_TIME
 
	`_IOW
('p', 0x0a, 
πc_time
Ë

	)

83 
	#RTC_IRQP_READ
 
	`_IOR
('p', 0x0b, Ë

	)

84 
	#RTC_IRQP_SET
 
	`_IOW
('p', 0x0c, Ë

	)

85 
	#RTC_EPOCH_READ
 
	`_IOR
('p', 0x0d, Ë

	)

86 
	#RTC_EPOCH_SET
 
	`_IOW
('p', 0x0e, Ë

	)

88 
	#RTC_WKALM_SET
 
	`_IOW
('p', 0x0f, 
πc_wkÆrm
)

	)

89 
	#RTC_WKALM_RD
 
	`_IOR
('p', 0x10, 
πc_wkÆrm
)

	)

91 
	#RTC_PLL_GET
 
	`_IOR
('p', 0x11, 
πc_∂l_öfo
Ë

	)

92 
	#RTC_PLL_SET
 
	`_IOW
('p', 0x12, 
πc_∂l_öfo
Ë

	)

95 
	#RTC_IRQF
 0x80

	)

96 
	#RTC_PF
 0x40

	)

97 
	#RTC_AF
 0x20

	)

98 
	#RTC_UF
 0x10

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_STOPPED
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

42 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/serio.h

1 #i‚de‡
_SERIO_H


2 
	#_SERIO_H


	)

12 
	~<löux/io˘l.h
>

14 
	#SPIOCSTYPE
 
	`_IOW
('q', 0x01, )

	)

20 
	#SERIO_TIMEOUT
 1

	)

21 
	#SERIO_PARITY
 2

	)

22 
	#SERIO_FRAME
 4

	)

27 
	#SERIO_XT
 0x00

	)

28 
	#SERIO_8042
 0x01

	)

29 
	#SERIO_RS232
 0x02

	)

30 
	#SERIO_HIL_MLC
 0x03

	)

31 
	#SERIO_PS_PSTHRU
 0x05

	)

32 
	#SERIO_8042_XL
 0x06

	)

37 
	#SERIO_UNKNOWN
 0x00

	)

38 
	#SERIO_MSC
 0x01

	)

39 
	#SERIO_SUN
 0x02

	)

40 
	#SERIO_MS
 0x03

	)

41 
	#SERIO_MP
 0x04

	)

42 
	#SERIO_MZ
 0x05

	)

43 
	#SERIO_MZP
 0x06

	)

44 
	#SERIO_MZPP
 0x07

	)

45 
	#SERIO_VSXXXAA
 0x08

	)

46 
	#SERIO_SUNKBD
 0x10

	)

47 
	#SERIO_WARRIOR
 0x18

	)

48 
	#SERIO_SPACEORB
 0x19

	)

49 
	#SERIO_MAGELLAN
 0x1a

	)

50 
	#SERIO_SPACEBALL
 0x1b

	)

51 
	#SERIO_GUNZE
 0x1c

	)

52 
	#SERIO_IFORCE
 0x1d

	)

53 
	#SERIO_STINGER
 0x1e

	)

54 
	#SERIO_NEWTON
 0x1f

	)

55 
	#SERIO_STOWAWAY
 0x20

	)

56 
	#SERIO_H3600
 0x21

	)

57 
	#SERIO_PS2SER
 0x22

	)

58 
	#SERIO_TWIDKBD
 0x23

	)

59 
	#SERIO_TWIDJOY
 0x24

	)

60 
	#SERIO_HIL
 0x25

	)

61 
	#SERIO_SNES232
 0x26

	)

62 
	#SERIO_SEMTECH
 0x27

	)

63 
	#SERIO_LKKBD
 0x28

	)

64 
	#SERIO_ELO
 0x29

	)

65 
	#SERIO_MICROTOUCH
 0x30

	)

66 
	#SERIO_PENMOUNT
 0x31

	)

67 
	#SERIO_TOUCHRIGHT
 0x32

	)

68 
	#SERIO_TOUCHWIN
 0x33

	)

69 
	#SERIO_TAOSEVM
 0x34

	)

70 
	#SERIO_FUJITSU
 0x35

	)

71 
	#SERIO_ZHENHUA
 0x36

	)

72 
	#SERIO_INEXIO
 0x37

	)

73 
	#SERIO_TOUCHIT213
 0x38

	)

74 
	#SERIO_W8001
 0x39

	)

	@/usr/include/linux/stat.h

1 #i‚de‡
_LINUX_STAT_H


2 
	#_LINUX_STAT_H


	)

5 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

7 
	#S_IFMT
 00170000

	)

8 
	#S_IFSOCK
 0140000

	)

9 
	#S_IFLNK
 0120000

	)

10 
	#S_IFREG
 0100000

	)

11 
	#S_IFBLK
 0060000

	)

12 
	#S_IFDIR
 0040000

	)

13 
	#S_IFCHR
 0020000

	)

14 
	#S_IFIFO
 0010000

	)

15 
	#S_ISUID
 0004000

	)

16 
	#S_ISGID
 0002000

	)

17 
	#S_ISVTX
 0001000

	)

19 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

20 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

21 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

22 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

23 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

24 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

25 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

27 
	#S_IRWXU
 00700

	)

28 
	#S_IRUSR
 00400

	)

29 
	#S_IWUSR
 00200

	)

30 
	#S_IXUSR
 00100

	)

32 
	#S_IRWXG
 00070

	)

33 
	#S_IRGRP
 00040

	)

34 
	#S_IWGRP
 00020

	)

35 
	#S_IXGRP
 00010

	)

37 
	#S_IRWXO
 00007

	)

38 
	#S_IROTH
 00004

	)

39 
	#S_IWOTH
 00002

	)

40 
	#S_IXOTH
 00001

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132640

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

6 
	#WSTOPPED
 
WUNTRACED


	)

7 
	#WEXITED
 0x00000004

	)

8 
	#WCONTINUED
 0x00000008

	)

9 
	#WNOWAIT
 0x01000000

	)

11 
	#__WNOTHREAD
 0x20000000

	)

12 
	#__WALL
 0x40000000

	)

13 
	#__WCLONE
 0x80000000

	)

16 
	#P_ALL
 0

	)

17 
	#P_PID
 1

	)

18 
	#P_PGID
 2

	)

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/mqueue.h

19 #i‚de‡
_MQUEUE_H


20 
	#_MQUEUE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<f˙é.h
>

25 
	#__√ed_sigevít_t


	)

26 
	~<bôs/sigöfo.h
>

27 
	#__√ed_time•ec


	)

28 
	~<time.h
>

30 
	~<bôs/mqueue.h
>

32 
__BEGIN_DECLS


41 
mqd_t
 
	$mq_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...)

42 
__THROW
 
	`__n⁄nuŒ
 ((1));

46 
	$mq_˛o£
 (
mqd_t
 
__mqdes
Ë
__THROW
;

49 
	$mq_gë©å
 (
mqd_t
 
__mqdes
, 
mq_©å
 *
__mq°©
)

50 
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	$mq_£èâr
 (
mqd_t
 
__mqdes
,

55 
__c⁄°
 
mq_©å
 *
__ª°ri˘
 
__mq°©
,

56 
mq_©å
 *
__ª°ri˘
 
__omq°©
)

57 
__THROW
 
	`__n⁄nuŒ
 ((2));

60 
	$mq_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$mq_nŸify
 (
mqd_t
 
__mqdes
, 
__c⁄°
 
sigevít
 *
__nŸifiˇti⁄
)

65 
__THROW
;

69 
ssize_t
 
	$mq_ª˚ive
 (
mqd_t
 
__mqdes
, *
__msg_±r
, 
size_t
 
__msg_Àn
,

70 *
__msg_¥io
Ë
	`__n⁄nuŒ
 ((2));

73 
	$mq_£nd
 (
mqd_t
 
__mqdes
, 
__c⁄°
 *
__msg_±r
, 
size_t
 
__msg_Àn
,

74 
__msg_¥io
Ë
	`__n⁄nuŒ
 ((2));

76 #ifde‡
__USE_XOPEN2K


79 
ssize_t
 
	$mq_timedª˚ive
 (
mqd_t
 
__mqdes
, *
__ª°ri˘
 
__msg_±r
,

80 
size_t
 
__msg_Àn
,

81 *
__ª°ri˘
 
__msg_¥io
,

82 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__abs_timeout
)

83 
	`__n⁄nuŒ
 ((2, 5));

87 
	$mq_timed£nd
 (
mqd_t
 
__mqdes
, 
__c⁄°
 *
__msg_±r
,

88 
size_t
 
__msg_Àn
, 
__msg_¥io
,

89 
__c⁄°
 
time•ec
 *
__abs_timeout
)

90 
	`__n⁄nuŒ
 ((2, 5));

94 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

95 && 
deföed
 
__va_¨g_∑ck_Àn


96 
	~<bôs/mqueue2.h
>

99 
__END_DECLS


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROW
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROW
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 #ifde‡
__USE_XOPEN2K8


296 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

314 
__modes
, 
size_t
 
__n
Ë
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

321 
size_t
 
__size
Ë
__THROW
;

324 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

334 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	$•rötf
 (*
__ª°ri˘
 
__s
,

342 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

348 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

349 
_G_va_li°
 
__¨g
);

354 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

356 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

357 
_G_va_li°
 
__¨g
Ë
__THROW
;

358 
__END_NAMESPACE_STD


360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

365 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

367 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


376 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

377 
_G_va_li°
 
__¨g
)

378 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

379 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

380 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

381 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

382 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

383 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

387 #ifde‡
__USE_XOPEN2K8


394 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

395 
_G_va_li°
 
__¨g
)

396 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

397 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

413 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

416 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

418 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

419 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

420 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

421 #ifde‡
__REDIRECT


425 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

427 
__isoc99_fsˇnf
Ë
__wur
;

428 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_sˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_ssˇnf
Ë
__THROW
;

434 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 
	#fsˇnf
 
__isoc99_fsˇnf


	)

440 
	#sˇnf
 
__isoc99_sˇnf


	)

441 
	#ssˇnf
 
__isoc99_ssˇnf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

454 
_G_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

466 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

469 #i‡!
deföed
 
__USE_GNU
 \

470 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

471 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

472 #ifde‡
__REDIRECT


476 
	`__REDIRECT
 (
vfsˇnf
,

477 (
FILE
 *
__ª°ri˘
 
__s
,

478 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

479 
__isoc99_vfsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

482 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vssˇnf
,

485 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

487 
__isoc99_vssˇnf
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

491 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

492 
_G_va_li°
 
__¨g
Ë
__wur
;

493 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

496 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

497 
_G_va_li°
 
__¨g
Ë
__THROW
;

498 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

499 
	#vsˇnf
 
__isoc99_vsˇnf


	)

500 
	#vssˇnf
 
__isoc99_vssˇnf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

521 
__END_NAMESPACE_STD


525 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

527 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


532 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

533 
	`gëch¨_u∆ocked
 ();

536 #ifde‡
__USE_MISC


543 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

562 
	`putch¨
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

569 #ifde‡
__USE_MISC


576 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

579 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

585 
	`putch¨_u∆ocked
 (
__c
);

589 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

590 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

592 
	`gëw
 (
FILE
 *
__°ªam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

605 
__wur
;

612 *
	$gës
 (*
__s
Ë
__wur
;

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

639 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

640 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

641 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

642 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

652 
size_t
 *
__ª°ri˘
 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

668 
	`puts
 (
__c⁄°
 *
__s
);

675 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

682 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

688 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifde‡
__USE_GNU


699 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

700 
FILE
 *
__ª°ri˘
 
__°ªam
);

703 #ifde‡
__USE_MISC


710 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

727 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

732 
	`ªwöd
 (
FILE
 *
__°ªam
);

733 
__END_NAMESPACE_STD


740 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


741 #i‚de‡
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

751 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

753 #ifde‡
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#·ñlo
 
·ñlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #i‚de‡
__USE_FILE_OFFSET64


771 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

778 #ifde‡
__REDIRECT


779 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

780 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

781 
	`__REDIRECT
 (
f£ços
,

782 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

784 
	#fgëpos
 
fgëpos64


	)

785 
	#f£ços
 
f£ços64


	)

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

792 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

793 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

794 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

801 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

803 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifde‡
__USE_MISC


808 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

809 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥º‹
 (
__c⁄°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bôs/sys_îæi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 #ifde‡
__USE_MISC


836 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

841 
deföed
 
__USE_MISC
)

846 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

852 
	`p˛o£
 (
FILE
 *
__°ªam
);

856 #ifdef 
__USE_POSIX


858 *
	$˘îmid
 (*
__s
Ë
__THROW
;

862 #ifde‡
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

873 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

875 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

876 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

877 
_G_va_li°
 
__¨gs
)

878 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

882 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


886 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

890 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

893 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

896 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


900 
	#__√ed_gë›t


	)

901 
	~<gë›t.h
>

906 #ifde‡
__USE_EXTERN_INLINES


907 
	~<bôs/°dio.h
>

909 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


910 
	~<bôs/°dio2.h
>

912 #ifde‡
__LDBL_COMPAT


913 
	~<bôs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps
 
mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

673 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp
 
mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
), 
mko°emps64
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps
 
mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713 
__END_NAMESPACE_STD


716 #ifdef 
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

730 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef 
__USE_GNU


740 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747 
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

752 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

757 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

760 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

761 
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768 
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__BEGIN_NAMESPACE_STD


780 
div_t
 
	$div
 (
__numî
, 
__díom
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

783 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787 
__BEGIN_NAMESPACE_C99


788 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

789 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_C99


795 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

822 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

833 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

834 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

836 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

837 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

841 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

842 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

845 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

858 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

861 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

865 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

866 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

868 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

869 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

870 
__THROW
;

871 
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

892 **
__ª°ri˘
 
__vÆuï
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

932 
__THROW
 
	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/stropts.h

19 #i‚de‡
_STROPTS_H


20 
	#_STROPTS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/xtôy≥s.h
>

26 #i‚de‡
__gid_t_deföed


27 
__gid_t
 
	tgid_t
;

28 
	#__gid_t_deföed


	)

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 
__t_usˇœr_t
 
	tt_usˇœr_t
;

39 
	~<bôs/°r›ts.h
>

42 
__BEGIN_DECLS


45 
	$iß°ªam
 (
__fûdes
Ë
__THROW
;

51 
	`gëmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

52 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

53 *
__ª°ri˘
 
__Êag•
);

60 
	`gëpmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

61 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

62 *
__ª°ri˘
 
__b™dp
, *__ª°ri˘ 
__Êag•
);

67 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

73 
	`putmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

74 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__Êags
);

80 
	`puçmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

81 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__b™d
, 
__Êags
);

85 
	$Áâach
 (
__fûdes
, 
__c⁄°
 *
__∑th
Ë
__THROW
;

88 
	$fdëach
 (
__c⁄°
 *
__∑th
Ë
__THROW
;

90 
__END_DECLS


	@/usr/include/sys/file.h

19 #i‚def 
_SYS_FILE_H


20 
	#_SYS_FILE_H
 1

	)

22 
	~<„©uªs.h
>

24 #i‚def 
_FCNTL_H


25 
	~<f˙é.h
>

28 
	g__BEGIN_DECLS


33 #i‚de‡
L_SET


34 
	#L_SET
 0

	)

35 
	#L_INCR
 1

	)

36 
	#L_XTND
 2

	)

41 
	#LOCK_SH
 1

	)

42 
	#LOCK_EX
 2

	)

43 
	#LOCK_UN
 8

	)

46 
	#LOCK_NB
 4

	)

51 
	$Êock
 (
__fd
, 
__›î©i⁄
Ë
__THROW
;

54 
__END_DECLS


	@/usr/include/sys/io.h

19 #i‚def 
_SYS_IO_H


20 
	#_SYS_IO_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


33 
	$i›îm
 (
__‰om
, 
__num
,

34 
__tu∫_⁄
Ë
__THROW
;

39 
	$i›l
 (
__Àvñ
Ë
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

43 
__ölöe
 

44 
	$öb
 (
__p‹t
)

46 
_v
;

48 
__asm__
 
	`__vﬁ©ûe__
 ("öb %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

49  
_v
;

50 
	}
}

52 
__ölöe
 

53 
	$öb_p
 (
__p‹t
)

55 
_v
;

57 
__asm__
 
	`__vﬁ©ûe__
 ("öb %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

58  
_v
;

59 
	}
}

61 
__ölöe
 

62 
	$öw
 (
__p‹t
)

64 
_v
;

66 
__asm__
 
	`__vﬁ©ûe__
 ("öw %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

67  
_v
;

68 
	}
}

70 
__ölöe
 

71 
	$öw_p
 (
__p‹t
)

73 
_v
;

75 
__asm__
 
	`__vﬁ©ûe__
 ("öw %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

76  
_v
;

77 
	}
}

79 
__ölöe
 

80 
	$öl
 (
__p‹t
)

82 
_v
;

84 
__asm__
 
	`__vﬁ©ûe__
 ("ö»%w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

85  
_v
;

86 
	}
}

88 
__ölöe
 

89 
	$öl_p
 (
__p‹t
)

91 
_v
;

92 
__asm__
 
	`__vﬁ©ûe__
 ("ö»%w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

93  
_v
;

94 
	}
}

96 
__ölöe
 

97 
	$outb
 (
__vÆue
, 
__p‹t
)

99 
__asm__
 
	`__vﬁ©ûe__
 ("outb %b0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

100 
	}
}

102 
__ölöe
 

103 
	$outb_p
 (
__vÆue
, 
__p‹t
)

105 
__asm__
 
	`__vﬁ©ûe__
 ("outb %b0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

106 "Nd" (
__p‹t
));

107 
	}
}

109 
__ölöe
 

110 
	$outw
 (
__vÆue
, 
__p‹t
)

112 
__asm__
 
	`__vﬁ©ûe__
 ("outw %w0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

114 
	}
}

116 
__ölöe
 

117 
	$outw_p
 (
__vÆue
, 
__p‹t
)

119 
__asm__
 
	`__vﬁ©ûe__
 ("outw %w0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

120 "Nd" (
__p‹t
));

121 
	}
}

123 
__ölöe
 

124 
	$oué
 (
__vÆue
, 
__p‹t
)

126 
__asm__
 
	`__vﬁ©ûe__
 ("oué %0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

127 
	}
}

129 
__ölöe
 

130 
	$oué_p
 (
__vÆue
, 
__p‹t
)

132 
__asm__
 
	`__vﬁ©ûe__
 ("oué %0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

133 "Nd" (
__p‹t
));

134 
	}
}

136 
__ölöe
 

137 
	$ösb
 (
__p‹t
, *
addr
, 
__cou¡
)

139 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; insb":"=D" (
addr
), "=c" (
__cou¡
)

140 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

141 
	}
}

143 
__ölöe
 

144 
	$ösw
 (
__p‹t
, *
addr
, 
__cou¡
)

146 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; insw":"=D" (
addr
), "=c" (
__cou¡
)

147 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

148 
	}
}

150 
__ölöe
 

151 
	$ö¶
 (
__p‹t
, *
addr
, 
__cou¡
)

153 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; in¶":"=D" (
addr
), "=c" (
__cou¡
)

154 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

155 
	}
}

157 
__ölöe
 

158 
	$outsb
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

160 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsb":"=S" (
addr
), "=c" (
__cou¡
)

161 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

162 
	}
}

164 
__ölöe
 

165 
	$outsw
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

167 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsw":"=S" (
addr
), "=c" (
__cou¡
)

168 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

169 
	}
}

171 
__ölöe
 

172 
	$out¶
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

174 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; out¶":"=S" (
addr
), "=c" (
__cou¡
)

175 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

176 
	}
}

180 
	g__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/ipc.h

19 #i‚de‡
_SYS_IPC_H


20 
	#_SYS_IPC_H
 1

	)

22 
	~<„©uªs.h
>

24 #i‡!
deföed
 
__USE_SVID
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

29 
	~<bôs/ù˘y≥s.h
>

30 
	~<bôs/ùc.h
>

32 #i‚de‡
__uid_t_deföed


33 
__uid_t
 
	tuid_t
;

34 
	#__uid_t_deföed


	)

37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__mode_t_deföed


43 
__mode_t
 
	tmode_t
;

44 
	#__mode_t_deföed


	)

47 #i‚de‡
__key_t_deföed


48 
__key_t
 
	tkey_t
;

49 
	#__key_t_deföed


	)

52 
__BEGIN_DECLS


55 
key_t
 
	$·ok
 (
__c⁄°
 *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

57 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/msg.h

20 #i‚de‡
_SYS_MSG_H


21 
	#_SYS_MSG_H


	)

23 
	~<„©uªs.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

29 
	~<sys/ùc.h
>

32 
	~<bôs/msq.h
>

35 
	#__√ed_time_t


	)

36 
	~<time.h
>

38 #i‚de‡
__pid_t_deföed


39 
__pid_t
 
	tpid_t
;

40 
	#__pid_t_deföed


	)

43 #i‚de‡
__ssize_t_deföed


44 
__ssize_t
 
	tssize_t
;

45 
	#__ssize_t_deföed


	)

51 #ifde‡
__USE_GNU


53 
	smsgbuf


55 
	mmty≥
;

56 
	mmãxt
[1];

61 
__BEGIN_DECLS


64 
	$msg˘l
 (
__msqid
, 
__cmd
, 
msqid_ds
 *
__buf
Ë
__THROW
;

67 
	$msggë
 (
key_t
 
__key
, 
__msgÊg
Ë
__THROW
;

73 
ssize_t
 
	`msgrcv
 (
__msqid
, *
__msgp
, 
size_t
 
__msgsz
,

74 
__msgtyp
, 
__msgÊg
);

80 
	`msg¢d
 (
__msqid
, 
__c⁄°
 *
__msgp
, 
size_t
 
__msgsz
,

81 
__msgÊg
);

83 
__END_DECLS


	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/sem.h

19 #i‚de‡
_SYS_SEM_H


20 
	#_SYS_SEM_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<sys/ùc.h
>

31 
	~<bôs/£m.h
>

33 #ifde‡
__USE_GNU


34 
	#__√ed_time•ec


	)

35 
	~<time.h
>

42 
	s£mbuf


44 
	m£m_num
;

45 
	m£m_›
;

46 
	m£m_Êg
;

50 
__BEGIN_DECLS


53 
	$£m˘l
 (
__£mid
, 
__£mnum
, 
__cmd
, ...Ë
__THROW
;

56 
	$£mgë
 (
key_t
 
__key
, 
__n£ms
, 
__£mÊg
Ë
__THROW
;

59 
	$£m›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
Ë
__THROW
;

61 #ifde‡
__USE_GNU


63 
	$£mtimed›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
,

64 
__c⁄°
 
time•ec
 *
__timeout
Ë
__THROW
;

67 
__END_DECLS


	@/usr/include/sys/shm.h

19 #i‚de‡
_SYS_SHM_H


20 
	#_SYS_SHM_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<sys/ùc.h
>

31 
	~<bôs/shm.h
>

34 
	#__√ed_time_t


	)

35 
	~<time.h
>

37 #ifde‡
__USE_XOPEN


38 #i‚de‡
__pid_t_deföed


39 
__pid_t
 
	tpid_t
;

40 
	#__pid_t_deföed


	)

45 
__BEGIN_DECLS


51 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

54 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

57 *
	$shm©
 (
__shmid
, 
__c⁄°
 *
__shmaddr
, 
__shmÊg
)

58 
__THROW
;

61 
	$shmdt
 (
__c⁄°
 *
__shmaddr
Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

365 
__c⁄°
 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 
__c⁄°
 *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/times.h

23 #i‚def 
_SYS_TIMES_H


24 
	#_SYS_TIMES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_˛ock_t


	)

29 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	stms


37 
˛ock_t
 
	mtms_utime
;

38 
˛ock_t
 
	mtms_°ime
;

40 
˛ock_t
 
	mtms_cutime
;

41 
˛ock_t
 
	mtms_c°ime
;

49 
˛ock_t
 
	$times
 (
tms
 *
__buf„r
Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #ifde‡
__USE_UNIX98


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #ifde‡
__USE_UNIX98


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #ifde‡
__USE_UNIX98


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #ifde‡
__USE_UNIX98


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


448 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

449 
__THROW
;

456 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

465 
	`∑u£
 ();

469 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

470 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

472 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


474 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

479 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

480 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ATFILE


487 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

488 
__gid_t
 
__group
, 
__Êag
)

489 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

493 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

495 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


497 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

507 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

509 #ifdef 
__USE_GNU


513 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

516 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


520 *
	$gëwd
 (*
__buf
)

521 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

526 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

529 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

531 #ifde‡
__USE_GNU


534 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

538 **
__ívú⁄
;

539 #ifde‡
__USE_GNU


540 **
ívú⁄
;

546 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

547 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

549 #ifde‡
__USE_XOPEN2K8


552 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

553 
__THROW
;

558 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((1));

563 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

564 
__THROW
 
	`__n⁄nuŒ
 ((1));

568 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1));

573 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

574 
__THROW
 
	`__n⁄nuŒ
 ((1));

579 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

580 
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #ifde‡
__USE_GNU


585 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

586 *
__c⁄°
 
__ívp
[])

587 
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


593 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

598 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

604 
	~<bôs/c⁄‚ame.h
>

607 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

611 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

614 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

616 #ifdef 
__USE_POSIX2


618 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

623 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

626 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

630 #i‚de‡
__FAVOR_BSD


631 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

633 #ifde‡
__REDIRECT_NTH


634 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

636 
	#gëpgΩ
 
__gëpgid


	)

641 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 #ifde‡
__USE_XOPEN_EXTENDED


643 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

652 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


663 #i‚de‡
__FAVOR_BSD


667 
	$£çgΩ
 (Ë
__THROW
;

672 #ifde‡
__REDIRECT_NTH


673 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

675 
	#£çgΩ
 
£çgid


	)

684 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

686 #ifde‡
__USE_XOPEN_EXTENDED


688 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

692 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

695 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

698 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

701 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

706 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

708 #ifdef 
__USE_GNU


710 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

717 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

734 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

736 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


739 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


744 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

747 #ifde‡
__USE_GNU


750 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

751 
__THROW
;

755 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

756 
__THROW
;

760 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

761 
__THROW
;

765 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

766 
__THROW
;

773 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

775 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


780 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

786 *
	$ây«me
 (
__fd
Ë
__THROW
;

790 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

791 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

795 
	$ißây
 (
__fd
Ë
__THROW
;

797 #i‡
deföed
 
__USE_BSD
 \

798 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

801 
	$ây¶Ÿ
 (Ë
__THROW
;

806 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 #ifde‡
__USE_ATFILE


812 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

813 
__c⁄°
 *
__to
, 
__Êags
)

814 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

817 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


819 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

825 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

826 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

830 #ifde‡
__USE_ATFILE


832 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

833 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

836 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

837 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

838 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

842 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_ATFILE


846 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

847 
__THROW
 
	`__n⁄nuŒ
 ((2));

851 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

858 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

865 *
	`gëlogö
 ();

866 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


873 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

876 #ifdef 
__USE_BSD


878 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_POSIX2


886 
	#__√ed_gë›t


	)

887 
	~<gë›t.h
>

891 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


895 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

902 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

913 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$vh™gup
 (Ë
__THROW
;

925 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

933 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

934 
size_t
 
__off£t
, 
__sˇÀ
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

945 *
	$gëu£rshñl
 (Ë
__THROW
;

946 
	$ídu£rshñl
 (Ë
__THROW
;

947 
	$£tu£rshñl
 (Ë
__THROW
;

953 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

957 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

960 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

964 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


973 
	`fsync
 (
__fd
);

977 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


980 
	`gëho°id
 ();

983 
	$sync
 (Ë
__THROW
;

988 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

993 
	$gëdèbÀsize
 (Ë
__THROW
;

997 #i‚de‡
__USE_FILE_OFFSET64


998 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 #ifde‡
__REDIRECT_NTH


1002 
	`__REDIRECT_NTH
 (
åunˇã
,

1003 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1004 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1006 
	#åunˇã
 
åunˇã64


	)

1009 #ifde‡
__USE_LARGEFILE64


1010 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1016 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1019 #i‚de‡
__USE_FILE_OFFSET64


1020 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1022 #ifde‡
__REDIRECT_NTH


1023 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1024 
·runˇã64
Ë
__wur
;

1026 
	#·runˇã
 
·runˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1036 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #ifde‡
__USE_XOPEN


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1150 
	~<bôs/uni°d.h
>

1153 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/msr-index.h

1 #i‚de‡
_ASM_X86_MSR_INDEX_H


2 
	#_ASM_X86_MSR_INDEX_H


	)

7 
	#MSR_EFER
 0xc0000080

	)

8 
	#MSR_STAR
 0xc0000081

	)

9 
	#MSR_LSTAR
 0xc0000082

	)

10 
	#MSR_CSTAR
 0xc0000083

	)

11 
	#MSR_SYSCALL_MASK
 0xc0000084

	)

12 
	#MSR_FS_BASE
 0xc0000100

	)

13 
	#MSR_GS_BASE
 0xc0000101

	)

14 
	#MSR_KERNEL_GS_BASE
 0xc0000102

	)

17 
	#_EFER_SCE
 0

	)

18 
	#_EFER_LME
 8

	)

19 
	#_EFER_LMA
 10

	)

20 
	#_EFER_NX
 11

	)

21 
	#_EFER_SVME
 12

	)

22 
	#_EFER_FFXSR
 14

	)

24 
	#EFER_SCE
 (1<<
_EFER_SCE
)

	)

25 
	#EFER_LME
 (1<<
_EFER_LME
)

	)

26 
	#EFER_LMA
 (1<<
_EFER_LMA
)

	)

27 
	#EFER_NX
 (1<<
_EFER_NX
)

	)

28 
	#EFER_SVME
 (1<<
_EFER_SVME
)

	)

29 
	#EFER_FFXSR
 (1<<
_EFER_FFXSR
)

	)

32 
	#MSR_IA32_PERFCTR0
 0x000000c1

	)

33 
	#MSR_IA32_PERFCTR1
 0x000000c2

	)

34 
	#MSR_FSB_FREQ
 0x000000cd

	)

36 
	#MSR_MTRRˇp
 0x000000„

	)

37 
	#MSR_IA32_BBL_CR_CTL
 0x00000119

	)

39 
	#MSR_IA32_SYSENTER_CS
 0x00000174

	)

40 
	#MSR_IA32_SYSENTER_ESP
 0x00000175

	)

41 
	#MSR_IA32_SYSENTER_EIP
 0x00000176

	)

43 
	#MSR_IA32_MCG_CAP
 0x00000179

	)

44 
	#MSR_IA32_MCG_STATUS
 0x0000017a

	)

45 
	#MSR_IA32_MCG_CTL
 0x0000017b

	)

47 
	#MSR_IA32_PEBS_ENABLE
 0x000003f1

	)

48 
	#MSR_IA32_DS_AREA
 0x00000600

	)

49 
	#MSR_IA32_PERF_CAPABILITIES
 0x00000345

	)

51 
	#MSR_MTRRfix64K_00000
 0x00000250

	)

52 
	#MSR_MTRRfix16K_80000
 0x00000258

	)

53 
	#MSR_MTRRfix16K_A0000
 0x00000259

	)

54 
	#MSR_MTRRfix4K_C0000
 0x00000268

	)

55 
	#MSR_MTRRfix4K_C8000
 0x00000269

	)

56 
	#MSR_MTRRfix4K_D0000
 0x0000026a

	)

57 
	#MSR_MTRRfix4K_D8000
 0x0000026b

	)

58 
	#MSR_MTRRfix4K_E0000
 0x0000026c

	)

59 
	#MSR_MTRRfix4K_E8000
 0x0000026d

	)

60 
	#MSR_MTRRfix4K_F0000
 0x0000026e

	)

61 
	#MSR_MTRRfix4K_F8000
 0x0000026f

	)

62 
	#MSR_MTRRdefTy≥
 0x000002ff

	)

64 
	#MSR_IA32_CR_PAT
 0x00000277

	)

66 
	#MSR_IA32_DEBUGCTLMSR
 0x000001d9

	)

67 
	#MSR_IA32_LASTBRANCHFROMIP
 0x000001db

	)

68 
	#MSR_IA32_LASTBRANCHTOIP
 0x000001dc

	)

69 
	#MSR_IA32_LASTINTFROMIP
 0x000001dd

	)

70 
	#MSR_IA32_LASTINTTOIP
 0x000001de

	)

73 
	#_DEBUGCTLMSR_LBR
 0

	)

74 
	#_DEBUGCTLMSR_BTF
 1

	)

76 
	#DEBUGCTLMSR_LBR
 (1UL << 
_DEBUGCTLMSR_LBR
)

	)

77 
	#DEBUGCTLMSR_BTF
 (1UL << 
_DEBUGCTLMSR_BTF
)

	)

79 
	#MSR_IA32_MC0_CTL
 0x00000400

	)

80 
	#MSR_IA32_MC0_STATUS
 0x00000401

	)

81 
	#MSR_IA32_MC0_ADDR
 0x00000402

	)

82 
	#MSR_IA32_MC0_MISC
 0x00000403

	)

84 
	#MSR_IA32_MCx_CTL
(
x
Ë(
MSR_IA32_MC0_CTL
 + 4*(x))

	)

85 
	#MSR_IA32_MCx_STATUS
(
x
Ë(
MSR_IA32_MC0_STATUS
 + 4*(x))

	)

86 
	#MSR_IA32_MCx_ADDR
(
x
Ë(
MSR_IA32_MC0_ADDR
 + 4*(x))

	)

87 
	#MSR_IA32_MCx_MISC
(
x
Ë(
MSR_IA32_MC0_MISC
 + 4*(x))

	)

90 
	#MSR_IA32_MC0_CTL2
 0x00000280

	)

91 
	#MSR_IA32_MCx_CTL2
(
x
Ë(
MSR_IA32_MC0_CTL2
 + (x))

	)

93 
	#CMCI_EN
 (1ULL << 30)

	)

94 
	#CMCI_THRESHOLD_MASK
 0xffffULL

	)

96 
	#MSR_P6_PERFCTR0
 0x000000c1

	)

97 
	#MSR_P6_PERFCTR1
 0x000000c2

	)

98 
	#MSR_P6_EVNTSEL0
 0x00000186

	)

99 
	#MSR_P6_EVNTSEL1
 0x00000187

	)

104 
	#MSR_AMD64_PATCH_LEVEL
 0x0000008b

	)

105 
	#MSR_AMD64_NB_CFG
 0xc001001f

	)

106 
	#MSR_AMD64_PATCH_LOADER
 0xc0010020

	)

107 
	#MSR_AMD64_OSVW_ID_LENGTH
 0xc0010140

	)

108 
	#MSR_AMD64_OSVW_STATUS
 0xc0010141

	)

109 
	#MSR_AMD64_IBSFETCHCTL
 0xc0011030

	)

110 
	#MSR_AMD64_IBSFETCHLINAD
 0xc0011031

	)

111 
	#MSR_AMD64_IBSFETCHPHYSAD
 0xc0011032

	)

112 
	#MSR_AMD64_IBSOPCTL
 0xc0011033

	)

113 
	#MSR_AMD64_IBSOPRIP
 0xc0011034

	)

114 
	#MSR_AMD64_IBSOPDATA
 0xc0011035

	)

115 
	#MSR_AMD64_IBSOPDATA2
 0xc0011036

	)

116 
	#MSR_AMD64_IBSOPDATA3
 0xc0011037

	)

117 
	#MSR_AMD64_IBSDCLINAD
 0xc0011038

	)

118 
	#MSR_AMD64_IBSDCPHYSAD
 0xc0011039

	)

119 
	#MSR_AMD64_IBSCTL
 0xc001103a

	)

122 
	#MSR_FAM10H_MMIO_CONF_BASE
 0xc0010058

	)

123 
	#FAM10H_MMIO_CONF_ENABLE
 (1<<0)

	)

124 
	#FAM10H_MMIO_CONF_BUSRANGE_MASK
 0xf

	)

125 
	#FAM10H_MMIO_CONF_BUSRANGE_SHIFT
 2

	)

126 
	#FAM10H_MMIO_CONF_BASE_MASK
 0xfffffff

	)

127 
	#FAM10H_MMIO_CONF_BASE_SHIFT
 20

	)

128 
	#MSR_FAM10H_NODE_ID
 0xc001100c

	)

131 
	#MSR_K8_TOP_MEM1
 0xc001001a

	)

132 
	#MSR_K8_TOP_MEM2
 0xc001001d

	)

133 
	#MSR_K8_SYSCFG
 0xc0010010

	)

134 
	#MSR_K8_INT_PENDING_MSG
 0xc0010055

	)

136 
	#K8_INTP_C1E_ACTIVE_MASK
 0x18000000

	)

137 
	#MSR_K8_TSEG_ADDR
 0xc0010112

	)

138 
	#K8_MTRRFIXRANGE_DRAM_ENABLE
 0x00040000

	)

139 
	#K8_MTRRFIXRANGE_DRAM_MODIFY
 0x00080000

	)

140 
	#K8_MTRR_RDMEM_WRMEM_MASK
 0x18181818

	)

143 
	#MSR_K7_EVNTSEL0
 0xc0010000

	)

144 
	#MSR_K7_PERFCTR0
 0xc0010004

	)

145 
	#MSR_K7_EVNTSEL1
 0xc0010001

	)

146 
	#MSR_K7_PERFCTR1
 0xc0010005

	)

147 
	#MSR_K7_EVNTSEL2
 0xc0010002

	)

148 
	#MSR_K7_PERFCTR2
 0xc0010006

	)

149 
	#MSR_K7_EVNTSEL3
 0xc0010003

	)

150 
	#MSR_K7_PERFCTR3
 0xc0010007

	)

151 
	#MSR_K7_CLK_CTL
 0xc001001b

	)

152 
	#MSR_K7_HWCR
 0xc0010015

	)

153 
	#MSR_K7_FID_VID_CTL
 0xc0010041

	)

154 
	#MSR_K7_FID_VID_STATUS
 0xc0010042

	)

157 
	#MSR_K6_EFER
 0xc0000080

	)

158 
	#MSR_K6_STAR
 0xc0000081

	)

159 
	#MSR_K6_WHCR
 0xc0000082

	)

160 
	#MSR_K6_UWCCR
 0xc0000085

	)

161 
	#MSR_K6_EPMR
 0xc0000086

	)

162 
	#MSR_K6_PSOR
 0xc0000087

	)

163 
	#MSR_K6_PFIR
 0xc0000088

	)

166 
	#MSR_IDT_FCR1
 0x00000107

	)

167 
	#MSR_IDT_FCR2
 0x00000108

	)

168 
	#MSR_IDT_FCR3
 0x00000109

	)

169 
	#MSR_IDT_FCR4
 0x0000010a

	)

171 
	#MSR_IDT_MCR0
 0x00000110

	)

172 
	#MSR_IDT_MCR1
 0x00000111

	)

173 
	#MSR_IDT_MCR2
 0x00000112

	)

174 
	#MSR_IDT_MCR3
 0x00000113

	)

175 
	#MSR_IDT_MCR4
 0x00000114

	)

176 
	#MSR_IDT_MCR5
 0x00000115

	)

177 
	#MSR_IDT_MCR6
 0x00000116

	)

178 
	#MSR_IDT_MCR7
 0x00000117

	)

179 
	#MSR_IDT_MCR_CTRL
 0x00000120

	)

182 
	#MSR_VIA_FCR
 0x00001107

	)

183 
	#MSR_VIA_LONGHAUL
 0x0000110a

	)

184 
	#MSR_VIA_RNG
 0x0000110b

	)

185 
	#MSR_VIA_BCR2
 0x00001147

	)

188 
	#MSR_TMTA_LONGRUN_CTRL
 0x80868010

	)

189 
	#MSR_TMTA_LONGRUN_FLAGS
 0x80868011

	)

190 
	#MSR_TMTA_LRTI_READOUT
 0x80868018

	)

191 
	#MSR_TMTA_LRTI_VOLT_MHZ
 0x8086801a

	)

194 
	#MSR_IA32_P5_MC_ADDR
 0x00000000

	)

195 
	#MSR_IA32_P5_MC_TYPE
 0x00000001

	)

196 
	#MSR_IA32_TSC
 0x00000010

	)

197 
	#MSR_IA32_PLATFORM_ID
 0x00000017

	)

198 
	#MSR_IA32_EBL_CR_POWERON
 0x0000002a

	)

199 
	#MSR_IA32_FEATURE_CONTROL
 0x0000003a

	)

201 
	#FEATURE_CONTROL_LOCKED
 (1<<0)

	)

202 
	#FEATURE_CONTROL_VMXON_ENABLED
 (1<<2)

	)

204 
	#MSR_IA32_APICBASE
 0x0000001b

	)

205 
	#MSR_IA32_APICBASE_BSP
 (1<<8)

	)

206 
	#MSR_IA32_APICBASE_ENABLE
 (1<<11)

	)

207 
	#MSR_IA32_APICBASE_BASE
 (0xfffff<<12)

	)

209 
	#MSR_IA32_UCODE_WRITE
 0x00000079

	)

210 
	#MSR_IA32_UCODE_REV
 0x0000008b

	)

212 
	#MSR_IA32_PERF_STATUS
 0x00000198

	)

213 
	#MSR_IA32_PERF_CTL
 0x00000199

	)

215 
	#MSR_IA32_MPERF
 0x000000e7

	)

216 
	#MSR_IA32_APERF
 0x000000e8

	)

218 
	#MSR_IA32_THERM_CONTROL
 0x0000019a

	)

219 
	#MSR_IA32_THERM_INTERRUPT
 0x0000019b

	)

221 
	#THERM_INT_LOW_ENABLE
 (1 << 0)

	)

222 
	#THERM_INT_HIGH_ENABLE
 (1 << 1)

	)

224 
	#MSR_IA32_THERM_STATUS
 0x0000019c

	)

226 
	#THERM_STATUS_PROCHOT
 (1 << 0)

	)

228 
	#MSR_THERM2_CTL
 0x0000019d

	)

230 
	#MSR_THERM2_CTL_TM_SELECT
 (1ULL << 16)

	)

232 
	#MSR_IA32_MISC_ENABLE
 0x000001a0

	)

235 
	#MSR_IA32_MISC_ENABLE_FAST_STRING
 (1ULL << 0)

	)

236 
	#MSR_IA32_MISC_ENABLE_TCC
 (1ULL << 1)

	)

237 
	#MSR_IA32_MISC_ENABLE_EMON
 (1ULL << 7)

	)

238 
	#MSR_IA32_MISC_ENABLE_BTS_UNAVAIL
 (1ULL << 11)

	)

239 
	#MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL
 (1ULL << 12)

	)

240 
	#MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP
 (1ULL << 16)

	)

241 
	#MSR_IA32_MISC_ENABLE_MWAIT
 (1ULL << 18)

	)

242 
	#MSR_IA32_MISC_ENABLE_LIMIT_CPUID
 (1ULL << 22)

	)

243 
	#MSR_IA32_MISC_ENABLE_XTPR_DISABLE
 (1ULL << 23)

	)

244 
	#MSR_IA32_MISC_ENABLE_XD_DISABLE
 (1ULL << 34)

	)

247 
	#MSR_IA32_MISC_ENABLE_X87_COMPAT
 (1ULL << 2)

	)

248 
	#MSR_IA32_MISC_ENABLE_TM1
 (1ULL << 3)

	)

249 
	#MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE
 (1ULL << 4)

	)

250 
	#MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE
 (1ULL << 6)

	)

251 
	#MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK
 (1ULL << 8)

	)

252 
	#MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE
 (1ULL << 9)

	)

253 
	#MSR_IA32_MISC_ENABLE_FERR
 (1ULL << 10)

	)

254 
	#MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX
 (1ULL << 10)

	)

255 
	#MSR_IA32_MISC_ENABLE_TM2
 (1ULL << 13)

	)

256 
	#MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE
 (1ULL << 19)

	)

257 
	#MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK
 (1ULL << 20)

	)

258 
	#MSR_IA32_MISC_ENABLE_L1D_CONTEXT
 (1ULL << 24)

	)

259 
	#MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE
 (1ULL << 37)

	)

260 
	#MSR_IA32_MISC_ENABLE_TURBO_DISABLE
 (1ULL << 38)

	)

261 
	#MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE
 (1ULL << 39)

	)

264 
	#MSR_IA32_MCG_EAX
 0x00000180

	)

265 
	#MSR_IA32_MCG_EBX
 0x00000181

	)

266 
	#MSR_IA32_MCG_ECX
 0x00000182

	)

267 
	#MSR_IA32_MCG_EDX
 0x00000183

	)

268 
	#MSR_IA32_MCG_ESI
 0x00000184

	)

269 
	#MSR_IA32_MCG_EDI
 0x00000185

	)

270 
	#MSR_IA32_MCG_EBP
 0x00000186

	)

271 
	#MSR_IA32_MCG_ESP
 0x00000187

	)

272 
	#MSR_IA32_MCG_EFLAGS
 0x00000188

	)

273 
	#MSR_IA32_MCG_EIP
 0x00000189

	)

274 
	#MSR_IA32_MCG_RESERVED
 0x0000018a

	)

277 
	#MSR_P4_BPU_PERFCTR0
 0x00000300

	)

278 
	#MSR_P4_BPU_PERFCTR1
 0x00000301

	)

279 
	#MSR_P4_BPU_PERFCTR2
 0x00000302

	)

280 
	#MSR_P4_BPU_PERFCTR3
 0x00000303

	)

281 
	#MSR_P4_MS_PERFCTR0
 0x00000304

	)

282 
	#MSR_P4_MS_PERFCTR1
 0x00000305

	)

283 
	#MSR_P4_MS_PERFCTR2
 0x00000306

	)

284 
	#MSR_P4_MS_PERFCTR3
 0x00000307

	)

285 
	#MSR_P4_FLAME_PERFCTR0
 0x00000308

	)

286 
	#MSR_P4_FLAME_PERFCTR1
 0x00000309

	)

287 
	#MSR_P4_FLAME_PERFCTR2
 0x0000030a

	)

288 
	#MSR_P4_FLAME_PERFCTR3
 0x0000030b

	)

289 
	#MSR_P4_IQ_PERFCTR0
 0x0000030c

	)

290 
	#MSR_P4_IQ_PERFCTR1
 0x0000030d

	)

291 
	#MSR_P4_IQ_PERFCTR2
 0x0000030e

	)

292 
	#MSR_P4_IQ_PERFCTR3
 0x0000030f

	)

293 
	#MSR_P4_IQ_PERFCTR4
 0x00000310

	)

294 
	#MSR_P4_IQ_PERFCTR5
 0x00000311

	)

295 
	#MSR_P4_BPU_CCCR0
 0x00000360

	)

296 
	#MSR_P4_BPU_CCCR1
 0x00000361

	)

297 
	#MSR_P4_BPU_CCCR2
 0x00000362

	)

298 
	#MSR_P4_BPU_CCCR3
 0x00000363

	)

299 
	#MSR_P4_MS_CCCR0
 0x00000364

	)

300 
	#MSR_P4_MS_CCCR1
 0x00000365

	)

301 
	#MSR_P4_MS_CCCR2
 0x00000366

	)

302 
	#MSR_P4_MS_CCCR3
 0x00000367

	)

303 
	#MSR_P4_FLAME_CCCR0
 0x00000368

	)

304 
	#MSR_P4_FLAME_CCCR1
 0x00000369

	)

305 
	#MSR_P4_FLAME_CCCR2
 0x0000036a

	)

306 
	#MSR_P4_FLAME_CCCR3
 0x0000036b

	)

307 
	#MSR_P4_IQ_CCCR0
 0x0000036c

	)

308 
	#MSR_P4_IQ_CCCR1
 0x0000036d

	)

309 
	#MSR_P4_IQ_CCCR2
 0x0000036e

	)

310 
	#MSR_P4_IQ_CCCR3
 0x0000036f

	)

311 
	#MSR_P4_IQ_CCCR4
 0x00000370

	)

312 
	#MSR_P4_IQ_CCCR5
 0x00000371

	)

313 
	#MSR_P4_ALF_ESCR0
 0x000003ˇ

	)

314 
	#MSR_P4_ALF_ESCR1
 0x000003cb

	)

315 
	#MSR_P4_BPU_ESCR0
 0x000003b2

	)

316 
	#MSR_P4_BPU_ESCR1
 0x000003b3

	)

317 
	#MSR_P4_BSU_ESCR0
 0x000003a0

	)

318 
	#MSR_P4_BSU_ESCR1
 0x000003a1

	)

319 
	#MSR_P4_CRU_ESCR0
 0x000003b8

	)

320 
	#MSR_P4_CRU_ESCR1
 0x000003b9

	)

321 
	#MSR_P4_CRU_ESCR2
 0x000003cc

	)

322 
	#MSR_P4_CRU_ESCR3
 0x000003cd

	)

323 
	#MSR_P4_CRU_ESCR4
 0x000003e0

	)

324 
	#MSR_P4_CRU_ESCR5
 0x000003e1

	)

325 
	#MSR_P4_DAC_ESCR0
 0x000003a8

	)

326 
	#MSR_P4_DAC_ESCR1
 0x000003a9

	)

327 
	#MSR_P4_FIRM_ESCR0
 0x000003a4

	)

328 
	#MSR_P4_FIRM_ESCR1
 0x000003a5

	)

329 
	#MSR_P4_FLAME_ESCR0
 0x000003a6

	)

330 
	#MSR_P4_FLAME_ESCR1
 0x000003a7

	)

331 
	#MSR_P4_FSB_ESCR0
 0x000003a2

	)

332 
	#MSR_P4_FSB_ESCR1
 0x000003a3

	)

333 
	#MSR_P4_IQ_ESCR0
 0x000003ba

	)

334 
	#MSR_P4_IQ_ESCR1
 0x000003bb

	)

335 
	#MSR_P4_IS_ESCR0
 0x000003b4

	)

336 
	#MSR_P4_IS_ESCR1
 0x000003b5

	)

337 
	#MSR_P4_ITLB_ESCR0
 0x000003b6

	)

338 
	#MSR_P4_ITLB_ESCR1
 0x000003b7

	)

339 
	#MSR_P4_IX_ESCR0
 0x000003c8

	)

340 
	#MSR_P4_IX_ESCR1
 0x000003c9

	)

341 
	#MSR_P4_MOB_ESCR0
 0x000003Ø

	)

342 
	#MSR_P4_MOB_ESCR1
 0x000003ab

	)

343 
	#MSR_P4_MS_ESCR0
 0x000003c0

	)

344 
	#MSR_P4_MS_ESCR1
 0x000003c1

	)

345 
	#MSR_P4_PMH_ESCR0
 0x000003ac

	)

346 
	#MSR_P4_PMH_ESCR1
 0x000003ad

	)

347 
	#MSR_P4_RAT_ESCR0
 0x000003bc

	)

348 
	#MSR_P4_RAT_ESCR1
 0x000003bd

	)

349 
	#MSR_P4_SAAT_ESCR0
 0x000003´

	)

350 
	#MSR_P4_SAAT_ESCR1
 0x000003af

	)

351 
	#MSR_P4_SSU_ESCR0
 0x000003be

	)

352 
	#MSR_P4_SSU_ESCR1
 0x000003b‡

	)

354 
	#MSR_P4_TBPU_ESCR0
 0x000003c2

	)

355 
	#MSR_P4_TBPU_ESCR1
 0x000003c3

	)

356 
	#MSR_P4_TC_ESCR0
 0x000003c4

	)

357 
	#MSR_P4_TC_ESCR1
 0x000003c5

	)

358 
	#MSR_P4_U2L_ESCR0
 0x000003b0

	)

359 
	#MSR_P4_U2L_ESCR1
 0x000003b1

	)

362 
	#MSR_CORE_PERF_FIXED_CTR0
 0x00000309

	)

363 
	#MSR_CORE_PERF_FIXED_CTR1
 0x0000030a

	)

364 
	#MSR_CORE_PERF_FIXED_CTR2
 0x0000030b

	)

365 
	#MSR_CORE_PERF_FIXED_CTR_CTRL
 0x0000038d

	)

366 
	#MSR_CORE_PERF_GLOBAL_STATUS
 0x0000038e

	)

367 
	#MSR_CORE_PERF_GLOBAL_CTRL
 0x0000038f

	)

368 
	#MSR_CORE_PERF_GLOBAL_OVF_CTRL
 0x00000390

	)

371 
	#MSR_GEODE_BUSCONT_CONF0
 0x00001900

	)

374 
	#MSR_IA32_VMX_BASIC
 0x00000480

	)

375 
	#MSR_IA32_VMX_PINBASED_CTLS
 0x00000481

	)

376 
	#MSR_IA32_VMX_PROCBASED_CTLS
 0x00000482

	)

377 
	#MSR_IA32_VMX_EXIT_CTLS
 0x00000483

	)

378 
	#MSR_IA32_VMX_ENTRY_CTLS
 0x00000484

	)

379 
	#MSR_IA32_VMX_MISC
 0x00000485

	)

380 
	#MSR_IA32_VMX_CR0_FIXED0
 0x00000486

	)

381 
	#MSR_IA32_VMX_CR0_FIXED1
 0x00000487

	)

382 
	#MSR_IA32_VMX_CR4_FIXED0
 0x00000488

	)

383 
	#MSR_IA32_VMX_CR4_FIXED1
 0x00000489

	)

384 
	#MSR_IA32_VMX_VMCS_ENUM
 0x0000048a

	)

385 
	#MSR_IA32_VMX_PROCBASED_CTLS2
 0x0000048b

	)

386 
	#MSR_IA32_VMX_EPT_VPID_CAP
 0x0000048c

	)

390 
	#MSR_VM_CR
 0xc0010114

	)

391 
	#MSR_VM_IGNNE
 0xc0010115

	)

392 
	#MSR_VM_HSAVE_PA
 0xc0010117

	)

	@/usr/include/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/dlfcn.h

20 #i‚de‡
_DLFCN_H


25 
	#RTLD_LAZY
 0x00001

	)

26 
	#RTLD_NOW
 0x00002

	)

27 
	#RTLD_BINDING_MASK
 0x3

	)

28 
	#RTLD_NOLOAD
 0x00004

	)

29 
	#RTLD_DEEPBIND
 0x00008

	)

34 
	#RTLD_GLOBAL
 0x00100

	)

39 
	#RTLD_LOCAL
 0

	)

42 
	#RTLD_NODELETE
 0x01000

	)

44 #ifde‡
__USE_GNU


55 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

56 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

58 
__BEGIN_DECLS


61 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

109 
	#F_SETOWN_EX
 15

	)

110 
	#F_GETOWN_EX
 16

	)

113 #ifde‡
__USE_GNU


114 
	#F_SETLEASE
 1024

	)

115 
	#F_GETLEASE
 1025

	)

116 
	#F_NOTIFY
 1026

	)

117 
	#F_DUPFD_CLOEXEC
 1030

	)

122 
	#FD_CLOEXEC
 1

	)

125 
	#F_RDLCK
 0

	)

126 
	#F_WRLCK
 1

	)

127 
	#F_UNLCK
 2

	)

130 
	#F_EXLCK
 4

	)

131 
	#F_SHLCK
 8

	)

133 #ifde‡
__USE_BSD


135 
	#LOCK_SH
 1

	)

136 
	#LOCK_EX
 2

	)

137 
	#LOCK_NB
 4

	)

139 
	#LOCK_UN
 8

	)

142 #ifde‡
__USE_GNU


143 
	#LOCK_MAND
 32

	)

144 
	#LOCK_READ
 64

	)

145 
	#LOCK_WRITE
 128

	)

146 
	#LOCK_RW
 192

	)

149 #ifde‡
__USE_GNU


151 
	#DN_ACCESS
 0x00000001

	)

152 
	#DN_MODIFY
 0x00000002

	)

153 
	#DN_CREATE
 0x00000004

	)

154 
	#DN_DELETE
 0x00000008

	)

155 
	#DN_RENAME
 0x00000010

	)

156 
	#DN_ATTRIB
 0x00000020

	)

157 
	#DN_MULTISHOT
 0x80000000

	)

160 
	sÊock


162 
	ml_ty≥
;

163 
	ml_whí˚
;

164 #i‚de‡
__USE_FILE_OFFSET64


165 
__off_t
 
	ml_°¨t
;

166 
__off_t
 
	ml_Àn
;

168 
__off64_t
 
	ml_°¨t
;

169 
__off64_t
 
	ml_Àn
;

171 
__pid_t
 
	ml_pid
;

174 #ifde‡
__USE_LARGEFILE64


175 
	sÊock64


177 
	ml_ty≥
;

178 
	ml_whí˚
;

179 
__off64_t
 
	ml_°¨t
;

180 
__off64_t
 
	ml_Àn
;

181 
__pid_t
 
	ml_pid
;

185 #ifde‡
__USE_GNU


187 
	e__pid_ty≥


189 
	mF_OWNER_TID
 = 0,

190 
	mF_OWNER_PID
,

191 
	mF_OWNER_GID


195 
	sf_ow√r_ex


197 
__pid_ty≥
 
	mty≥
;

198 
__pid_t
 
	mpid
;

204 #ifdef 
__USE_BSD


205 
	#FAPPEND
 
O_APPEND


	)

206 
	#FFSYNC
 
O_FSYNC


	)

207 
	#FASYNC
 
O_ASYNC


	)

208 
	#FNONBLOCK
 
O_NONBLOCK


	)

209 
	#FNDELAY
 
O_NDELAY


	)

213 #ifde‡
__USE_XOPEN2K


214 
	#POSIX_FADV_NORMAL
 0

	)

215 
	#POSIX_FADV_RANDOM
 1

	)

216 
	#POSIX_FADV_SEQUENTIAL
 2

	)

217 
	#POSIX_FADV_WILLNEED
 3

	)

218 
	#POSIX_FADV_DONTNEED
 4

	)

219 
	#POSIX_FADV_NOREUSE
 5

	)

223 #ifde‡
__USE_GNU


225 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

228 
	#SYNC_FILE_RANGE_WRITE
 2

	)

231 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

236 
	#SPLICE_F_MOVE
 1

	)

237 
	#SPLICE_F_NONBLOCK
 2

	)

240 
	#SPLICE_F_MORE
 4

	)

241 
	#SPLICE_F_GIFT
 8

	)

245 #ifde‡
__USE_ATFILE


246 
	#AT_FDCWD
 -100

	)

249 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

250 
	#AT_REMOVEDIR
 0x200

	)

252 
	#AT_SYMLINK_FOLLOW
 0x400

	)

253 
	#AT_EACCESS
 0x200

	)

257 
	g__BEGIN_DECLS


259 #ifde‡
__USE_GNU


262 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

263 
__THROW
;

267 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

268 
__Êags
);

272 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

273 
size_t
 
__cou¡
, 
__Êags
);

276 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

277 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

278 
__Êags
);

281 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

282 
__Êags
);

285 #i‚de‡
__USE_FILE_OFFSET64


286 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

288 #ifde‡
__REDIRECT


289 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

290 
__off64_t
 
__Àn
),

291 
ÁŒoˇã64
);

293 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

296 #ifde‡
__USE_LARGEFILE64


297 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

298 
__off64_t
 
__Àn
);

302 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/ipc.h

19 #i‚de‡
_SYS_IPC_H


23 
	~<bôs/ty≥s.h
>

26 
	#IPC_CREAT
 01000

	)

27 
	#IPC_EXCL
 02000

	)

28 
	#IPC_NOWAIT
 04000

	)

31 
	#IPC_RMID
 0

	)

32 
	#IPC_SET
 1

	)

33 
	#IPC_STAT
 2

	)

34 #ifde‡
__USE_GNU


35 
	#IPC_INFO
 3

	)

39 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

43 
	sùc_≥rm


45 
__key_t
 
	m__key
;

46 
__uid_t
 
	muid
;

47 
__gid_t
 
	mgid
;

48 
__uid_t
 
	mcuid
;

49 
__gid_t
 
	mcgid
;

50 
	mmode
;

51 
	m__∑d1
;

52 
	m__£q
;

53 
	m__∑d2
;

54 
	m__unu£d1
;

55 
	m__unu£d2
;

	@/usr/include/bits/ipctypes.h

24 #i‚de‡
_BITS_IPCTYPES_H


25 
	#_BITS_IPCTYPES_H
 1

	)

27 
	~<bôs/ty≥s.h
>

30 #i‡
__WORDSIZE
 == 32

31 
	t__ùc_pid_t
;

33 
	t__ùc_pid_t
;

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HWPOISON
 100

	)

102 #ifde‡
__USE_XOPEN2K


103 
	#POSIX_MADV_NORMAL
 0

	)

104 
	#POSIX_MADV_RANDOM
 1

	)

105 
	#POSIX_MADV_SEQUENTIAL
 2

	)

106 
	#POSIX_MADV_WILLNEED
 3

	)

107 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/mqueue.h

19 #i‚de‡
_MQUEUE_H


23 
	tmqd_t
;

25 
	smq_©å


27 
	mmq_Êags
;

28 
	mmq_maxmsg
;

29 
	mmq_msgsize
;

30 
	mmq_curmsgs
;

31 
	m__∑d
[4];

	@/usr/include/bits/mqueue2.h

20 #i‚def 
_FCNTL_H


26 
mqd_t
 
	$mq_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...)

27 
__THROW
 
	`__n⁄nuŒ
 ((1));

28 
mqd_t
 
	$__mq_›í_2
 (
__c⁄°
 *
__«me
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

29 
mqd_t
 
	`__REDIRECT
 (
__mq_›í_Æüs
, (
__c⁄°
 *
__«me
, 
__oÊag
, ...),

30 
mq_›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__îr‹de˛
 (
__mq_›í_wr⁄g_numbî_of_¨gs
,

33 
	`__îr‹de˛
 (
__mq_›í_missög_mode_™d_©å
,

36 
__exã∫_Æways_ölöe
 
mqd_t


37 
	$mq_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...)

39 i‡(
	`__va_¨g_∑ck_Àn
 () != 0 && __va_arg_pack_len () != 2)

40 
	`__mq_›í_wr⁄g_numbî_of_¨gs
 ();

42 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

44 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () == 0)

46 
	`__mq_›í_missög_mode_™d_©å
 ();

47  
	`__mq_›í_2
 (
__«me
, 
__oÊag
);

49  
	`__mq_›í_Æüs
 (
__«me
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

52 i‡(
	`__va_¨g_∑ck_Àn
 () == 0)

53  
	`__mq_›í_2
 (
__«me
, 
__oÊag
);

55  
	`__mq_›í_Æüs
 (
__«me
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 
	}
}

	@/usr/include/bits/msq.h

19 #i‚de‡
_SYS_MSG_H


23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/w‹dsize.h
>

27 
	#MSG_NOERROR
 010000

	)

28 #ifde‡
__USE_GNU


29 
	#MSG_EXCEPT
 020000

	)

33 
	tmsgqnum_t
;

34 
	tmsgÀn_t
;

38 
	smsqid_ds


40 
ùc_≥rm
 
	mmsg_≥rm
;

41 
__time_t
 
	mmsg_°ime
;

42 #i‡
__WORDSIZE
 == 32

43 
	m__unu£d1
;

45 
__time_t
 
	mmsg_πime
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__unu£d2
;

49 
__time_t
 
	mmsg_˘ime
;

50 #i‡
__WORDSIZE
 == 32

51 
	m__unu£d3
;

53 
	m__msg_cbyãs
;

54 
msgqnum_t
 
	mmsg_qnum
;

55 
msgÀn_t
 
	mmsg_qbyãs
;

56 
__pid_t
 
	mmsg_l•id
;

57 
__pid_t
 
	mmsg_Ãpid
;

58 
	m__unu£d4
;

59 
	m__unu£d5
;

62 #ifde‡
__USE_MISC


64 
	#msg_cbyãs
 
__msg_cbyãs


	)

67 
	#MSG_STAT
 11

	)

68 
	#MSG_INFO
 12

	)

71 
	smsgöfo


73 
	mmsgpoﬁ
;

74 
	mmsgm≠
;

75 
	mmsgmax
;

76 
	mmsgmnb
;

77 
	mmsgmni
;

78 
	mmsgssz
;

79 
	mmsgtql
;

80 
	mmsg£g
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/sem.h

19 #i‚de‡
_SYS_SEM_H


23 
	~<sys/ty≥s.h
>

26 
	#SEM_UNDO
 0x1000

	)

29 
	#GETPID
 11

	)

30 
	#GETVAL
 12

	)

31 
	#GETALL
 13

	)

32 
	#GETNCNT
 14

	)

33 
	#GETZCNT
 15

	)

34 
	#SETVAL
 16

	)

35 
	#SETALL
 17

	)

39 
	s£mid_ds


41 
ùc_≥rm
 
	m£m_≥rm
;

42 
__time_t
 
	m£m_Ÿime
;

43 
	m__unu£d1
;

44 
__time_t
 
	m£m_˘ime
;

45 
	m__unu£d2
;

46 
	m£m_n£ms
;

47 
	m__unu£d3
;

48 
	m__unu£d4
;

65 
	#_SEM_SEMUN_UNDEFINED
 1

	)

67 #ifde‡
__USE_MISC


70 
	#SEM_STAT
 18

	)

71 
	#SEM_INFO
 19

	)

73 
	s£möfo


75 
	m£mm≠
;

76 
	m£mmni
;

77 
	m£mmns
;

78 
	m£mmnu
;

79 
	m£mm¶
;

80 
	m£m›m
;

81 
	m£mume
;

82 
	m£musz
;

83 
	m£mvmx
;

84 
	m£m´m
;

	@/usr/include/bits/semaphore.h

20 #i‚de‡
_SEMAPHORE_H


24 
	~<bôs/w‹dsize.h
>

26 #i‡
__WORDSIZE
 == 64

27 
	#__SIZEOF_SEM_T
 32

	)

29 
	#__SIZEOF_SEM_T
 16

	)

34 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

39 
	m__size
[
__SIZEOF_SEM_T
];

40 
	m__Æign
;

41 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/shm.h

20 #i‚de‡
_SYS_SHM_H


24 
	~<bôs/ty≥s.h
>

27 
	#SHM_R
 0400

	)

28 
	#SHM_W
 0200

	)

31 
	#SHM_RDONLY
 010000

	)

32 
	#SHM_RND
 020000

	)

33 
	#SHM_REMAP
 040000

	)

34 
	#SHM_EXEC
 0100000

	)

37 
	#SHM_LOCK
 11

	)

38 
	#SHM_UNLOCK
 12

	)

40 
	g__BEGIN_DECLS


43 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

44 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

48 
	tshm©t_t
;

51 
	sshmid_ds


53 
ùc_≥rm
 
shm_≥rm
;

54 
size_t
 
shm_£gsz
;

55 
__time_t
 
shm_©ime
;

56 #i‡
__WORDSIZE
 == 32

57 
__unu£d1
;

59 
__time_t
 
shm_dtime
;

60 #i‡
__WORDSIZE
 == 32

61 
__unu£d2
;

63 
__time_t
 
shm_˘ime
;

64 #i‡
__WORDSIZE
 == 32

65 
__unu£d3
;

67 
__pid_t
 
shm_˝id
;

68 
__pid_t
 
shm_Õid
;

69 
shm©t_t
 
shm_«âch
;

70 
__unu£d4
;

71 
__unu£d5
;

74 #ifde‡
__USE_MISC


77 
	#SHM_STAT
 13

	)

78 
	#SHM_INFO
 14

	)

81 
	#SHM_DEST
 01000

	)

82 
	#SHM_LOCKED
 02000

	)

83 
	#SHM_HUGETLB
 04000

	)

84 
	#SHM_NORESERVE
 010000

	)

86 
	sshmöfo


88 
shmmax
;

89 
shmmö
;

90 
shmmni
;

91 
shm£g
;

92 
shmÆl
;

93 
__unu£d1
;

94 
__unu£d2
;

95 
__unu£d3
;

96 
__unu£d4
;

99 
	sshm_öfo


101 
u£d_ids
;

102 
shm_tŸ
;

103 
shm_rss
;

104 
shm_swp
;

105 
sw≠_©ãm±s
;

106 
sw≠_suc˚s£s
;

111 
__END_DECLS


	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/stropts.h

19 #i‚de‡
_STROPTS_H


23 #i‚de‡
_BITS_STROPTS_H


24 
	#_BITS_STROPTS_H
 1

	)

26 
	~<bôs/ty≥s.h
>

29 
	#__SID
 ('S' << 8)

	)

31 
	#I_NREAD
 (
__SID
 | 1Ë

	)

33 
	#I_PUSH
 (
__SID
 | 2Ë

	)

35 
	#I_POP
 (
__SID
 | 3Ë

	)

37 
	#I_LOOK
 (
__SID
 | 4Ë

	)

40 
	#I_FLUSH
 (
__SID
 | 5Ë

	)

41 
	#I_SRDOPT
 (
__SID
 | 6Ë

	)

42 
	#I_GRDOPT
 (
__SID
 | 7Ë

	)

43 
	#I_STR
 (
__SID
 | 8Ë

	)

45 
	#I_SETSIG
 (
__SID
 | 9Ë

	)

47 
	#I_GETSIG
 (
__SID
 |10Ë

	)

50 
	#I_FIND
 (
__SID
 |11Ë

	)

53 
	#I_LINK
 (
__SID
 |12Ë

	)

54 
	#I_UNLINK
 (
__SID
 |13Ë

	)

55 
	#I_PEEK
 (
__SID
 |15Ë

	)

59 
	#I_FDINSERT
 (
__SID
 |16Ë

	)

62 
	#I_SENDFD
 (
__SID
 |17Ë

	)

66 
	#I_RECVFD
 (
__SID
 |14Ë

	)

67 
	#I_SWROPT
 (
__SID
 |19Ë

	)

68 
	#I_GWROPT
 (
__SID
 |20Ë

	)

69 
	#I_LIST
 (
__SID
 |21Ë

	)

71 
	#I_PLINK
 (
__SID
 |22Ë

	)

73 
	#I_PUNLINK
 (
__SID
 |23Ë

	)

75 
	#I_FLUSHBAND
 (
__SID
 |28Ë

	)

76 
	#I_CKBAND
 (
__SID
 |29Ë

	)

79 
	#I_GETBAND
 (
__SID
 |30Ë

	)

81 
	#I_ATMARK
 (
__SID
 |31Ë

	)

84 
	#I_SETCLTIME
 (
__SID
 |32Ë

	)

87 
	#I_GETCLTIME
 (
__SID
 |33Ë

	)

88 
	#I_CANPUT
 (
__SID
 |34Ë

	)

92 
	#FMNAMESZ
 8

	)

95 
	#FLUSHR
 0x01

	)

96 
	#FLUSHW
 0x02

	)

97 
	#FLUSHRW
 0x03

	)

98 #ifde‡
__USE_GNU


99 
	#FLUSHBAND
 0x04

	)

103 
	#S_INPUT
 0x0001

	)

105 
	#S_HIPRI
 0x0002

	)

106 
	#S_OUTPUT
 0x0004

	)

108 
	#S_MSG
 0x0008

	)

111 
	#S_ERROR
 0x0010

	)

112 
	#S_HANGUP
 0x0020

	)

113 
	#S_RDNORM
 0x0040

	)

114 
	#S_WRNORM
 
S_OUTPUT


	)

115 
	#S_RDBAND
 0x0080

	)

117 
	#S_WRBAND
 0x0100

	)

119 
	#S_BANDURG
 0x0200

	)

125 
	#RS_HIPRI
 0x01

	)

128 
	#RNORM
 0x0000

	)

129 
	#RMSGD
 0x0001

	)

130 
	#RMSGN
 0x0002

	)

131 
	#RPROTDAT
 0x0004

	)

133 
	#RPROTDIS
 0x0008

	)

135 
	#RPROTNORM
 0x0010

	)

138 #ifde‡
__USE_GNU


139 
	#RPROTMASK
 0x001C

	)

143 
	#SNDZERO
 0x001

	)

145 #ifde‡
__USE_GNU


146 
	#SNDPIPE
 0x002

	)

151 
	#ANYMARK
 0x01

	)

152 
	#LASTMARK
 0x02

	)

156 #ifde‡
__USE_GNU


157 
	#MUXID_ALL
 (-1Ë

	)

163 
	#MSG_HIPRI
 0x01

	)

164 
	#MSG_ANY
 0x02

	)

165 
	#MSG_BAND
 0x04

	)

168 
	#MORECTL
 1

	)

170 
	#MOREDATA
 2

	)

174 
	sb™döfo


176 
	mbi_¥i
;

177 
	mbi_Êag
;

180 
	s°rbuf


182 
	mmaxÀn
;

183 
	mÀn
;

184 *
	mbuf
;

187 
	s°Ωìk


189 
°rbuf
 
	m˘lbuf
;

190 
°rbuf
 
	md©abuf
;

191 
t_usˇœr_t
 
	mÊags
;

194 
	s°rfdö£π


196 
°rbuf
 
	m˘lbuf
;

197 
°rbuf
 
	md©abuf
;

198 
t_usˇœr_t
 
	mÊags
;

199 
	mfûdes
;

200 
	moff£t
;

203 
	s°rio˘l


205 
	mic_cmd
;

206 
	mic_timout
;

207 
	mic_Àn
;

208 *
	mic_dp
;

211 
	s°ºecvfd


213 
	mfd
;

214 
uid_t
 
	muid
;

215 
gid_t
 
	mgid
;

216 
	m__fûl
[8];

220 
	s°r_mli°


222 
	ml_«me
[
FMNAMESZ
 + 1];

225 
	s°r_li°


227 
	m¶_nmods
;

228 
°r_mli°
 *
	m¶_modli°
;

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

18 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

19 
	#SYS_chdú
 
__NR_chdú


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroŸ
 
__NR_chroŸ


	)

23 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

24 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

25 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

26 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

27 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

28 
	#SYS_˛o£
 
__NR_˛o£


	)

29 
	#SYS_¸ót
 
__NR_¸ót


	)

30 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

31 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

32 
	#SYS_dup
 
__NR_dup


	)

33 
	#SYS_dup2
 
__NR_dup2


	)

34 
	#SYS_dup3
 
__NR_dup3


	)

35 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

36 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

37 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

38 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

39 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

40 
	#SYS_evítfd
 
__NR_evítfd


	)

41 
	#SYS_evítfd2
 
__NR_evítfd2


	)

42 
	#SYS_execve
 
__NR_execve


	)

43 
	#SYS_exô
 
__NR_exô


	)

44 
	#SYS_exô_group
 
__NR_exô_group


	)

45 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

46 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

47 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

48 
	#SYS_fchdú
 
__NR_fchdú


	)

49 
	#SYS_fchmod
 
__NR_fchmod


	)

50 
	#SYS_fchmod©
 
__NR_fchmod©


	)

51 
	#SYS_fchown
 
__NR_fchown


	)

52 
	#SYS_fchow«t
 
__NR_fchow«t


	)

53 
	#SYS_f˙é
 
__NR_f˙é


	)

54 
	#SYS_fd©async
 
__NR_fd©async


	)

55 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

56 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

57 
	#SYS_Êock
 
__NR_Êock


	)

58 
	#SYS_f‹k
 
__NR_f‹k


	)

59 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

60 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

61 
	#SYS_f°©
 
__NR_f°©


	)

62 
	#SYS_f°©fs
 
__NR_f°©fs


	)

63 
	#SYS_fsync
 
__NR_fsync


	)

64 
	#SYS_·runˇã
 
__NR_·runˇã


	)

65 
	#SYS_fuãx
 
__NR_fuãx


	)

66 
	#SYS_futimeßt
 
__NR_futimeßt


	)

67 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

68 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

69 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

70 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

71 
	#SYS_gëcwd
 
__NR_gëcwd


	)

72 
	#SYS_gëdíts
 
__NR_gëdíts


	)

73 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

74 
	#SYS_gëegid
 
__NR_gëegid


	)

75 
	#SYS_gëeuid
 
__NR_gëeuid


	)

76 
	#SYS_gëgid
 
__NR_gëgid


	)

77 
	#SYS_gëgroups
 
__NR_gëgroups


	)

78 
	#SYS_gëôimî
 
__NR_gëôimî


	)

79 
	#SYS_gëpgid
 
__NR_gëpgid


	)

80 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

81 
	#SYS_gëpid
 
__NR_gëpid


	)

82 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

83 
	#SYS_gëµid
 
__NR_gëµid


	)

84 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

85 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

86 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

87 
	#SYS_gëæimô
 
__NR_gëæimô


	)

88 
	#SYS_gërußge
 
__NR_gërußge


	)

89 
	#SYS_gësid
 
__NR_gësid


	)

90 
	#SYS_gëtid
 
__NR_gëtid


	)

91 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

92 
	#SYS_gëuid
 
__NR_gëuid


	)

93 
	#SYS_gëx©å
 
__NR_gëx©å


	)

94 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

95 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

96 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

97 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

98 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

99 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

100 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

101 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

102 
	#SYS_io_£tup
 
__NR_io_£tup


	)

103 
	#SYS_io_submô
 
__NR_io_submô


	)

104 
	#SYS_io˘l
 
__NR_io˘l


	)

105 
	#SYS_i›îm
 
__NR_i›îm


	)

106 
	#SYS_i›l
 
__NR_i›l


	)

107 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

108 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

109 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

110 
	#SYS_key˘l
 
__NR_key˘l


	)

111 
	#SYS_kûl
 
__NR_kûl


	)

112 
	#SYS_lchown
 
__NR_lchown


	)

113 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

114 
	#SYS_lök
 
__NR_lök


	)

115 
	#SYS_lök©
 
__NR_lök©


	)

116 
	#SYS_li°x©å
 
__NR_li°x©å


	)

117 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

118 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

119 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

120 
	#SYS_l£ek
 
__NR_l£ek


	)

121 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

122 
	#SYS_l°©
 
__NR_l°©


	)

123 
	#SYS_madvi£
 
__NR_madvi£


	)

124 
	#SYS_mböd
 
__NR_mböd


	)

125 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

126 
	#SYS_möc‹e
 
__NR_möc‹e


	)

127 
	#SYS_mkdú
 
__NR_mkdú


	)

128 
	#SYS_mkdú©
 
__NR_mkdú©


	)

129 
	#SYS_mknod
 
__NR_mknod


	)

130 
	#SYS_mknod©
 
__NR_mknod©


	)

131 
	#SYS_mlock
 
__NR_mlock


	)

132 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

133 
	#SYS_mm≠
 
__NR_mm≠


	)

134 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

135 
	#SYS_mou¡
 
__NR_mou¡


	)

136 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

137 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

138 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

139 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

140 
	#SYS_mq_›í
 
__NR_mq_›í


	)

141 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

142 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

143 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

144 
	#SYS_mªm≠
 
__NR_mªm≠


	)

145 
	#SYS_msync
 
__NR_msync


	)

146 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

147 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

148 
	#SYS_munm≠
 
__NR_munm≠


	)

149 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

150 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

151 
	#SYS_›í
 
__NR_›í


	)

152 
	#SYS_›í©
 
__NR_›í©


	)

153 
	#SYS_∑u£
 
__NR_∑u£


	)

154 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

155 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

156 
	#SYS_pùe
 
__NR_pùe


	)

157 
	#SYS_pùe2
 
__NR_pùe2


	)

158 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

159 
	#SYS_pﬁl
 
__NR_pﬁl


	)

160 
	#SYS_µﬁl
 
__NR_µﬁl


	)

161 
	#SYS_¥˘l
 
__NR_¥˘l


	)

162 
	#SYS_¥ód64
 
__NR_¥ód64


	)

163 
	#SYS_¥ódv
 
__NR_¥ódv


	)

164 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

165 
	#SYS_±ø˚
 
__NR_±ø˚


	)

166 
	#SYS_puçmsg
 
__NR_puçmsg


	)

167 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

168 
	#SYS_pwrôev
 
__NR_pwrôev


	)

169 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

170 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

171 
	#SYS_ªad
 
__NR_ªad


	)

172 
	#SYS_ªadahód
 
__NR_ªadahód


	)

173 
	#SYS_ªadlök
 
__NR_ªadlök


	)

174 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

175 
	#SYS_ªadv
 
__NR_ªadv


	)

176 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

177 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

178 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

179 
	#SYS_ª«me
 
__NR_ª«me


	)

180 
	#SYS_ª«mót
 
__NR_ª«mót


	)

181 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

182 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

183 
	#SYS_rmdú
 
__NR_rmdú


	)

184 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

185 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

186 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

187 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

188 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

189 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

190 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

191 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

192 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

193 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

194 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

195 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

196 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

197 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

198 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

199 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

200 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

201 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

202 
	#SYS_£À˘
 
__NR_£À˘


	)

203 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

204 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

205 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

206 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

207 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

208 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

209 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

210 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

211 
	#SYS_£tgid
 
__NR_£tgid


	)

212 
	#SYS_£tgroups
 
__NR_£tgroups


	)

213 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

214 
	#SYS_£tôimî
 
__NR_£tôimî


	)

215 
	#SYS_£çgid
 
__NR_£çgid


	)

216 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

217 
	#SYS_£åegid
 
__NR_£åegid


	)

218 
	#SYS_£åesgid
 
__NR_£åesgid


	)

219 
	#SYS_£åesuid
 
__NR_£åesuid


	)

220 
	#SYS_£åeuid
 
__NR_£åeuid


	)

221 
	#SYS_£ålimô
 
__NR_£ålimô


	)

222 
	#SYS_£tsid
 
__NR_£tsid


	)

223 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

224 
	#SYS_£tuid
 
__NR_£tuid


	)

225 
	#SYS_£tx©å
 
__NR_£tx©å


	)

226 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

227 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

228 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

229 
	#SYS_•li˚
 
__NR_•li˚


	)

230 
	#SYS_°©
 
__NR_°©


	)

231 
	#SYS_°©fs
 
__NR_°©fs


	)

232 
	#SYS_sw≠off
 
__NR_sw≠off


	)

233 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

234 
	#SYS_symlök
 
__NR_symlök


	)

235 
	#SYS_symlök©
 
__NR_symlök©


	)

236 
	#SYS_sync
 
__NR_sync


	)

237 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

238 
	#SYS_sysfs
 
__NR_sysfs


	)

239 
	#SYS_sysöfo
 
__NR_sysöfo


	)

240 
	#SYS_sy¶og
 
__NR_sy¶og


	)

241 
	#SYS_ãe
 
__NR_ãe


	)

242 
	#SYS_tgkûl
 
__NR_tgkûl


	)

243 
	#SYS_time
 
__NR_time


	)

244 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

245 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

246 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

247 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

248 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

249 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

250 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

251 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

252 
	#SYS_times
 
__NR_times


	)

253 
	#SYS_tkûl
 
__NR_tkûl


	)

254 
	#SYS_åunˇã
 
__NR_åunˇã


	)

255 
	#SYS_umask
 
__NR_umask


	)

256 
	#SYS_umou¡2
 
__NR_umou¡2


	)

257 
	#SYS_u«me
 
__NR_u«me


	)

258 
	#SYS_u∆ök
 
__NR_u∆ök


	)

259 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

260 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

261 
	#SYS_u£lib
 
__NR_u£lib


	)

262 
	#SYS_u°©
 
__NR_u°©


	)

263 
	#SYS_utime
 
__NR_utime


	)

264 
	#SYS_utimíßt
 
__NR_utimíßt


	)

265 
	#SYS_utimes
 
__NR_utimes


	)

266 
	#SYS_vf‹k
 
__NR_vf‹k


	)

267 
	#SYS_vh™gup
 
__NR_vh™gup


	)

268 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

269 
	#SYS_v£rvî
 
__NR_v£rvî


	)

270 
	#SYS_waô4
 
__NR_waô4


	)

271 
	#SYS_waôid
 
__NR_waôid


	)

272 
	#SYS_wrôe
 
__NR_wrôe


	)

273 
	#SYS_wrôev
 
__NR_wrôev


	)

274 #i‡
__WORDSIZE
 == 64

275 
	#SYS_ac˚±
 
__NR_ac˚±


	)

276 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

277 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

278 
	#SYS_böd
 
__NR_böd


	)

279 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

280 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

281 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

282 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

283 
	#SYS_gësock«me
 
__NR_gësock«me


	)

284 
	#SYS_gësock›t
 
__NR_gësock›t


	)

285 
	#SYS_li°í
 
__NR_li°í


	)

286 
	#SYS_msg˘l
 
__NR_msg˘l


	)

287 
	#SYS_msggë
 
__NR_msggë


	)

288 
	#SYS_msgrcv
 
__NR_msgrcv


	)

289 
	#SYS_msg¢d
 
__NR_msg¢d


	)

290 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

291 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

292 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

293 
	#SYS_£curôy
 
__NR_£curôy


	)

294 
	#SYS_£m˘l
 
__NR_£m˘l


	)

295 
	#SYS_£mgë
 
__NR_£mgë


	)

296 
	#SYS_£m›
 
__NR_£m›


	)

297 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

298 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

299 
	#SYS_£ndto
 
__NR_£ndto


	)

300 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

301 
	#SYS_shm©
 
__NR_shm©


	)

302 
	#SYS_shm˘l
 
__NR_shm˘l


	)

303 
	#SYS_shmdt
 
__NR_shmdt


	)

304 
	#SYS_shmgë
 
__NR_shmgë


	)

305 
	#SYS_shutdown
 
__NR_shutdown


	)

306 
	#SYS_sockë
 
__NR_sockë


	)

307 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

308 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

310 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

311 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

312 
	#SYS_bdÊush
 
__NR_bdÊush


	)

313 
	#SYS_bªak
 
__NR_bªak


	)

314 
	#SYS_chown32
 
__NR_chown32


	)

315 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

316 
	#SYS_fchown32
 
__NR_fchown32


	)

317 
	#SYS_f˙é64
 
__NR_f˙é64


	)

318 
	#SYS_f°©64
 
__NR_f°©64


	)

319 
	#SYS_f°©©64
 
__NR_f°©©64


	)

320 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

321 
	#SYS_·ime
 
__NR_·ime


	)

322 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

323 
	#SYS_gë˝u
 
__NR_gë˝u


	)

324 
	#SYS_gëegid32
 
__NR_gëegid32


	)

325 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

326 
	#SYS_gëgid32
 
__NR_gëgid32


	)

327 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

328 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

329 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

330 
	#SYS_gëuid32
 
__NR_gëuid32


	)

331 
	#SYS_gây
 
__NR_gây


	)

332 
	#SYS_idÀ
 
__NR_idÀ


	)

333 
	#SYS_ùc
 
__NR_ùc


	)

334 
	#SYS_lchown32
 
__NR_lchown32


	)

335 
	#SYS_lock
 
__NR_lock


	)

336 
	#SYS_l°©64
 
__NR_l°©64


	)

337 
	#SYS_madvi£1
 
__NR_madvi£1


	)

338 
	#SYS_mm≠2
 
__NR_mm≠2


	)

339 
	#SYS_mpx
 
__NR_mpx


	)

340 
	#SYS_ni˚
 
__NR_ni˚


	)

341 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

342 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

343 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

344 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

345 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

346 
	#SYS_¥of
 
__NR_¥of


	)

347 
	#SYS_¥ofû
 
__NR_¥ofû


	)

348 
	#SYS_ªaddú
 
__NR_ªaddú


	)

349 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

350 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

351 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

352 
	#SYS_£tgid32
 
__NR_£tgid32


	)

353 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

354 
	#SYS_£åegid32
 
__NR_£åegid32


	)

355 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

356 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

357 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

358 
	#SYS_£tuid32
 
__NR_£tuid32


	)

359 
	#SYS_sgëmask
 
__NR_sgëmask


	)

360 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

361 
	#SYS_sig«l
 
__NR_sig«l


	)

362 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

363 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

364 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

365 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

366 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

367 
	#SYS_s£tmask
 
__NR_s£tmask


	)

368 
	#SYS_°©64
 
__NR_°©64


	)

369 
	#SYS_°©fs64
 
__NR_°©fs64


	)

370 
	#SYS_°ime
 
__NR_°ime


	)

371 
	#SYS_°ty
 
__NR_°ty


	)

372 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

373 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

374 
	#SYS_ulimô
 
__NR_ulimô


	)

375 
	#SYS_umou¡
 
__NR_umou¡


	)

376 
	#SYS_vm86
 
__NR_vm86


	)

377 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

378 
	#SYS_waôpid
 
__NR_waôpid


	)

	@/usr/include/bits/termios.h

21 #i‚de‡
_TERMIOS_H


25 
	tcc_t
;

26 
	t•ìd_t
;

27 
	ttcÊag_t
;

29 
	#NCCS
 32

	)

30 
	sãrmios


32 
tcÊag_t
 
	mc_iÊag
;

33 
tcÊag_t
 
	mc_oÊag
;

34 
tcÊag_t
 
	mc_cÊag
;

35 
tcÊag_t
 
	mc_lÊag
;

36 
cc_t
 
	mc_löe
;

37 
cc_t
 
	mc_cc
[
NCCS
];

38 
•ìd_t
 
	mc_i•ìd
;

39 
•ìd_t
 
	mc_o•ìd
;

40 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

41 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

45 
	#VINTR
 0

	)

46 
	#VQUIT
 1

	)

47 
	#VERASE
 2

	)

48 
	#VKILL
 3

	)

49 
	#VEOF
 4

	)

50 
	#VTIME
 5

	)

51 
	#VMIN
 6

	)

52 
	#VSWTC
 7

	)

53 
	#VSTART
 8

	)

54 
	#VSTOP
 9

	)

55 
	#VSUSP
 10

	)

56 
	#VEOL
 11

	)

57 
	#VREPRINT
 12

	)

58 
	#VDISCARD
 13

	)

59 
	#VWERASE
 14

	)

60 
	#VLNEXT
 15

	)

61 
	#VEOL2
 16

	)

64 
	#IGNBRK
 0000001

	)

65 
	#BRKINT
 0000002

	)

66 
	#IGNPAR
 0000004

	)

67 
	#PARMRK
 0000010

	)

68 
	#INPCK
 0000020

	)

69 
	#ISTRIP
 0000040

	)

70 
	#INLCR
 0000100

	)

71 
	#IGNCR
 0000200

	)

72 
	#ICRNL
 0000400

	)

73 
	#IUCLC
 0001000

	)

74 
	#IXON
 0002000

	)

75 
	#IXANY
 0004000

	)

76 
	#IXOFF
 0010000

	)

77 
	#IMAXBEL
 0020000

	)

78 
	#IUTF8
 0040000

	)

81 
	#OPOST
 0000001

	)

82 
	#OLCUC
 0000002

	)

83 
	#ONLCR
 0000004

	)

84 
	#OCRNL
 0000010

	)

85 
	#ONOCR
 0000020

	)

86 
	#ONLRET
 0000040

	)

87 
	#OFILL
 0000100

	)

88 
	#OFDEL
 0000200

	)

89 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


90 
	#NLDLY
 0000400

	)

91 
	#NL0
 0000000

	)

92 
	#NL1
 0000400

	)

93 
	#CRDLY
 0003000

	)

94 
	#CR0
 0000000

	)

95 
	#CR1
 0001000

	)

96 
	#CR2
 0002000

	)

97 
	#CR3
 0003000

	)

98 
	#TABDLY
 0014000

	)

99 
	#TAB0
 0000000

	)

100 
	#TAB1
 0004000

	)

101 
	#TAB2
 0010000

	)

102 
	#TAB3
 0014000

	)

103 
	#BSDLY
 0020000

	)

104 
	#BS0
 0000000

	)

105 
	#BS1
 0020000

	)

106 
	#FFDLY
 0100000

	)

107 
	#FF0
 0000000

	)

108 
	#FF1
 0100000

	)

111 
	#VTDLY
 0040000

	)

112 
	#VT0
 0000000

	)

113 
	#VT1
 0040000

	)

115 #ifde‡
__USE_MISC


116 
	#XTABS
 0014000

	)

120 #ifde‡
__USE_MISC


121 
	#CBAUD
 0010017

	)

123 
	#B0
 0000000

	)

124 
	#B50
 0000001

	)

125 
	#B75
 0000002

	)

126 
	#B110
 0000003

	)

127 
	#B134
 0000004

	)

128 
	#B150
 0000005

	)

129 
	#B200
 0000006

	)

130 
	#B300
 0000007

	)

131 
	#B600
 0000010

	)

132 
	#B1200
 0000011

	)

133 
	#B1800
 0000012

	)

134 
	#B2400
 0000013

	)

135 
	#B4800
 0000014

	)

136 
	#B9600
 0000015

	)

137 
	#B19200
 0000016

	)

138 
	#B38400
 0000017

	)

139 #ifde‡
__USE_MISC


140 
	#EXTA
 
B19200


	)

141 
	#EXTB
 
B38400


	)

143 
	#CSIZE
 0000060

	)

144 
	#CS5
 0000000

	)

145 
	#CS6
 0000020

	)

146 
	#CS7
 0000040

	)

147 
	#CS8
 0000060

	)

148 
	#CSTOPB
 0000100

	)

149 
	#CREAD
 0000200

	)

150 
	#PARENB
 0000400

	)

151 
	#PARODD
 0001000

	)

152 
	#HUPCL
 0002000

	)

153 
	#CLOCAL
 0004000

	)

154 #ifde‡
__USE_MISC


155 
	#CBAUDEX
 0010000

	)

157 
	#B57600
 0010001

	)

158 
	#B115200
 0010002

	)

159 
	#B230400
 0010003

	)

160 
	#B460800
 0010004

	)

161 
	#B500000
 0010005

	)

162 
	#B576000
 0010006

	)

163 
	#B921600
 0010007

	)

164 
	#B1000000
 0010010

	)

165 
	#B1152000
 0010011

	)

166 
	#B1500000
 0010012

	)

167 
	#B2000000
 0010013

	)

168 
	#B2500000
 0010014

	)

169 
	#B3000000
 0010015

	)

170 
	#B3500000
 0010016

	)

171 
	#B4000000
 0010017

	)

172 
	#__MAX_BAUD
 
B4000000


	)

173 #ifde‡
__USE_MISC


174 
	#CIBAUD
 002003600000

	)

175 
	#CMSPAR
 010000000000

	)

176 
	#CRTSCTS
 020000000000

	)

180 
	#ISIG
 0000001

	)

181 
	#ICANON
 0000002

	)

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


183 
	#XCASE
 0000004

	)

185 
	#ECHO
 0000010

	)

186 
	#ECHOE
 0000020

	)

187 
	#ECHOK
 0000040

	)

188 
	#ECHONL
 0000100

	)

189 
	#NOFLSH
 0000200

	)

190 
	#TOSTOP
 0000400

	)

191 #ifde‡
__USE_MISC


192 
	#ECHOCTL
 0001000

	)

193 
	#ECHOPRT
 0002000

	)

194 
	#ECHOKE
 0004000

	)

195 
	#FLUSHO
 0010000

	)

196 
	#PENDIN
 0040000

	)

198 
	#IEXTEN
 0100000

	)

201 
	#TCOOFF
 0

	)

202 
	#TCOON
 1

	)

203 
	#TCIOFF
 2

	)

204 
	#TCION
 3

	)

207 
	#TCIFLUSH
 0

	)

208 
	#TCOFLUSH
 1

	)

209 
	#TCIOFLUSH
 2

	)

212 
	#TCSANOW
 0

	)

213 
	#TCSADRAIN
 1

	)

214 
	#TCSAFLUSH
 2

	)

217 
	#_IOT_ãrmios
 \

218 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/bits/xtitypes.h

20 #i‚de‡
_STROPTS_H


24 #i‚de‡
_BITS_XTITYPES_H


25 
	#_BITS_XTITYPES_H
 1

	)

27 
	~<bôs/ty≥s.h
>

30 
__SLONG32_TYPE
 
	t__t_sˇœr_t
;

31 
__ULONG32_TYPE
 
	t__t_usˇœr_t
;

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

74 
	#IF_GET_IFACE
 0x0001

	)

75 
	#IF_GET_PROTO
 0x0002

	)

78 
	#IF_IFACE_V35
 0x1000

	)

79 
	#IF_IFACE_V24
 0x1001

	)

80 
	#IF_IFACE_X21
 0x1002

	)

81 
	#IF_IFACE_T1
 0x1003

	)

82 
	#IF_IFACE_E1
 0x1004

	)

83 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

84 
	#IF_IFACE_X21D
 0x1006

	)

87 
	#IF_PROTO_HDLC
 0x2000

	)

88 
	#IF_PROTO_PPP
 0x2001

	)

89 
	#IF_PROTO_CISCO
 0x2002

	)

90 
	#IF_PROTO_FR
 0x2003

	)

91 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

92 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

93 
	#IF_PROTO_X25
 0x2006

	)

94 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

95 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

96 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

97 
	#IF_PROTO_FR_PVC
 0x200A

	)

98 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

99 
	#IF_PROTO_RAW
 0x200C

	)

103 
	mIF_OPER_UNKNOWN
,

104 
	mIF_OPER_NOTPRESENT
,

105 
	mIF_OPER_DOWN
,

106 
	mIF_OPER_LOWERLAYERDOWN
,

107 
	mIF_OPER_TESTING
,

108 
	mIF_OPER_DORMANT
,

109 
	mIF_OPER_UP
,

114 
	mIF_LINK_MODE_DEFAULT
,

115 
	mIF_LINK_MODE_DORMANT
,

128 
	sifm≠


130 
	mmem_°¨t
;

131 
	mmem_íd
;

132 
	mba£_addr
;

133 
	múq
;

134 
	mdma
;

135 
	mp‹t
;

139 
	sif_£âögs


141 
	mty≥
;

142 
	msize
;

145 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

146 
cisco_¥Ÿo
 *
	mcisco
;

147 
‰_¥Ÿo
 *
	m‰
;

148 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

149 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

152 
sync_£rül_£âögs
 *
	msync
;

153 
ã1_£âögs
 *
	mã1
;

154 } 
	mifs_ifsu
;

164 
	si‰eq


166 
	#IFHWADDRLEN
 6

	)

169 
	mi‰n_«me
[
IFNAMSIZ
];

170 } 
	mi‰_i‰n
;

173 
sockaddr
 
	mi‰u_addr
;

174 
sockaddr
 
	mi‰u_d°addr
;

175 
sockaddr
 
	mi‰u_brﬂdaddr
;

176 
sockaddr
 
	mi‰u_√tmask
;

177 
sockaddr
 
	mi‰u_hwaddr
;

178 
	mi‰u_Êags
;

179 
	mi‰u_ivÆue
;

180 
	mi‰u_mtu
;

181 
ifm≠
 
	mi‰u_m≠
;

182 
	mi‰u_¶ave
[
IFNAMSIZ
];

183 
	mi‰u_√w«me
[
IFNAMSIZ
];

184 * 
	mi‰u_d©a
;

185 
if_£âögs
 
	mi‰u_£âögs
;

186 } 
	mi‰_i‰u
;

189 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

190 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

191 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

192 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

193 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

194 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

195 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

196 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

197 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

198 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

199 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

200 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

201 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

202 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

203 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

204 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

205 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

214 
	sifc⁄f


216 
	mifc_Àn
;

219 *
	mifcu_buf
;

220 
i‰eq
 *
	mifcu_ªq
;

221 } 
	mifc_ifcu
;

223 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

224 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_ATMFATE
 0x8884

	)

78 
	#ETH_P_PAE
 0x888E

	)

79 
	#ETH_P_AOE
 0x88A2

	)

80 
	#ETH_P_TIPC
 0x88CA

	)

81 
	#ETH_P_1588
 0x88F7

	)

82 
	#ETH_P_FCOE
 0x8906

	)

83 
	#ETH_P_FIP
 0x8914

	)

84 
	#ETH_P_EDSA
 0xDADA

	)

90 
	#ETH_P_802_3
 0x0001

	)

91 
	#ETH_P_AX25
 0x0002

	)

92 
	#ETH_P_ALL
 0x0003

	)

93 
	#ETH_P_802_2
 0x0004

	)

94 
	#ETH_P_SNAP
 0x0005

	)

95 
	#ETH_P_DDCMP
 0x0006

	)

96 
	#ETH_P_WAN_PPP
 0x0007

	)

97 
	#ETH_P_PPP_MP
 0x0008

	)

98 
	#ETH_P_LOCALTALK
 0x0009

	)

99 
	#ETH_P_CAN
 0x000C

	)

100 
	#ETH_P_PPPTALK
 0x0010

	)

101 
	#ETH_P_TR_802_2
 0x0011

	)

102 
	#ETH_P_MOBITEX
 0x0015

	)

103 
	#ETH_P_CONTROL
 0x0016

	)

104 
	#ETH_P_IRDA
 0x0017

	)

105 
	#ETH_P_ECONET
 0x0018

	)

106 
	#ETH_P_HDLC
 0x0019

	)

107 
	#ETH_P_ARCNET
 0x001A

	)

108 
	#ETH_P_DSA
 0x001B

	)

109 
	#ETH_P_TRAILER
 0x001C

	)

110 
	#ETH_P_PHONET
 0x00F5

	)

111 
	#ETH_P_IEEE802154
 0x00F6

	)

117 
	sëhhdr
 {

118 
	mh_de°
[
ETH_ALEN
];

119 
	mh_sour˚
[
ETH_ALEN
];

120 
__be16
 
	mh_¥Ÿo
;

121 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt


8 
	m•kt_Ámûy
;

9 
	m•kt_devi˚
[14];

10 
__be16
 
	m•kt_¥Ÿocﬁ
;

13 
	ssockaddr_Œ


15 
	m¶l_Ámûy
;

16 
__be16
 
	m¶l_¥Ÿocﬁ
;

17 
	m¶l_ifödex
;

18 
	m¶l_h©y≥
;

19 
	m¶l_pkây≥
;

20 
	m¶l_hÆí
;

21 
	m¶l_addr
[8];

26 
	#PACKET_HOST
 0

	)

27 
	#PACKET_BROADCAST
 1

	)

28 
	#PACKET_MULTICAST
 2

	)

29 
	#PACKET_OTHERHOST
 3

	)

30 
	#PACKET_OUTGOING
 4

	)

32 
	#PACKET_LOOPBACK
 5

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

52 
	sçackë_°©s


54 
	mç_∑ckës
;

55 
	mç_dr›s
;

58 
	sçackë_auxd©a


60 
__u32
 
	mç_°©us
;

61 
__u32
 
	mç_Àn
;

62 
__u32
 
	mç_¢≠Àn
;

63 
__u16
 
	mç_mac
;

64 
__u16
 
	mç_√t
;

65 
__u16
 
	mç_vœn_tci
;

69 
	#TP_STATUS_KERNEL
 0x0

	)

70 
	#TP_STATUS_USER
 0x1

	)

71 
	#TP_STATUS_COPY
 0x2

	)

72 
	#TP_STATUS_LOSING
 0x4

	)

73 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

76 
	#TP_STATUS_AVAILABLE
 0x0

	)

77 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

78 
	#TP_STATUS_SENDING
 0x2

	)

79 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

81 
	sçackë_hdr


83 
	mç_°©us
;

84 
	mç_Àn
;

85 
	mç_¢≠Àn
;

86 
	mç_mac
;

87 
	mç_√t
;

88 
	mç_£c
;

89 
	mç_u£c
;

92 
	#TPACKET_ALIGNMENT
 16

	)

93 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

94 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

96 
	sçackë2_hdr


98 
__u32
 
	mç_°©us
;

99 
__u32
 
	mç_Àn
;

100 
__u32
 
	mç_¢≠Àn
;

101 
__u16
 
	mç_mac
;

102 
__u16
 
	mç_√t
;

103 
__u32
 
	mç_£c
;

104 
__u32
 
	mç_n£c
;

105 
__u16
 
	mç_vœn_tci
;

108 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

110 
	eçackë_vîsi⁄s


112 
	mTPACKET_V1
,

113 
	mTPACKET_V2
,

129 
	sçackë_ªq


131 
	mç_block_size
;

132 
	mç_block_ƒ
;

133 
	mç_‰ame_size
;

134 
	mç_‰ame_ƒ
;

137 
	s∑ckë_mªq


139 
	mmr_ifödex
;

140 
	mmr_ty≥
;

141 
	mmr_Æí
;

142 
	mmr_addªss
[8];

145 
	#PACKET_MR_MULTICAST
 0

	)

146 
	#PACKET_MR_PROMISC
 1

	)

147 
	#PACKET_MR_ALLMULTI
 2

	)

148 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_VENDOR_ID
 0x00

	)

30 
	#PCI_DEVICE_ID
 0x02

	)

31 
	#PCI_COMMAND
 0x04

	)

32 
	#PCI_COMMAND_IO
 0x1

	)

33 
	#PCI_COMMAND_MEMORY
 0x2

	)

34 
	#PCI_COMMAND_MASTER
 0x4

	)

35 
	#PCI_COMMAND_SPECIAL
 0x8

	)

36 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

37 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

38 
	#PCI_COMMAND_PARITY
 0x40

	)

39 
	#PCI_COMMAND_WAIT
 0x80

	)

40 
	#PCI_COMMAND_SERR
 0x100

	)

41 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

42 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

44 
	#PCI_STATUS
 0x06

	)

45 
	#PCI_STATUS_INTERRUPT
 0x08

	)

46 
	#PCI_STATUS_CAP_LIST
 0x10

	)

47 
	#PCI_STATUS_66MHZ
 0x20

	)

48 
	#PCI_STATUS_UDF
 0x40

	)

49 
	#PCI_STATUS_FAST_BACK
 0x80

	)

50 
	#PCI_STATUS_PARITY
 0x100

	)

51 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

52 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

53 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

54 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

55 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

56 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

57 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

58 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

59 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

61 
	#PCI_CLASS_REVISION
 0x08

	)

62 
	#PCI_REVISION_ID
 0x08

	)

63 
	#PCI_CLASS_PROG
 0x09

	)

64 
	#PCI_CLASS_DEVICE
 0x0®

	)

66 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

67 
	#PCI_LATENCY_TIMER
 0x0d

	)

68 
	#PCI_HEADER_TYPE
 0x0ê

	)

69 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

70 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

71 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

73 
	#PCI_BIST
 0x0‡

	)

74 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

75 
	#PCI_BIST_START
 0x40

	)

76 
	#PCI_BIST_CAPABLE
 0x80

	)

84 
	#PCI_BASE_ADDRESS_0
 0x10

	)

85 
	#PCI_BASE_ADDRESS_1
 0x14

	)

86 
	#PCI_BASE_ADDRESS_2
 0x18

	)

87 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

88 
	#PCI_BASE_ADDRESS_4
 0x20

	)

89 
	#PCI_BASE_ADDRESS_5
 0x24

	)

90 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

91 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

93 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

97 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

98 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

99 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

103 
	#PCI_CARDBUS_CIS
 0x28

	)

104 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

105 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

106 
	#PCI_ROM_ADDRESS
 0x30

	)

107 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

108 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

110 
	#PCI_CAPABILITY_LIST
 0x34

	)

113 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

114 
	#PCI_INTERRUPT_PIN
 0x3d

	)

115 
	#PCI_MIN_GNT
 0x3ê

	)

116 
	#PCI_MAX_LAT
 0x3‡

	)

119 
	#PCI_PRIMARY_BUS
 0x18

	)

120 
	#PCI_SECONDARY_BUS
 0x19

	)

121 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

122 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

123 
	#PCI_IO_BASE
 0x1¯

	)

124 
	#PCI_IO_LIMIT
 0x1d

	)

125 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

126 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

127 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

128 
	#PCI_IO_RANGE_MASK
 (~0x0fUL)

	)

129 
	#PCI_SEC_STATUS
 0x1ê

	)

130 
	#PCI_MEMORY_BASE
 0x20

	)

131 
	#PCI_MEMORY_LIMIT
 0x22

	)

132 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

133 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

134 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

135 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

136 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

137 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

138 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

139 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

140 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

141 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

142 
	#PCI_IO_BASE_UPPER16
 0x30

	)

143 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

146 
	#PCI_ROM_ADDRESS1
 0x38

	)

148 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

149 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

150 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

151 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

152 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

153 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

154 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

155 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

158 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

160 
	#PCI_CB_SEC_STATUS
 0x16

	)

161 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

162 
	#PCI_CB_CARD_BUS
 0x19

	)

163 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

164 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

165 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

166 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

167 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

168 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

169 
	#PCI_CB_IO_BASE_0
 0x2c

	)

170 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

171 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

172 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

173 
	#PCI_CB_IO_BASE_1
 0x34

	)

174 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

175 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

176 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

177 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

179 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

180 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

181 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

182 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

183 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

184 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

185 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

186 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

187 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

188 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

189 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

190 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

191 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

192 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

197 
	#PCI_CAP_LIST_ID
 0

	)

198 
	#PCI_CAP_ID_PM
 0x01

	)

199 
	#PCI_CAP_ID_AGP
 0x02

	)

200 
	#PCI_CAP_ID_VPD
 0x03

	)

201 
	#PCI_CAP_ID_SLOTID
 0x04

	)

202 
	#PCI_CAP_ID_MSI
 0x05

	)

203 
	#PCI_CAP_ID_CHSWP
 0x06

	)

204 
	#PCI_CAP_ID_PCIX
 0x07

	)

205 
	#PCI_CAP_ID_HT
 0x08

	)

206 
	#PCI_CAP_ID_VNDR
 0x09

	)

207 
	#PCI_CAP_ID_DBG
 0x0A

	)

208 
	#PCI_CAP_ID_CCRC
 0x0B

	)

209 
	#PCI_CAP_ID_SHPC
 0x0C

	)

210 
	#PCI_CAP_ID_SSVID
 0x0D

	)

211 
	#PCI_CAP_ID_AGP3
 0x0E

	)

212 
	#PCI_CAP_ID_EXP
 0x10

	)

213 
	#PCI_CAP_ID_MSIX
 0x11

	)

214 
	#PCI_CAP_ID_AF
 0x13

	)

215 
	#PCI_CAP_LIST_NEXT
 1

	)

216 
	#PCI_CAP_FLAGS
 2

	)

217 
	#PCI_CAP_SIZEOF
 4

	)

221 
	#PCI_PM_PMC
 2

	)

222 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

223 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

224 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

225 
	#PCI_PM_CAP_DSI
 0x0020

	)

226 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

227 
	#PCI_PM_CAP_D1
 0x0200

	)

228 
	#PCI_PM_CAP_D2
 0x0400

	)

229 
	#PCI_PM_CAP_PME
 0x0800

	)

230 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

231 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

232 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

233 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

234 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

235 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

236 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

237 
	#PCI_PM_CTRL
 4

	)

238 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

239 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

240 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

241 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

242 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

243 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

244 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

245 
	#PCI_PM_PPB_B2_B3
 0x40

	)

246 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

247 
	#PCI_PM_DATA_REGISTER
 7

	)

248 
	#PCI_PM_SIZEOF
 8

	)

252 
	#PCI_AGP_VERSION
 2

	)

253 
	#PCI_AGP_RFU
 3

	)

254 
	#PCI_AGP_STATUS
 4

	)

255 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

256 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

257 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

258 
	#PCI_AGP_STATUS_FW
 0x0010

	)

259 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

260 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

261 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

262 
	#PCI_AGP_COMMAND
 8

	)

263 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

264 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

265 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

266 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

267 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

268 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

269 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

270 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

271 
	#PCI_AGP_SIZEOF
 12

	)

275 
	#PCI_VPD_ADDR
 2

	)

276 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

277 
	#PCI_VPD_ADDR_F
 0x8000

	)

278 
	#PCI_VPD_DATA
 4

	)

282 
	#PCI_SID_ESR
 2

	)

283 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

284 
	#PCI_SID_ESR_FIC
 0x20

	)

285 
	#PCI_SID_CHASSIS_NR
 3

	)

289 
	#PCI_MSI_FLAGS
 2

	)

290 
	#PCI_MSI_FLAGS_64BIT
 0x80

	)

291 
	#PCI_MSI_FLAGS_QSIZE
 0x70

	)

292 
	#PCI_MSI_FLAGS_QMASK
 0x0ê

	)

293 
	#PCI_MSI_FLAGS_ENABLE
 0x01

	)

294 
	#PCI_MSI_FLAGS_MASKBIT
 0x100

	)

295 
	#PCI_MSI_RFU
 3

	)

296 
	#PCI_MSI_ADDRESS_LO
 4

	)

297 
	#PCI_MSI_ADDRESS_HI
 8

	)

298 
	#PCI_MSI_DATA_32
 8

	)

299 
	#PCI_MSI_MASK_32
 12

	)

300 
	#PCI_MSI_DATA_64
 12

	)

301 
	#PCI_MSI_MASK_64
 16

	)

304 
	#PCI_MSIX_FLAGS
 2

	)

305 
	#PCI_MSIX_FLAGS_QSIZE
 0x7FF

	)

306 
	#PCI_MSIX_FLAGS_ENABLE
 (1 << 15)

	)

307 
	#PCI_MSIX_FLAGS_MASKALL
 (1 << 14)

	)

308 
	#PCI_MSIX_FLAGS_BIRMASK
 (7 << 0)

	)

312 
	#PCI_CHSWP_CSR
 2

	)

313 
	#PCI_CHSWP_DHA
 0x01

	)

314 
	#PCI_CHSWP_EIM
 0x02

	)

315 
	#PCI_CHSWP_PIE
 0x04

	)

316 
	#PCI_CHSWP_LOO
 0x08

	)

317 
	#PCI_CHSWP_PI
 0x30

	)

318 
	#PCI_CHSWP_EXT
 0x40

	)

319 
	#PCI_CHSWP_INS
 0x80

	)

323 
	#PCI_AF_LENGTH
 2

	)

324 
	#PCI_AF_CAP
 3

	)

325 
	#PCI_AF_CAP_TP
 0x01

	)

326 
	#PCI_AF_CAP_FLR
 0x02

	)

327 
	#PCI_AF_CTRL
 4

	)

328 
	#PCI_AF_CTRL_FLR
 0x01

	)

329 
	#PCI_AF_STATUS
 5

	)

330 
	#PCI_AF_STATUS_TP
 0x01

	)

334 
	#PCI_X_CMD
 2

	)

335 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

336 
	#PCI_X_CMD_ERO
 0x0002

	)

337 
	#PCI_X_CMD_READ_512
 0x0000

	)

338 
	#PCI_X_CMD_READ_1K
 0x0004

	)

339 
	#PCI_X_CMD_READ_2K
 0x0008

	)

340 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

341 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

343 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

344 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

345 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

346 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

347 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

348 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

349 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

350 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

351 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

352 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

353 
	#PCI_X_STATUS
 4

	)

354 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

355 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

356 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

357 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

358 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

359 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

360 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

361 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

362 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

363 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

364 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

365 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

366 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

370 
	#PCI_EXP_FLAGS
 2

	)

371 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

372 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

373 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

374 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

375 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

376 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

377 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

378 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

379 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

380 
	#PCI_EXP_TYPE_RC_EC
 0x10

	)

381 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

382 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

383 
	#PCI_EXP_DEVCAP
 4

	)

384 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x07

	)

385 
	#PCI_EXP_DEVCAP_PHANTOM
 0x18

	)

386 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x20

	)

387 
	#PCI_EXP_DEVCAP_L0S
 0x1c0

	)

388 
	#PCI_EXP_DEVCAP_L1
 0xe00

	)

389 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x1000

	)

390 
	#PCI_EXP_DEVCAP_ATN_IND
 0x2000

	)

391 
	#PCI_EXP_DEVCAP_PWR_IND
 0x4000

	)

392 
	#PCI_EXP_DEVCAP_RBER
 0x8000

	)

393 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x3fc0000

	)

394 
	#PCI_EXP_DEVCAP_PWR_SCL
 0xc000000

	)

395 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

396 
	#PCI_EXP_DEVCTL
 8

	)

397 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

398 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

399 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

400 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

401 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

402 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

403 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

404 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

405 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

406 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

407 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

408 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

409 
	#PCI_EXP_DEVSTA
 10

	)

410 
	#PCI_EXP_DEVSTA_CED
 0x01

	)

411 
	#PCI_EXP_DEVSTA_NFED
 0x02

	)

412 
	#PCI_EXP_DEVSTA_FED
 0x04

	)

413 
	#PCI_EXP_DEVSTA_URD
 0x08

	)

414 
	#PCI_EXP_DEVSTA_AUXPD
 0x10

	)

415 
	#PCI_EXP_DEVSTA_TRPND
 0x20

	)

416 
	#PCI_EXP_LNKCAP
 12

	)

417 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

418 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

419 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

420 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

421 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

422 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

423 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

424 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

425 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

426 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

427 
	#PCI_EXP_LNKCTL
 16

	)

428 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

429 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

430 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

431 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

432 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

433 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

434 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x100

	)

435 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

436 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

437 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

438 
	#PCI_EXP_LNKSTA
 18

	)

439 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

440 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

441 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

442 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

443 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

444 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

445 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

446 
	#PCI_EXP_SLTCAP
 20

	)

447 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

448 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

449 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

450 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

451 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

452 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

453 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

454 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

455 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

456 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

457 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

458 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

459 
	#PCI_EXP_SLTCTL
 24

	)

460 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

461 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

462 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

463 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

464 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

465 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

466 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

467 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

468 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

469 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

470 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

471 
	#PCI_EXP_SLTSTA
 26

	)

472 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

473 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

474 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

475 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

476 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

477 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

478 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

479 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

480 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

481 
	#PCI_EXP_RTCTL
 28

	)

482 
	#PCI_EXP_RTCTL_SECEE
 0x01

	)

483 
	#PCI_EXP_RTCTL_SENFEE
 0x02

	)

484 
	#PCI_EXP_RTCTL_SEFEE
 0x04

	)

485 
	#PCI_EXP_RTCTL_PMEIE
 0x08

	)

486 
	#PCI_EXP_RTCTL_CRSSVE
 0x10

	)

487 
	#PCI_EXP_RTCAP
 30

	)

488 
	#PCI_EXP_RTSTA
 32

	)

489 
	#PCI_EXP_DEVCAP2
 36

	)

490 
	#PCI_EXP_DEVCAP2_ARI
 0x20

	)

491 
	#PCI_EXP_DEVCTL2
 40

	)

492 
	#PCI_EXP_DEVCTL2_ARI
 0x20

	)

493 
	#PCI_EXP_LNKCTL2
 48

	)

494 
	#PCI_EXP_SLTCTL2
 56

	)

497 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

498 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

499 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

501 
	#PCI_EXT_CAP_ID_ERR
 1

	)

502 
	#PCI_EXT_CAP_ID_VC
 2

	)

503 
	#PCI_EXT_CAP_ID_DSN
 3

	)

504 
	#PCI_EXT_CAP_ID_PWR
 4

	)

505 
	#PCI_EXT_CAP_ID_ARI
 14

	)

506 
	#PCI_EXT_CAP_ID_ATS
 15

	)

507 
	#PCI_EXT_CAP_ID_SRIOV
 16

	)

510 
	#PCI_ERR_UNCOR_STATUS
 4

	)

511 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

512 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

513 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

514 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

515 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

516 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

517 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

518 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

519 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

520 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

521 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

522 
	#PCI_ERR_UNCOR_MASK
 8

	)

524 
	#PCI_ERR_UNCOR_SEVER
 12

	)

526 
	#PCI_ERR_COR_STATUS
 16

	)

527 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

528 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

529 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

530 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

531 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

532 
	#PCI_ERR_COR_MASK
 20

	)

534 
	#PCI_ERR_CAP
 24

	)

535 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

536 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

537 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

538 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

539 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

540 
	#PCI_ERR_HEADER_LOG
 28

	)

541 
	#PCI_ERR_ROOT_COMMAND
 44

	)

543 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

545 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

547 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

548 
	#PCI_ERR_ROOT_STATUS
 48

	)

549 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

551 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

553 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

555 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

556 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

557 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

558 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

559 
	#PCI_ERR_ROOT_COR_SRC
 52

	)

560 
	#PCI_ERR_ROOT_SRC
 54

	)

563 
	#PCI_VC_PORT_REG1
 4

	)

564 
	#PCI_VC_PORT_REG2
 8

	)

565 
	#PCI_VC_PORT_CTRL
 12

	)

566 
	#PCI_VC_PORT_STATUS
 14

	)

567 
	#PCI_VC_RES_CAP
 16

	)

568 
	#PCI_VC_RES_CTRL
 20

	)

569 
	#PCI_VC_RES_STATUS
 26

	)

572 
	#PCI_PWR_DSR
 4

	)

573 
	#PCI_PWR_DATA
 8

	)

574 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

575 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

576 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

577 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

578 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

579 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

580 
	#PCI_PWR_CAP
 12

	)

581 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

591 
	#HT_3BIT_CAP_MASK
 0xE0

	)

592 
	#HT_CAPTYPE_SLAVE
 0x00

	)

593 
	#HT_CAPTYPE_HOST
 0x20

	)

595 
	#HT_5BIT_CAP_MASK
 0xF8

	)

596 
	#HT_CAPTYPE_IRQ
 0x80

	)

597 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

598 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

599 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

600 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

601 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

602 
	#HT_MSI_FLAGS
 0x02

	)

603 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

604 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

605 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

606 
	#HT_MSI_ADDR_LO
 0x04

	)

607 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

608 
	#HT_MSI_ADDR_HI
 0x08

	)

609 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

610 
	#HT_CAPTYPE_VCSET
 0xB8

	)

611 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

612 
	#HT_CAPTYPE_GEN3
 0xD0

	)

613 
	#HT_CAPTYPE_PM
 0xE0

	)

616 
	#PCI_ARI_CAP
 0x04

	)

617 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

618 
	#PCI_ARI_CAP_ACS
 0x0002

	)

619 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

620 
	#PCI_ARI_CTRL
 0x06

	)

621 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

622 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

623 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

626 
	#PCI_ATS_CAP
 0x04

	)

627 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

628 
	#PCI_ATS_MAX_QDEP
 32

	)

629 
	#PCI_ATS_CTRL
 0x06

	)

630 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

631 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

632 
	#PCI_ATS_MIN_STU
 12

	)

635 
	#PCI_SRIOV_CAP
 0x04

	)

636 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

637 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

638 
	#PCI_SRIOV_CTRL
 0x08

	)

639 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

640 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

641 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

642 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

643 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

644 
	#PCI_SRIOV_STATUS
 0x0®

	)

645 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

646 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

647 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

648 
	#PCI_SRIOV_NUM_VF
 0x10

	)

649 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

650 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

651 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

652 
	#PCI_SRIOV_VF_DID
 0x1®

	)

653 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

654 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

655 
	#PCI_SRIOV_BAR
 0x24

	)

656 
	#PCI_SRIOV_NUM_BARS
 6

	)

657 
	#PCI_SRIOV_VFM
 0x3¯

	)

658 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

659 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

660 
	#PCI_SRIOV_VFM_UA
 0x0

	)

661 
	#PCI_SRIOV_VFM_MI
 0x1

	)

662 
	#PCI_SRIOV_VFM_MO
 0x2

	)

663 
	#PCI_SRIOV_VFM_AV
 0x3

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sys/poll.h

20 #i‚def 
_SYS_POLL_H


21 
	#_SYS_POLL_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/pﬁl.h
>

27 #ifde‡
__USE_GNU


29 
	~<bôs/sig£t.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

37 
	tnfds_t
;

40 
	spﬁlfd


42 
	mfd
;

43 
	mevíts
;

44 
	mªvíts
;

48 
__BEGIN_DECLS


58 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

60 #ifde‡
__USE_GNU


67 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

68 
__c⁄°
 
time•ec
 *
__timeout
,

69 
__c⁄°
 
__sig£t_t
 *
__ss
);

72 
	g__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/poll.h

1 #i‚de‡
__ASM_GENERIC_POLL_H


2 
	#__ASM_GENERIC_POLL_H


	)

5 
	#POLLIN
 0x0001

	)

6 
	#POLLPRI
 0x0002

	)

7 
	#POLLOUT
 0x0004

	)

8 
	#POLLERR
 0x0008

	)

9 
	#POLLHUP
 0x0010

	)

10 
	#POLLNVAL
 0x0020

	)

13 
	#POLLRDNORM
 0x0040

	)

14 
	#POLLRDBAND
 0x0080

	)

15 #i‚de‡
POLLWRNORM


16 
	#POLLWRNORM
 0x0100

	)

18 #i‚de‡
POLLWRBAND


19 
	#POLLWRBAND
 0x0200

	)

21 #i‚de‡
POLLMSG


22 
	#POLLMSG
 0x0400

	)

24 #i‚de‡
POLLREMOVE


25 
	#POLLREMOVE
 0x1000

	)

27 #i‚de‡
POLLRDHUP


28 
	#POLLRDHUP
 0x2000

	)

31 
	spﬁlfd
 {

32 
	mfd
;

33 
	mevíts
;

34 
	mªvíts
;

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/poll.h

19 #i‚de‡
_SYS_POLL_H


26 
	#POLLIN
 0x001

	)

27 
	#POLLPRI
 0x002

	)

28 
	#POLLOUT
 0x004

	)

30 #ifde‡
__USE_XOPEN


32 
	#POLLRDNORM
 0x040

	)

33 
	#POLLRDBAND
 0x080

	)

34 
	#POLLWRNORM
 0x100

	)

35 
	#POLLWRBAND
 0x200

	)

38 #ifde‡
__USE_GNU


40 
	#POLLMSG
 0x400

	)

41 
	#POLLREMOVE
 0x1000

	)

42 
	#POLLRDHUP
 0x2000

	)

48 
	#POLLERR
 0x008

	)

49 
	#POLLHUP
 0x010

	)

50 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

38 
	m˛ock_øã
;

39 
	m˛ock_ty≥
;

40 
	mlo›back
;

41 } 
	tsync_£rül_£âögs
;

44 
	m˛ock_øã
;

45 
	m˛ock_ty≥
;

46 
	mlo›back
;

47 
	m¶Ÿ_m≠
;

48 } 
	tã1_£âögs
;

51 
	mícodög
;

52 
	m∑rôy
;

53 } 
	tøw_hdlc_¥Ÿo
;

56 
	mt391
;

57 
	mt392
;

58 
	mn391
;

59 
	mn392
;

60 
	mn393
;

61 
	mlmi
;

62 
	md˚
;

63 } 
	t‰_¥Ÿo
;

66 
	mdlci
;

67 } 
	t‰_¥Ÿo_pvc
;

70 
	mdlci
;

71 
	mma°î
[
IFNAMSIZ
];

72 }
	t‰_¥Ÿo_pvc_öfo
;

75 
	möãrvÆ
;

76 
	mtimeout
;

77 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	s__kî√l_sockaddr_°‹age
 {

12 
	mss_Ámûy
;

14 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

17 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

20 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

21 
	#__OPTION_EGLIBC_ENVZ
 1

	)

22 
	#__OPTION_EGLIBC_FCVT
 1

	)

23 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

24 
	#__OPTION_EGLIBC_FSTAB
 1

	)

25 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

26 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

27 
	#__OPTION_EGLIBC_INET
 1

	)

28 
	#__OPTION_EGLIBC_LIBM
 1

	)

29 
	#__OPTION_EGLIBC_LOCALES
 1

	)

30 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

31 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

32 
	#__OPTION_EGLIBC_NIS
 1

	)

33 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

34 
	#__OPTION_EGLIBC_RCMD
 1

	)

35 
	#__OPTION_EGLIBC_SPAWN
 1

	)

36 
	#__OPTION_EGLIBC_STREAMS
 1

	)

37 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

38 
	#__OPTION_EGLIBC_UTMP
 1

	)

39 
	#__OPTION_EGLIBC_UTMPX
 1

	)

40 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

41 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

42 
	#__OPTION_POSIX_REGEXP
 1

	)

43 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

44 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
605
20483
Unix-Programming/Files/app.c
Unix-Programming/Files/cdpwd.c
Unix-Programming/Files/filetype.c
Unix-Programming/Files/mmap.c
Unix-Programming/Files/mmap1.c
Unix-Programming/Files/mmap2.c
Unix-Programming/Files/read.c
Unix-Programming/Files/readfifo.c
Unix-Programming/Files/writefifo.c
Unix-Programming/file_locking2/common.c
Unix-Programming/file_locking2/common.h
Unix-Programming/file_locking2/locker.c
Unix-Programming/file_locking2/non_locker.c
Unix-Programming/filelock-1/FLOCK1.C
Unix-Programming/filelock-1/FLOCK2.C
Unix-Programming/filelock-1/FLOCK3.C
Unix-Programming/filelock-1/PROC1.C
Unix-Programming/filelock-1/PROC2.C
Unix-Programming/filelock-1/PROC3.C
Unix-Programming/filelock-1/PROC41.C
Unix-Programming/filelock-1/PROC42.C
Unix-Programming/filelock-1/PROC51.C
Unix-Programming/filelock-1/PROC52.C
Unix-Programming/filelock-1/singlecopy.c
Unix-Programming/io/part1/create.c
Unix-Programming/io/part1/directio.c
Unix-Programming/io/part1/exe/access.c
Unix-Programming/io/part1/exe/app.c
Unix-Programming/io/part1/exe/buftest.c
Unix-Programming/io/part1/exe/cdpwd.c
Unix-Programming/io/part1/exe/filetype.c
Unix-Programming/io/part1/exe/hole.c
Unix-Programming/io/part1/exe/mmap.c
Unix-Programming/io/part1/exe/mmap1.c
Unix-Programming/io/part1/exe/mmap2.c
Unix-Programming/io/part1/exe/mmap3.c
Unix-Programming/io/part1/exe/read.c
Unix-Programming/io/part1/exe/readfifo.c
Unix-Programming/io/part1/exe/writefifo.c
Unix-Programming/io/part1/lseek.c
Unix-Programming/io/part1/open.c
Unix-Programming/io/part1/perror.c
Unix-Programming/io/part1/read.c
Unix-Programming/io/part1/read1.c
Unix-Programming/io/part1/read_ahead.c
Unix-Programming/io/part1/readv.c
Unix-Programming/io/part1/sync.c
Unix-Programming/io/part1/write.c
Unix-Programming/io/part1/write1.c
Unix-Programming/io/part1/writev.c
Unix-Programming/io/part2/file_locking2/common.c
Unix-Programming/io/part2/file_locking2/common.h
Unix-Programming/io/part2/file_locking2/locker.c
Unix-Programming/io/part2/file_locking2/non_locker.c
Unix-Programming/io/part2/filelock-1/FLOCK1.C
Unix-Programming/io/part2/filelock-1/FLOCK2.C
Unix-Programming/io/part2/filelock-1/FLOCK3.C
Unix-Programming/io/part2/filelock-1/PROC1.C
Unix-Programming/io/part2/filelock-1/PROC2.C
Unix-Programming/io/part2/filelock-1/PROC3.C
Unix-Programming/io/part2/filelock-1/PROC41.C
Unix-Programming/io/part2/filelock-1/PROC42.C
Unix-Programming/io/part2/filelock-1/PROC51.C
Unix-Programming/io/part2/filelock-1/PROC52.C
Unix-Programming/io/part2/filelock-1/singlecopy.c
Unix-Programming/io/part2/flock.c
Unix-Programming/io/part2/mmap.c
Unix-Programming/io/part3/mmap.c
Unix-Programming/io/part3/mmap1.c
Unix-Programming/io/part3/mmap2.c
Unix-Programming/io/part3/mmap3.c
Unix-Programming/io/part3/mmap4.c
Unix-Programming/io/part3/mmap5.c
Unix-Programming/io/part3/write.c
Unix-Programming/io/part4/aio_read_write.c
Unix-Programming/io/part4/aio_read_write_list.c
Unix-Programming/io/part4/multi1.c
Unix-Programming/io/part4/multi2.c
Unix-Programming/io/part4/multi3.c
Unix-Programming/io/part4/multi4.c
Unix-Programming/io/part4/poll1.c
Unix-Programming/io/part4/poll2.c
Unix-Programming/io/part4/splice.c
Unix-Programming/ioperm/rtc.c
Unix-Programming/ioperm/rtc1.c
Unix-Programming/ioperm/rtc2.c
Unix-Programming/ioperm/spek.c
Unix-Programming/ipc/MSGQ/ftok.c
Unix-Programming/ipc/MSGQ/msgq1.c
Unix-Programming/ipc/MSGQ/msgq21.c
Unix-Programming/ipc/MSGQ/msgq22.c
Unix-Programming/ipc/MSGQ/msgq23.c
Unix-Programming/ipc/MSGQ/msgq3.c
Unix-Programming/ipc/PIPES/pipe1.c
Unix-Programming/ipc/PIPES/pipe2.c
Unix-Programming/ipc/PIPES/pipe3.c
Unix-Programming/ipc/SEMOP/sp1.c
Unix-Programming/ipc/SEMOP/sp2.c
Unix-Programming/ipc/SEMOP/sp32.c
Unix-Programming/ipc/SEMOP/sp41.c
Unix-Programming/ipc/SEMOP/sp42.c
Unix-Programming/ipc/sharedmemory/SHMEM/mem1.c
Unix-Programming/ipc/sharedmemory/SHMEM/mem21.c
Unix-Programming/ipc/sharedmemory/SHMEM/mem22.c
Unix-Programming/ipc/sharedmemory/SHMEM/mem31.c
Unix-Programming/ipc/sharedmemory/SHMEM/mem32.c
Unix-Programming/ipc/sharedmemory/SHMEM/mem4.c
Unix-Programming/ipc/sharedmemory/SHMEM/mem51.c
Unix-Programming/ipc/sharedmemory/SHMEM/memconst.h
Unix-Programming/ipc/sharedmemory/SHMEM/memkey.h
Unix-Programming/posix/PERR.C
Unix-Programming/posix/POSIXVER.C
Unix-Programming/posix/PRL.C
Unix-Programming/posix/STDARGS.C
Unix-Programming/posix/ansilimits.c
Unix-Programming/posix/posixlimits.c
Unix-Programming/posix/posixopts.c
Unix-Programming/process-mgmt/IPCs/mqs/process1.c
Unix-Programming/process-mgmt/IPCs/mqs/process2.c
Unix-Programming/process-mgmt/IPCs/sem/SystemV_sem/sem.c
Unix-Programming/process-mgmt/IPCs/sem/posix_sem/Unrelated/process1.c
Unix-Programming/process-mgmt/IPCs/sem/posix_sem/Unrelated/process2.c
Unix-Programming/process-mgmt/IPCs/sem/posix_sem/related/threads.c
Unix-Programming/process-mgmt/IPCs/shm/posix/Unrelated/process1.c
Unix-Programming/process-mgmt/IPCs/shm/posix/Unrelated/process2.c
Unix-Programming/process-mgmt/IPCs/shm/posix/related/process1.c
Unix-Programming/process-mgmt/IPCs/shm/posix_shm/Unrelated/process1.c
Unix-Programming/process-mgmt/IPCs/shm/posix_shm/Unrelated/process2.c
Unix-Programming/process-mgmt/IPCs/shm/posix_shm/related/process1.c
Unix-Programming/process-mgmt/IPCs/shm/systemV/shm.c
Unix-Programming/process-mgmt/Pthreads/RWLocks/pthread_rwlock.c
Unix-Programming/process-mgmt/Pthreads/conditional_variable/pthread_cond.c
Unix-Programming/process-mgmt/Pthreads/conditional_variable/pthread_cond1.c
Unix-Programming/process-mgmt/Pthreads/mutex/MutexTypes/attr_PRIO_INHERIT.c
Unix-Programming/process-mgmt/Pthreads/mutex/MutexTypes/consistent.c
Unix-Programming/process-mgmt/Pthreads/mutex/MutexTypes/errorcheck.c
Unix-Programming/process-mgmt/Pthreads/mutex/MutexTypes/recursive.c
Unix-Programming/process-mgmt/Pthreads/mutex/pthread_mutex.c
Unix-Programming/process-mgmt/Pthreads/mutex/pthread_timed_mutex.c
Unix-Programming/process-mgmt/Pthreads/mutex/pthread_try_mutex.c
Unix-Programming/process-mgmt/Pthreads/pthread_once/pthread_once.c
Unix-Programming/process-mgmt/Pthreads/pthread_self/pthread_self.c
Unix-Programming/process-mgmt/Pthreads/signals/pthread_sigmaks.c
Unix-Programming/process-mgmt/Pthreads/spinlock/pthread_spinlock.c
Unix-Programming/process-mgmt/Pthreads/thread_attr/attr_detach/attr_detach.c
Unix-Programming/process-mgmt/Pthreads/thread_attr/attr_detach/pthread_detach.c
Unix-Programming/process-mgmt/Pthreads/thread_attr/attr_init/attr_init.c
Unix-Programming/process-mgmt/Pthreads/thread_attr/attr_join/pthread_join.c
Unix-Programming/process-mgmt/Pthreads/thread_attr/pthread_getattr.c
Unix-Programming/process-mgmt/Pthreads/thread_attr/stack_management/attr_stack.c
Unix-Programming/process-mgmt/Pthreads/thread_attr/thread_scheduling/attr_inheritsched.c
Unix-Programming/process-mgmt/Pthreads/thread_attr/thread_scheduling/attr_sched.c
Unix-Programming/process-mgmt/Pthreads/thread_create/pthread_create.c
Unix-Programming/process-mgmt/Pthreads/thread_create/pthread_create1.c
Unix-Programming/process-mgmt/exec/exec1.c
Unix-Programming/process-mgmt/exec/exec2.c
Unix-Programming/process-mgmt/exec/exec3.c
Unix-Programming/process-mgmt/exec/exec4.c
Unix-Programming/process-mgmt/exec/exec5.c
Unix-Programming/process-mgmt/exec/test.c
Unix-Programming/process-mgmt/exec/test1.c
Unix-Programming/process-mgmt/exec/test3.c
Unix-Programming/process-mgmt/exec/test4.c
Unix-Programming/process-mgmt/fork/frk1.c
Unix-Programming/process-mgmt/fork/frk2.c
Unix-Programming/process-mgmt/fork/frk3.c
Unix-Programming/process-mgmt/fork/frk4.c
Unix-Programming/process-mgmt/fork/frk5.c
Unix-Programming/process-mgmt/fork/frk6.c
Unix-Programming/process-mgmt/threads/pt.c
Unix-Programming/process-mgmt/threads/pth0.c
Unix-Programming/process-mgmt/threads/pth1.c
Unix-Programming/process-mgmt/threads/pth2.c
Unix-Programming/sched/affinity.c
Unix-Programming/sched/priority.c
Unix-Programming/sched/priority1.c
Unix-Programming/sched/sched_param.c
Unix-Programming/sched/sched_scheduler.c
Unix-Programming/selectpoll/multi1.c
Unix-Programming/selectpoll/multi2.c
Unix-Programming/selectpoll/multi3.c
Unix-Programming/selectpoll/multi4.c
Unix-Programming/selectpoll/namedpipec/client.c
Unix-Programming/selectpoll/namedpipec/fullduplex.h
Unix-Programming/selectpoll/namedpipec/server.c
Unix-Programming/selectpoll/poll1.c
Unix-Programming/selectpoll/poll2.c
Unix-Programming/serial/mr.c
Unix-Programming/serial/mw.c
Unix-Programming/serial/ser1.c
Unix-Programming/serial/ser1.h
Unix-Programming/signals/part1/killproc.c
Unix-Programming/signals/part1/proc1.c
Unix-Programming/signals/part1/readconf.c
Unix-Programming/signals/part1/sigabort.c
Unix-Programming/signals/part1/sigalarm.c
Unix-Programming/signals/part1/sighand.c
Unix-Programming/signals/part1/sighand1.c
Unix-Programming/signals/part1/sigign.c
Unix-Programming/signals/part1/sigintr.c
Unix-Programming/signals/part1/test.c
Unix-Programming/signals/part2/sigpend.c
Unix-Programming/signals/part2/sigset1.c
Unix-Programming/signals/part2/sigset2.c
Unix-Programming/signals/part2/sigset3.c
Unix-Programming/signals/part2/sigset4.c
Unix-Programming/signals/part2/sigset5.c
c-code/Designs/layarch/desg1/gifhandler.c
c-code/Designs/layarch/desg1/handlers.h
c-code/Designs/layarch/desg1/tiffhandler.c
c-code/Designs/layarch/desg1/ui.c
c-code/Designs/layarch/desg2/bmphandler.c
c-code/Designs/layarch/desg2/config.c
c-code/Designs/layarch/desg2/gifhandler.c
c-code/Designs/layarch/desg2/handlers.h
c-code/Designs/layarch/desg2/jpghandler.c
c-code/Designs/layarch/desg2/pcxhandler.c
c-code/Designs/layarch/desg2/tifhandler.c
c-code/Designs/layarch/desg2/ui.c
c-code/Designs/layarch/desg2/viml.c
c-code/Designs/layarch/desg3/bmphandler.c
c-code/Designs/layarch/desg3/config.c
c-code/Designs/layarch/desg3/gifhandler.c
c-code/Designs/layarch/desg3/handlers.h
c-code/Designs/layarch/desg3/jpghandler.c
c-code/Designs/layarch/desg3/tifhandler.c
c-code/Designs/layarch/desg3/ui.c
c-code/Designs/layarch/desg3/viml.c
c-code/Queue/QUEUE.C
c-code/Queue/QUEUE.H
c-code/Queue/TESTQ.C
c-code/Queue/TESTQ1.C
c-code/Queue/TESTQ2.C
c-code/build/make1/gifhandler.c
c-code/build/make1/handlers.h
c-code/build/make1/ui.c
c-code/build/make2/gifhandler.c
c-code/build/make2/handlers.h
c-code/build/make2/ui.c
c-code/build/make3/gifhandler.c
c-code/build/make3/handlers.h
c-code/build/make3/ui.c
c-code/build/make4/gif/gifhandler.c
c-code/build/make4/gif/handlers.h
c-code/build/make4/handlers.h
c-code/build/make4/ui.c
c-code/loadtime/MANDL.C
c-code/loadtime/MYLIB.C
c-code/memcpy/MEM1.C
c-code/memcpy/MEM2.C
c-code/memcpy/TEST1.C
c-code/memcpy/TEST2.C
c-code/pointers/part1/five.c
c-code/pointers/part1/four.c
c-code/pointers/part1/one.c
c-code/pointers/part1/six.c
c-code/pointers/part1/three.c
c-code/pointers/part1/two.c
c-code/pointers/part2/FOUR.C
c-code/pointers/part2/ONE.C
c-code/pointers/part2/THREE.C
c-code/pointers/part2/TWO.C
c-code/pointers/part3/FOUR.C
c-code/pointers/part3/ONE.C
c-code/pointers/part3/THREE.C
c-code/pointers/part3/TWO.C
c-code/pointers/part4/FIVE.C
c-code/pointers/part4/FOUR.C
c-code/pointers/part4/SIX.C
c-code/pointers/part4/STRUCT.C
c-code/pointers/part4/STRUCT1.C
c-code/pointers/part4/THREE.C
c-code/pointers/part5/CHKFREED.C
c-code/pointers/part5/OVERRUN.C
c-code/pointers/part5/four.c
c-code/pointers/part5/nooverrun.c
c-code/pointers/part5/one.c
c-code/pointers/part5/three.c
c-code/pointers/part5/two.c
c-code/pointers/part5/underrun.c
c-code/stack/BIN/ABC.C
c-code/stack/BIN/GENSTK.C
c-code/stack/BIN/GENSTK.H
c-code/stack/BIN/STACK1.C
c-code/stack/BIN/STACK1.H
c-code/stack/BIN/US2.C
c-code/stack/BIN/US3.C
c-code/stack/BIN/usestack1.c
c-code/stack/TXT/ABC.C
c-code/stack/TXT/GENSTK.C
c-code/stack/TXT/GENSTK.H
c-code/stack/TXT/STACK1.C
c-code/stack/TXT/STACK1.H
c-code/stack/TXT/US2.C
c-code/stack/TXT/US3.C
c-code/stack/TXT/usestack1.c
c-code/static&shared/main.c
c-code/static&shared/pop3.h
c-code/static&shared/pop3recv.c
c-code/static&shared/pop3send.c
c-code/trees/ONE.C
c-code/trees/TREE.C
c-code/trees/TREE.H
c-code/trees/USETREE.C
c-code/trees/UT.C
c-code/trees/XYZ.C
ddex/block/ramdisk.c
ddex/block/test.c
ddex/char/clock/clock.c
ddex/char/clock/clock.h
ddex/char/clock/useclk.c
ddex/char/clock/useclk1.c
ddex/char/ioctl/char_driver_ioctlrw.c
ddex/char/ioctl/char_driver_ioctlvar.c
ddex/char/ioctl/myproc.c
ddex/char/ioctl/rwioctl_test.c
ddex/char/ioctl/varioctl_test.c
ddex/char/ioctl/veda_char_device.h
ddex/char/kbd/five/kboard.h
ddex/char/kbd/five/kboard5.c
ddex/char/kbd/five/testkb.c
ddex/char/kbd/four/kboard.h
ddex/char/kbd/four/kboard4.c
ddex/char/kbd/four/testkb.c
ddex/char/kbd/one/kboard1.c
ddex/char/kbd/one/kboard1.mod.c
ddex/char/kbd/three/kboard.h
ddex/char/kbd/three/kboard3.c
ddex/char/kbd/three/testkb.c
ddex/char/kbd/two/kboard.h
ddex/char/kbd/two/kboard2.c
ddex/char/part1/char_driver_dynamic.c
ddex/char/part1/char_driver_skel.c
ddex/char/part1/test_chrdev.c
ddex/char/part2/char_driver_udev.c
ddex/char/part2/test_chrdev.c
ddex/char/part3/char_driver_ioctl.c
ddex/char/part3/test_char_driver_ioctl.c
ddex/char/part3/veda_char_device.h
ddex/char/part4/chr_drv_complete.c
ddex/char/part4/chr_drv_killable.c
ddex/char/part4/chr_drv_sema.c
ddex/char/part4/chr_drv_wait_event.c
ddex/char/part4/chr_drv_waitexcl.c
ddex/char/part4/reader1.c
ddex/char/part4/veda_char_device.h
ddex/char/part4/writer.c
ddex/char/part5/hrexamp.c
ddex/char/part5/interrupt.c
ddex/char/part5/inttest.c
ddex/char/part5/mytasklet.c
ddex/char/part5/timer.c
ddex/char/part5/wrkqueue.c
ddex/char/part6/chr_drv_async.c
ddex/char/part6/chr_drv_poll.c
ddex/char/part6/polltest.c
ddex/char/part6/reader.c
ddex/char/part6/sample.c
ddex/char/part6/writer.c
ddex/char/part7/char_driver_aio.c
ddex/char/part7/test_char_driver.c
ddex/char/part8/char_driver_mmap.c
ddex/char/part8/mmap.c
ddex/char/part8/test_mmap.c
ddex/char/part8/vram.c
ddex/char/part8/vramdraw.cpp
ddex/char/part8/vramm.c
ddex/char/part8/vrammdraw.cpp
ddex/char/skel/lcdtest.c
ddex/char/skel/mylcd.c
ddex/char/skel/mylcd.mod.c
ddex/netdriver/RTL8139_skel.c/nicdriver.c
ddex/netdriver/ethtool_driver/nicdriver.c
ddex/usb_skel/usb-skeleton.c
ddex/usb_skel/usb_test.c
kern-prog/Kern-Threads/mytsk.c
kern-prog/Kern-Threads/test.c
kern-prog/Kern-Threads/test_thread.c
kern-prog/Kern-Threads/thread.c
kern-prog/Kern-rsrc/atomic.c
kern-prog/Kern-rsrc/jiff_overflow.c
kern-prog/Kern-rsrc/jiffies.c
kern-prog/Kern-rsrc/linked_list.c
kern-prog/LockRcu1/my_rcu.h
kern-prog/LockRcu1/rcu_reader1.c
kern-prog/LockRcu1/rcu_reader1.mod.c
kern-prog/LockRcu1/rcu_reader2.c
kern-prog/LockRcu1/rcu_reader2.mod.c
kern-prog/LockRcu1/rcu_stack.c
kern-prog/LockRcu1/rcu_stack.mod.c
kern-prog/LockRcu1/rcu_writer.c
kern-prog/LockRcu1/rcu_writer.mod.c
kern-prog/Locks/complte/comp.c
kern-prog/Locks/complte/complte.c
kern-prog/Locks/complte/reader.c
kern-prog/Locks/complte/reader1.c
kern-prog/Locks/complte/writer.c
kern-prog/Locks/rwsem_mod/rwsem_module.c
kern-prog/Locks/rwsem_mod/rwsem_reader1.c
kern-prog/Locks/rwsem_mod/rwsem_reader2.c
kern-prog/Locks/rwsem_mod/rwsem_writer1.c
kern-prog/Locks/rwsem_mod/rwsem_writer2.c
kern-prog/Locks/sem/module1.c
kern-prog/Locks/sem/module2.c
kern-prog/Locks/sem/module3.c
kern-prog/Locks/seq_mod/seq_module.c
kern-prog/Locks/seq_mod/seq_reader1.c
kern-prog/Locks/seq_mod/seq_reader2.c
kern-prog/Locks/seq_mod/seq_writer1.c
kern-prog/Locks/seq_mod/seq_writer2.c
kern-prog/bh/jiq/jiq.c
kern-prog/bh/timing/tsc.c
kern-prog/bh/timing/tst-work-queue.c
kern-prog/bh/timing/while_delay.c
kern-prog/mem_cache/cache.c
kern-prog/mem_cache/cachepool.c
kern-prog/mm/dofork.c
kern-prog/mm/dofork.cpp
kern-prog/mm/domalloc.c
kern-prog/mm/domalloc.cpp
kern-prog/mm/dram.c
kern-prog/mm/mm.c
kern-prog/mm/pageinfo.c
kern-prog/mm/vma.c
kern-prog/modules/depmod.c
kern-prog/modules/mod.c
kern-prog/modules/mod1.c
kern-prog/modules/mod2.c
kern-prog/modules/mod3.c
kern-prog/proc/procfs_example.c
kern-prog/proc/seq.c
kern-prog/proc/simfs.c
kern-prog/proc/simpfs.c
kern-prog/proc/simple_proc.c
tst-work-queue.c
/usr/include/aio.h
/usr/include/asm/ioctl.h
/usr/include/asm/msr.h
/usr/include/asm/param.h
/usr/include/assert.h
/usr/include/bits/posix_opt.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/linux/blkpg.h
/usr/include/linux/errno.h
/usr/include/linux/ethtool.h
/usr/include/linux/fs.h
/usr/include/linux/hdreg.h
/usr/include/linux/kernel.h
/usr/include/linux/netdevice.h
/usr/include/linux/pci.h
/usr/include/linux/poll.h
/usr/include/linux/rtc.h
/usr/include/linux/sched.h
/usr/include/linux/serio.h
/usr/include/linux/stat.h
/usr/include/linux/types.h
/usr/include/linux/unistd.h
/usr/include/linux/version.h
/usr/include/linux/wait.h
/usr/include/malloc.h
/usr/include/mqueue.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/stropts.h
/usr/include/sys/file.h
/usr/include/sys/io.h
/usr/include/sys/ioctl.h
/usr/include/sys/ipc.h
/usr/include/sys/mman.h
/usr/include/sys/msg.h
/usr/include/sys/resource.h
/usr/include/sys/sem.h
/usr/include/sys/shm.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/times.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/wait.h
/usr/include/termios.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/param.h
/usr/include/asm/errno.h
/usr/include/asm/msr-index.h
/usr/include/asm/poll.h
/usr/include/asm/types.h
/usr/include/asm/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/mman.h
/usr/include/bits/mqueue.h
/usr/include/bits/mqueue2.h
/usr/include/bits/msq.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/sem.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/stropts.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/bits/xtitypes.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/if.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_packet.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/poll.h
/usr/include/bits/predefs.h
/usr/include/bits/select.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/socket.h
/usr/include/linux/stddef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctls.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/wchar.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/wctype.h
/usr/include/asm-generic/bitsperlong.h
